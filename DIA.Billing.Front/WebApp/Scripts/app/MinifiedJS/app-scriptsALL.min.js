'use strict';

//App Start
angular.module("DialogBilling", [
        "ngRoute",
        "ngSanitize",
        "ngCookies",
      //  "ngAnimate",
      

    //HELPERS
        "kendo.directives",
        "angular-loading-bar",

    //APP
        "UserManagement",         
        "KPIManagement",
        "DiaBillingNav",
        "BulkPayment",
   
        "cfp.hotkeys",
     
        "toaster",
       
    ]);

   




//Route Provider
angular.module("DialogBilling").config(["$routeProvider", "$httpProvider", '$compileProvider', function ($routeProvider, $httpProvider, $compileProvider) {

    //Route Navigation
    $routeProvider
        .when("/", {
            templateUrl: "/dashboard"
            //controller: "DashboardController"
        })
        .when("/dashboard", {
            templateUrl: "./Views/Common/dashboard.html"
            //controller: "DashboardController"
        })
        .when("/error/page-not-found", {
            templateUrl: "./Views/Error/404.html",
            controller: "ErrorController"
        })
        .when("/error/no-permission", {
            templateUrl: "./Views/Error/no-permission.html",
            controller: "ErrorController"
        });
        //.otherwise({ redirectTo: "/" });

    //host confic
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|tel):/);

}]);

//Run
angular.module("DialogBilling").run(['$rootScope', 'AuthService', '$location', '$cookieStore', function ($rootScope, AuthService, $location, $cookieStore) {

    // Everytime the route in our app changes check auth status
    $rootScope.$on("$routeChangeStart", function(event, next, current) {

        var permisionCodes = AuthService.getProfile();

        // Check login & access permission
        if (next.permissionCode && permisionCodes){

            if (permisionCodes.permission.indexOf(next.permissionCode) < 0) {
                $location.path('/error/no-permission');
            }

        } else {

            var custompaths_ = ["/","/dashboard","/error/no-permission","/error/page-not-found"];

            if(custompaths_.indexOf($location.$$path) < 0){
                AuthService.setAuthentication(false);
            }
        }
    });

}]);

angular.module("DialogBilling").constant("appPrintingConfig", {
    PRINTING_COPIES : 10
});
angular.module("DialogBilling").config(["$provide", "$httpProvider", function ($provide, $httpProvider) {

    // Intercept http calls.
    var MyHttpInterceptor = ["$q", "$cookies", function ($q, $cookieStore) {
        return {
            // On request success
            request: function (config) {
                //Set Token to header
                
                if (config.headers['Content-Type'] == "FILEUPLOAD") {
                    config.headers = {
                        'Auth-Token': $cookieStore.get('token') || "NULL",
                        'Accept': "*/*",
                        'Content-Type': undefined
                    };
                } else {
                    config.headers = {
                        'Auth-Token': $cookieStore.get('token') || "NULL",
                        'Accept': "application/json, text/plain, */*",
                        'Content-Type': "application/json;charset=utf-8"
                    };
                }

                // Return the config or wrap it in a promise if blank.
                return config || $q.when(config);
            },

            // On request failure
            requestError: function (rejection) {
 
                // Return the promise rejection.
                return $q.reject(rejection);
            },

            // On response success
            response: function (response) {

                // Return the response or promise.
                return response || $q.when(response);
            },

            // On response failture
            responseError: function (rejection) {
                if (rejection.status === 401) {
                    localStorage.removeItem("profile");
                    $cookieStore.remove("token");
                }

                // Return the promise rejection.
                return $q.reject(rejection);
            }
        };
    }];

    // Add the interceptor to the $httpProvider.
    $httpProvider.interceptors.push(MyHttpInterceptor);

}]);

//

angular.module("DialogBilling").controller("DashboardController", ["$scope", "LoginService", "AuthService", function ($scope, LoginService, AuthService) {


    }]);

 
//

angular.module("DialogBilling").controller('ErrorController', ['$scope', function ($scope) {


}]);           

'use strict';

angular.module("DialogBilling").controller("LoginController", ["$scope", "LoginService", "AuthService", "$location", "appConfig", function ($scope, LoginService, AuthService, $location, appConfig) {

    $scope.hasOutlet = false;                   //false: don't have outlets yet
    $scope.checkedDomainUserDetails = false;    //false: domain user not checked yet
    var domainUserName = null;
    $scope.needDomainUser = true;                //false: need to enter username
    $scope.needDomainPassword = true;           //true : need to enter password

    $scope.user = {
        UserId: "",
        Password: "",
        Outlet: ""
    };

    AuthService.setAuthentication(false);

    function getDomainUser() {
        console.log("domain1");
        if ($location.hash()) {

            if ($location.hash() != "canceled") {
                console.log($location.hash(), "$location.hash()");
                checkDomainUser($location.hash());
            } else {
                enableDefaultLogin();
            }

        }
        else {
            window.location.href = appConfig.DOMAIN_URL + "?r=" + $location.absUrl();
            console.log("domain1_else", window.location.href);
        }

    }
    //getDomainUser();

    //Check Domain user
    function checkDomainUser(DomainUser) {


        if (DomainUser) {
            LoginService.checkDomainUser(DomainUser).then(function (response) {

                console.log(response.data.Result.userName, "sadasdasdasd");

                if (response.data.Code == 0) {
                    $scope.needDomainUser = false;
                    $scope.needDomainPassword = response.data.Result.passWordRec;
                    $scope.user.UserId = response.data.Result.userName;
                    domainUserName = response.data.Result.userName;
                    $scope.user.Password = response.data.Result.passWordRec ? "" : response.data.Result.userName; //just for validation
                    $scope.checkedDomainUserDetails = true;
                    $scope.getOutlet();
                } else {
                    enableDefaultLogin();
                }
            }, function () {
                enableDefaultLogin();
            });
        } else {
            enableDefaultLogin();
        }

    }

    //this function will enable the default login form
    function enableDefaultLogin() {
        $scope.checkedDomainUserDetails = true;
        $scope.needDomainUser = true;
        $scope.needDomainPassword = true;
    }
      
    //FOR TEMPERORY SOLUTION [DOMAIN NAME ISSUE]
    enableDefaultLogin();

   

    //Get Outlet for User ID
    $scope.getOutlet = function () {

       

        if ($scope.user.UserId) {
            LoginService.getOutlet($scope.user.UserId).then(function (response) {

                if (response.Code != "0") {

                    $scope.outLetList = [];
                    var _oList = response.data.Result;

                    if (_oList.length > 1)
                        _oList.unshift({ OutletCode: "", OutletDesc: "Select" });

                    $scope.outLetList = _oList;
                    $scope.hasOutlet = true;
                    $scope.user.Outlet = _oList[0];

                } else {
                    //Empty the outlet list
                    $scope.outLetList = angular.copy([]);
                    $scope.hasOutlet = false;
                }

            }, function (response) {
                //Empty the outlet list
                $scope.outLetList = angular.copy([]);
                $scope.hasOutlet = false;
            });

        } else {
            $scope.outLetList = angular.copy([]);
        }

    };

    //Login Submit
    $scope.attemptLogin = function (isValid) {
        if (!$scope.user.Outlet.OutletCode) {
            $scope.alertMessage = new Message(3, "Please select outlet");
            return;
        }
        if (isValid) {

            var UserId = window.btoa($scope.user.UserId);
            var Password = window.btoa($scope.user.Password);

            LoginService.attemptLogin($scope.user.Outlet.OutletCode, { NetworkStatus1: UserId, NetworkStatus2: Password, DomainUser: domainUserName }).then(function (response) {

                console.log(response.data.Result, "response.data.Result from login");

                if (response.data.Result.permissionDetails.loginstatus == "Success") {

                    if (response.data.Result.permissionDetails.changePassword) {

                        var profile_ = {
                            outletCode: response.data.Result.permissionDetails.profile.outletCode,
                            outletDescription: response.data.Result.permissionDetails.profile.outletDescription,
                            permission: ["1003"],
                            token: response.data.Result.permissionDetails.profile.token,
                            userId: response.data.Result.permissionDetails.profile.userId,
                            userName: response.data.Result.permissionDetails.profile.userName,
                            redirectTo: "#/UserManagement/ChangePassword"
                        };
                           
                        AuthService.setProfile(profile_, response.data.Result.permissionDetails.profile.token);

                    } else {

                        AuthService.setProfile(response.data.Result.permissionDetails.profile, response.data.Result.permissionDetails.profile.token);
                    }

                } else {

                    $scope.alertMessage = new Message(response.data.Code, response.data.Message);

                }

            }, function (response) {
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);

            });
        }
        else {
            $scope.alertMessage = {
                title: "Required!",
                message: "Username & Password are required...",
                type: "E"
            };
        }

    };

    //outlet
    // $scope.LogintypeTypecode = [];
    //  $scope.LogintypeTypecode.unshift({ sbucodelist: "", sbucodelistcode: "Select" });

}]);


//

angular.module("DialogBilling").controller('LogoutController', ['$scope', 'AuthService', function ($scope, AuthService) {

    //AuthService.setAuthentication(false);


}]);
//

angular.module("DialogBilling").controller('MainController',
    ['$scope', 'Page', 'hotkeys', 'cfpLoadingBar', '$timeout', 'AuthService',
    function ($scope, Page, hotkeys, cfpLoadingBar, $timeout, AuthService) {

        //check login
        $scope.isLoggedIn = function () {
            return AuthService.isAuthenticated();
        };

        //get user info
        $scope.userInfo = function () {
            return AuthService.getProfile();
        };

        //logout
        $scope.logoutUser = function () {
            AuthService.setAuthentication(false);
        };

        //LABEL PROPERTIES
        $scope.label = {
            search : "Finder",
            create : "New"
        };

        //TOGGLE MENU
        $scope.panes = [{ collapsible: true, size: "275px",max:"275px" }, { collapsible: false }];
        var isPanesOpen = true;
        $scope.togglePanal = function(){

            if($(".k-splitbar .k-icon").hasClass("k-collapse-prev")){
                $(".k-splitbar .k-collapse-prev").trigger("click");
            } else {
                $(".k-splitbar .k-expand-prev").trigger("click");
            }

        };

        //Loading Bar
        $scope.start_ = function () {
            cfpLoadingBar.start();
        };
        $scope.complete_ = function () {
            cfpLoadingBar.complete();
        };
        $scope.$on("$locationChangeStart", function (scope, next, current) {
            $scope.start_();
        });
        $scope.$on("$routeChangeSuccess", function (scope, next, current) {
            $scope.complete_();
        });

        //ShortCuts
        hotkeys.add({
            combo: 'ctrl+s',
            description: 'This one goes to 11',
            callback: function (e, hotkey) {
                e.preventDefault();
            }
        });

        //Page Header Title
        $scope.HeadTitle = function () {
            return Page.getHeadTitle();
        };

        //Page Title
        $scope.Title = function () {
            return Page.getTitle();
        };

        //Field validator types
        var ErrorTypes = { Email: 1, Max: 2, Maxlength: 3, Min: 4, Minlength: 5, Number: 6, Pattern: 7, Required: 8, Url: 9 };
        $scope.ErrorTypes = ErrorTypes;

        //Form field validator
        $scope.hasError = function (source, type) {
            if (!source) {
                return false;
            }

            var rtnVal = (source.$pristine === false && source.$dirty === true && source.$invalid === true);

            if (type) {
                var statusObj = false, errorObj = source.$error;

                switch (type) {
                    case ErrorTypes.Email:
                        statusObj = errorObj.email; break;

                    case ErrorTypes.Max:
                        statusObj = errorObj.max; break;

                    case ErrorTypes.Maxlength:
                        statusObj = errorObj.maxlength; break;

                    case ErrorTypes.Min:
                        statusObj = errorObj.min; break;

                    case ErrorTypes.Minlength:
                        statusObj = errorObj.minlength; break;

                    case ErrorTypes.Number:
                        statusObj = errorObj.number; break;

                    case ErrorTypes.Pattern:
                        statusObj = errorObj.pattern; break;

                    case ErrorTypes.Required:
                        statusObj = errorObj.required; break;

                    case ErrorTypes.Url:
                        statusObj = errorObj.url; break;

                    default:
                        statusObj = false; break;
                } rtnVal = rtnVal && statusObj;

            } return rtnVal;
        };

        $scope.showErrors = function (form) {
            if (form && form.$error && form.$error.required) { } else { return; }

            for (var i = 0; i < form.$error.required.length; i++) {
                form.$error.required[i].$pristine = false;
                form.$error.required[i].$dirty = true;
                form.$error.required[i].$invalid = true;
            }
        };

    }]);
/*
ADF Remarks Modal Directive

*/

angular.module("DialogBilling").directive("adfRemarks", [function () {
    return {
        restrict: "E",  
        replace: true,
        scope: {
            params: "=",
            callback: "&",
            data: "@",        
            title: "@"
        },
        templateUrl: "./Views/Common/adfRemarks.html",
        controller: ["$scope", "$attrs", function ($scope, $attrs) {

            //Init
            //@@@@@@@@@@@@@@@@@@@@@@@@@@
            //-> Grid Sample data for demo purposes

            var adfRemarksSample = [
                { Note: '001', Remark: '001', CreatedDate: '002', CreatedUser: '002' }
            ];


            //@@@@@@@@@@@@@@@@@@@@@@@@@@



            var commonGridConfig = {
                input: true,
                numeric: false,
                pageSize: 10,
                pageSizes: [15, 50, 75, 100]
            };

            var configADFRemarks = {};
            var configADFRemarks = {
                columns: [
                   
                    { field: "Note", title: "Note", width: "100px" },
                    { field: "Remark", title: "Remark", width: "100px" },
                    { field: "CreatedDate", title: "CreatedDate", width: "80px" },
                    { field: "CreatedUser", title: "CreatedUser", width: "80px" }

                ],


                pageable: commonGridConfig,
                navigatable: true,
                editable: "inline",
                scrollable: true

            };

            configADFRemarks.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        id: "ID",
                        fields: {
                   
                            'Note': { editable: false, type: "string" },//CustomerName
                            'Remark': { editable: false, type: "string" },
                            'CreatedDate': { editable: false, type: "string" },
                            'CreatedUser': { editable: false, type: "string" }
                        }
                    }
                },
                pageSize: 10
            });


            $scope.dgGridADFRemarks = new DataGrid();
            $scope.dgGridADFRemarks.options(configADFRemarks);

            $scope.InitB = function (arg) {
                $scope.dgGridADFRemarks.Init(arg);
            };

            //watch params and initiate directives
            $scope.$watchCollection("params", function (_val) {
                if ($scope.params.onLoad) {
                    $scope.InitB();
                }
                console.log("params Adf" + _val);
                $scope.dgGridADFRemarks.data(_val);
                //$scope.dgGridADFRemarks.data(_val);
            });

            $scope.$watchCollection("data", function (_val) {
            });
            ///////////////////
        }]
    }

}]);
angular.module("DialogBilling").directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {

            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function () {
                scope.$apply(function (e) {
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);
angular.module("DialogBilling").directive("finder", ['FinderService', function (FinderService) {
    return {
        restrict: "E",
        replace: true,
        transclude : false,
        scope: {
            actionToCall: "&action",
            param: "=param",
            title: "@"
        },
        templateUrl: "./Views/Common/Finder.html",
        controller: ["$scope", "$attrs", "FinderService", function ($scope, $attrs, FinderService) {

            var grid_id = $attrs.id + "_Grid";
            $scope.gridId_ = grid_id;


            $scope.$watch("param", function (newParam) {
                console.log();
                $scope.finderDetailsObj = newParam;
            });


            //finder details object
            $scope.finderDetailsObj = [];
            if ($attrs.param) {
                $scope.$watch("param", function (newParam) {
                    $scope.finderDetailsObj = newParam;
                });
            }
            //Row Toggle
            $scope.rowHidden = true;
            $scope.rowHide = function (rowID) {
                if ($scope.rowHidden) {
                    return rowID > 0;
                } else {
                    return false;
                }
            };

            //Finder Dynamic Options List
            $scope.searchCount = [0, 1, 2, 3, 4];
            $scope.finder = [];
            $scope.typesDropDown = [];
            angular.forEach($scope.searchCount, function (i) {
                var selected = (i == "0");
                var operator = i == "0" ? "WHERE" : "";
                $scope.finder.push({ "Operator": operator, "ColumnName": "", "FieldType": "", "OperatorType": "", "KeyValue": "", "KeyValue2": "", "Boolean": true, "selected": selected });
            });

            //String Type
            $scope.types = [
                { "type_name": "Contains", "type": "String" },
                { "type_name": "Starts With", "type": "String" },
                { "type_name": "Ends With", "type": "String" },
                { "type_name": "Before", "type": "DateTime" },
                { "type_name": "After", "type": "DateTime" },
                { "type_name": "Between", "type": "DateTime" },
                { "type_name": "Equals", "type": "Boolean" },
                { "type_name": "Not Equals", "type": "Boolean" },
                { "type_name": "Not Equals", "type": "Number" },
                { "type_name": "=", "type": "Number" },
                { "type_name": ">", "type": "Number" },
                { "type_name": "<", "type": "Number" },
                { "type_name": "Between", "type": "Number" }
            ];

            //String Type == Boolean value
            $scope.prop = {
                "type": "select",
                "name": "Service",
                "value": "true",
                "values": ["", "true", "false"]
            };

            //Select & set search option based on string types.
            $scope.setSearchOptions = function (e) {
                $scope.finder[e].KeyValue = "";
                angular.forEach($scope.finderFields, function (field) {
                    if (field.FieldName == $scope.finder[e].ColumnName) {

                        //Set Types Drop down
                        var typesDropDown = [];
                        angular.forEach($scope.types, function (type) {
                            if (type.type == field.FieldType) {
                                typesDropDown.push(type);
                            }
                        });
                        $scope.typesDropDown[e] = typesDropDown;

                        //Set Field Type
                        $scope.finder[e].FieldType = field.FieldType;
                    }
                });
            };

            //Operators
            $scope.operator = [
                { value: "AND", text: "And" },
                { value: "OR", text: "Or" }
            ];

            //Load Data on first time
            FinderService.getFields({ "appId": $attrs.appId, "uiId": $attrs.uiId, "mapId": $attrs.mapId, "param": $scope.finderDetailsObj, "dataLoad": true })
                .then(function (response) {

                    if (!response.data.Result) {
                        return;
                    }
                    //set data to grid
                    var finderScriptFields_ = response.data.Result.finder.finderScriptFields || "";
                    $scope.finderFields = finderScriptFields_;

                    // -> GRID
                    //make columns
                    var columns_ = [];
                    angular.forEach(finderScriptFields_, function (data) {
                        columns_.push({ field: data.FieldName, title: data.FieldHeaderText, width: '150px' });
                    });

                    //default grid data
                    $("#" + grid_id).kendoGrid({
                        dataSource: {
                            data: response.data.Result.finder.finderDataGrid == null ? [] : response.data.Result.finder.finderDataGrid.Table,
                            pageSize: 10
                        },
                        sortable: true,
                        selectable: "multiple row",
                        pageable: {
                            refresh: true,
                            pageSizes: 8,
                            buttonCount: 8
                        },
                        change: dbClickRow,
                        columns: columns_
                    });

                    //enable double click
                    var clickedRow = null;
                    function dbClickRow(e) {
                        if(clickedRow == e.sender._data[0].uid){
                            clickedRow = null;
                            dbClickUpdate();
                        } else {
                            clickedRow = e.sender._data[0].uid;
                        }
                    }

                }, function () {
                });


            //GET GRID DATA on SEARCH
            $scope.finderForm = function () {

                $scope.successData = [];
                angular.forEach($scope.finder, function (data) {
                    if (data.selected) { $scope.successData.push(data); }
                });

                FinderService.searchQuery({ "appId": $attrs.appId, "uiId": $attrs.uiId, "mapId": $attrs.mapId, "searchClause": $scope.successData, "param": $scope.finderDetailsObj })
                    .then(function (response) {

                        var grid = $("#" + grid_id).data("kendoGrid");
                        grid.dataSource.data(response.data.Result.finder.finderDataGrid.Table);

                    }, function () {
                    });

            };

            //UPDATE FIND FIELD
            $scope.updateModel = function () {

                var grid = $("#" + grid_id).data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());

                if (selectedItem) {
                    var func = $scope.actionToCall();
                    func({ "appId": $attrs.appId, "uiId": $attrs.uiId, "mapId": $attrs.mapId, "selectedItem": selectedItem });
                } else {
                }

            };

            function dbClickUpdate(){
                $('#'+$attrs.id).modal('hide');
                $scope.updateModel();
            }

        }]
    };
}]);
angular.module("DialogBilling").directive("finderNew", ['FinderService', function (FinderService) {
    return {
        restrict : "E",
        replace : true,
        scope : {
            callback: "&",
            params:"=",
            info:"=",
            title:"@"
        },
        templateUrl : "./Views/Common/Finder.html",
        controller: ["$scope", "$attrs", "FinderService", function ($scope, $attrs, FinderService) {
            
            //Initiate
            var grid_id = $scope.info.modalId + "_Grid";
            $scope.gridId_ = grid_id;

            //String Type
            $scope.types = [
                { "type_name": "=", "type": "String" },
                { "type_name": "Contains", "type": "String" },
                { "type_name": "Starts With", "type": "String" },
                { "type_name": "Ends With", "type": "String" },
                { "type_name": "Before", "type": "DateTime" },
                { "type_name": "After", "type": "DateTime" },
                { "type_name": "Between", "type": "DateTime" },
                { "type_name": "Equals", "type": "Boolean" },
                
                { "type_name": "=", "type": "Number" },
                { "type_name": ">", "type": "Number" },
                { "type_name": "<", "type": "Number" },
                { "type_name": "Not Equals", "type": "Boolean" },
                { "type_name": "Not Equals", "type": "Number" },
                { "type_name": "Between", "type": "Number" }
            ];

            //String Type == Boolean value
            $scope.prop = {
                "type": "select",
                "name": "Service",
                "value": "true",
                "values": [ "", "true", "false"]
            };

            //Operators
            $scope.operator = [
                {value : "AND", text : "And"},
                {value : "OR", text : "Or"}
            ];
            
            //watch params and render grid data
            var changedFirstTime = true,
                paramArray = [];
            $scope.$watchCollection("params", function (params) {
                paramArray = params;
                if (changedFirstTime) {
                    changedFirstTime = false;
                } else {
                    //initData();
                }
            });


            //watch info and render finder
            $scope.$watchCollection("info", function () {
               
                if ($scope.info.onLoad) {
                  
                    initData();
                }
            });
           
            
            function init(){

                $scope.finderDirectiveMessage = new Message(MessageTypes.Empty);

                //Only first time initiation
                $scope.searchCount = [0,1,2,3,4];
                $scope.finder = [];
                $scope.typesDropDown = [];

                for(var i=0; i < $scope.searchCount.length; i++){
                    var selected = i==0 ? true : false;
                    var operator = i==0 ? "WHERE" : "";
                    $scope.finder.push({"Operator" : operator,"ColumnName" : "", "FieldType":"", "OperatorType" : "", "KeyValue":"", "KeyValue2":"", "Boolean":true, "selected": selected});
                }

                //Load Data on first time
            }

            init();

            function initData() {
                console.log("finder new val", $scope.info.appId);
                FinderService.getFields({ "appId": $scope.info.appId, "uiId": $scope.info.uiId, "mapId": $scope.info.mapId, "param": paramArray, "dataLoad": !$scope.info.dataLoad }).then(function (response) {

                    if (!response.data.Result) {
                        $scope.finderDirectiveMessage = new Message(MessageTypes.Error, "<h1>Finder details not found</h1> Please contact the administrator.");
                        return;
                    }
                 
                    //set data to grid
                    var finderScriptFields_ = response.data.Result.finder.finderScriptFields || "";
                    $scope.finderFields = finderScriptFields_;

                    // -> GRID
                    var columns_ = [];
                    angular.forEach(finderScriptFields_, function (data) {
                     //   console.log("before", data.FieldOrder);
                        if (data.FieldAlignment == 2
                            ) {
                                                    
                            columns_.push({ field: data.FieldName, title: data.FieldHeaderText, width: data.FieldWidth, attributes: { class: "text-right" } });
                        } else {
                            columns_.push({ field: data.FieldName, title: data.FieldHeaderText, width: data.FieldWidth });
                        }
                        
                    });

                    //default grid data
                    $("#"+grid_id).kendoGrid({
                        dataSource: {
                            data: response.data.Result.finder.finderDataGrid == null ? [] : response.data.Result.finder.finderDataGrid.Table,
                            pageSize: 10
                        },
                        sortable: true,
                        selectable: "single row",
                        resizable : true,
                        pageable: {
                            refresh: true,
                            pageSizes: 8,
                            buttonCount: 8
                        },
                        change: dbClickRow,
                        columns: columns_
                    });

                    //enable double click
                    var clickedRow = null;
                    function dbClickRow(e) {
                        if(clickedRow == e.sender._data[0].uid){
                            clickedRow = null;
                            dbClickUpdate();
                        } else {
                            clickedRow = e.sender._data[0].uid;
                        }
                    }

                 

                },function(){
                    $scope.finderDirectiveMessage = new Message(MessageTypes.Error, "<h1>Finder details not found</h1> Please check the service.");
                });

            }

            //Row Toggle
            $scope.rowHidden = true;
            $scope.rowHide = function(rowID){
                if($scope.rowHidden){
                    return rowID > 0;
                } else {
                    return false;
                }
            };

            //Select & set search option based on string types.
            $scope.setSearchOptions = function(e){

                //reset input fields
                $scope.finder[e].KeyValue = "";
                $scope.finder[e].KeyValue2 = "";

                angular.forEach($scope.finderFields, function(field){
                    if(field.FieldName==$scope.finder[e].ColumnName) {

                        //Set Types Drop down
                        var typesDropDown = [];
                        angular.forEach($scope.types, function(type){
                            if(type.type==field.FieldType){
                                typesDropDown.push(type);
                            }
                        });
                        $scope.typesDropDown[e] = typesDropDown;

                        //Set Field Type
                        $scope.finder[e].FieldType = field.FieldType;
                    }
                });
            };




            //GET GRID DATA on SEARCH
            $scope.finderForm = function(){

                $scope.successData = [];
                angular.forEach($scope.finder, function(data) {
                    if (data.selected) {$scope.successData.push(data);}
                });

                FinderService.searchQuery({ "appId": $scope.info.appId, "uiId": $scope.info.uiId, "mapId": $scope.info.mapId, "param": paramArray, "searchClause": $scope.successData }).then(function (response) {

                    if (!response.data.Result) {
                        $scope.finderDirectiveMessage = new Message(MessageTypes.Error, "<h1>Finder details not found</h1> Data not found.");
                        return;
                    }
                    var grid = $("#" + grid_id).data("kendoGrid");
                    grid.dataSource.data(response.data.Result.finder.finderDataGrid.Table);

                },function(){
                    $scope.finderDirectiveMessage = new Message(MessageTypes.Error, "<h1>Finder details not found</h1> Please contact the administrator.");
                });

            };

            //UPDATE FIND FIELD
            $scope.updateModel = function(val){

                var grid = $("#"+grid_id).data("kendoGrid");
                var selectedItem = grid.dataItem(grid.select());

                if(selectedItem){
                    var func = $scope.callback();
                    func({"appId": $scope.info.appId, "uiId": $scope.info.uiId, "mapId": $scope.info.mapId, "selectedItem":selectedItem});
                    $("#"+$scope.info.modalId).modal('hide');
                } else {
                    $scope.finderDirectiveMessage = new Message(MessageTypes.Error, "Please select a row in grid.");
                }

            };

            function dbClickUpdate() {
                console.log("modal")
                $('#'+$scope.info.modalId).modal('hide');
                $scope.updateModel();
            }

        }]
    } 
}]);
 

//FOCUS INPUT FUNCTION
window._focuse = function (modalID) {
    setTimeout(function () { 
        $("#" + modalID).find(".focus-here").focus();
    }, 700)
}

/*
//FOCUS INPUT on enter keypress DIRECTIVE for input attribute
*/

/** Usage:
  <input next-focus id="field1">
  <input next-focus id="field2">
  <input id="field3">
  Upon pressing ENTER key the directive will switch focus to
  the next field id e.g field2 
  Works for Web, iOS (Go button) & Android (Next button) browsers, 
**/

//
angular.module('DialogBilling').directive('nextFocus', [function () {
    return {
        restrict: 'A',
        link: function ($scope, elem, attrs) {

            elem.bind('keydown', function (e) {

                var code = e.keyCode || e.which;
                if (code === 13) {

                    console.log(elem);
                    elem.next()[0].focus();
                    // e.preventDefault();
                    //elem.next().focus();
                }
            });
        }
    }
}]);


// ###############################
/*
// Moving a focus when the input text field reaches a max length attribute
*/

angular.module('DialogBilling').directive('autoNext', [function () {
 
    return {
        restrict: 'A',
        link: function (scope, element, attr, form) {
            var tabindex = parseInt(attr.tabindex);
            var maxLength = parseInt(attr.ngMaxlength);
            element.on('keydown', function (e) {
                if (element.val().length == maxLength) {
                    var next = angular.element(document.body).find('[tabindex=' + (tabindex + 1) + ']');
                    if (next.length > 0) {
                        next.focus();
                        return next.triggerHandler('keydown', { which: e.which });
                    }
                    else {
                        return false;
                    }
                }
                return true;
            });

        }
    }



}]);





angular.module("DialogBilling").directive("message", function () {
    return {
        restrict: 'E',
        replace: true,
        scope: {
            ngModel: "="
        },
        template: '<div class="message" ng-if="ngModel" ng-class="{\'W\':\'message-warning\', \'S\':\'message-success\', \'E\':\'message-error\', \'I\':\'message-info\'}[ngModel.type]"><b>{{ngModel.title}}</b> <div ng-bind-html="ngModel.message"></div> <div class="message-close" ng-click="messageClose()">×</div></div>',
        link: function ($scope, elem, attr) {
            $scope.messageClose = function () {
                $scope.ngModel = "";
            };
        }
    };
});

var MessageTypes = { Success: 0, Error: 1, Information: 2, Warning: 3, Empty: 4 };

var Message = function (code, message, title) {
    switch (code) {
        case 0:
            this.type = 'S'; break;

        case 1:
            this.type = 'E'; break;

        case 2:
            this.type = 'I'; break;

        case 3:
            this.type = 'W'; break;

        case 4:
            return [];

        default:
            this.type = ''; break;
    }
    this.message = message || ''; this.title = title || '';
};


//angular.module("DialogBilling")

//    .directive("modal",[function (){
//        return {
//            restrict : "E",
//            replace : true,
//            transclude: true,
//            template : '<div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog"><div class="modal-content" ng-transclude></div></div></div>'
//        }
//    }])

//    .directive("modalTitle",[function (){
//        return {
//            restrict : "E",
//            replace : true,
//            transclude: true,
//            template : '<div class="modal-header">' +
//                            '<button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' +
//                            '<h4 class="modal-title" id="myModalLabel" ng-transclude></h4>' +
//                       '</div>'
//        }
//    }])

//    .directive("modalBody",[function (){
//        return {
//            restrict : "E",
//            replace : true,
//            transclude: true,
//            template : '<div class="modal-body" ng-transclude></div>'
//        }
//    }])

//    .directive("modalFooter",[function (){
//        return {
//            restrict : "E",
//            replace : true,
//            transclude: true,
//            template : '<div class="modal-footer" ng-transclude></div>'
//        }
//    }]);
angular.module("DialogBilling").directive("navigation", [function () {

    return {
        restrict: 'E',
        replace: true,
        scope: true,
        templateUrl: './Views/Common/navigation.html',
        controller: ["$scope", "AuthService", "$location", function ($scope, AuthService, $location) {

            $scope.locationPath = "#" + $location.path();

            var _base;
            $scope.pathCheck = function(base,path){
                if($scope.locationPath==(base+path)){
                    _base = base;
                    return true;
                } else if(_base==base){
                    return true;
                } else {
                    return false;
                }
            };

            function InitNav(){

                if($scope.permission_){
                    //--> Main Nav. 
                    var navigationList = [
                        {
                            "label": "DIA-CPOS",
                            "base": "#/CPOS/",
                            "icon": "arrow_left-right_alt",
                            "selected": false,
                            "menu": [
                                { "text": "Navigate to CPOS App", "path": "DashBord", "permission": "1201" },

                            ]
                        },
                        //{
                        //    "label": "User Management",
                        //    "base" : "#/UserManagement/",
                        //    "icon": "icon_profile",
                        //    "selected": false,
                        //    "menu": [
                        //        { "text": "Create User 1", "path": "CreateUsers", "permission" : "1002" },
                        //        { "text": "Change Password", "path": "ChangePassword", "permission" : "1003" },
                        //        { "text": "Reset Password", "path": "ResetPassword", "permission" : "1004" },
                        //        { "text": "Create Users Groups", "path": "CreateUsersGroups", "permission" : "1005" }
                        //    ]
                        //},





                         //{
                         //     "label": "Print Samples",
                         //     "base": "#/KPIManagement/",
                         //     "icon": "icon_profile",
                         //     "selected": false,
                         //     "menu": [
                         //         { "text": "Sample messages", "path": "Kpi", "permission": "50001" },
                         //         { "text": "Direct Print Demo", "path": "printDemo", "permission": "50001" },
                         //         { "text": "PDF Print Demo", "path": "pdfPrint", "permission": "50001" }
                                 
                         //     ]
                         //},

                         {
                             "label": "Bulk Payment", 
                             "base": "#/BulkPayment/",
                             "icon": "icon_check_alt2",
                             "selected": false,
                             "menu": [
                                 { "text": "Bulk Payment", "path": "BulkPayment", "permission": "50001" },
                                 { "text": "Batch Process Payments", "path": "BatchProcessPayments", "permission": "50019" },
                                 { "text": "Payment Inquiry", "path": "PaymentInquiry", "permission": "50002" },
                                 { "text": "Payment Cancellation", "path": "PaymentCancellation", "permission": "50003" },
                                 { "text": "Payment Transfer", "path": "PaymentTransfer", "permission": "50004" },
                                 { "text": "Bulk Receipt Printing", "path": "BulkReceiptPrinting", "permission": "50005" },
                                 { "text": "Forceful Realization Of Cheque", "path": "ForcefulRealizationOfCheque", "permission": "50006" },
                                 { "text": "Cheque Return", "path": "ChequeReturn", "permission": "50007" },
                                 { "text": "Cheque Return Reasons", "path": "ChequeReturnReasons", "permission": "50008" },
                                 { "text": "Cancellation & Transfer Reasons", "path": "CancellationAndTransferReasons", "permission": "50009" },
                                 { "text": "Payment Method", "path": "PaymentMethod", "permission": "50010" },
                                 { "text": "Payment Source", "path": "PaymentSource", "permission": "50011" },
                                 { "text": "Payment Type", "path": "PaymentType", "permission": "50012" },
                                 { "text": "Product Category", "path": "ProductCategory", "permission": "50013" },
                                 { "text": "Product Type", "path": "ProductType", "permission": "50014" },
                                 { "text": "Transfer Product", "path": "TransferProduct", "permission": "50015" },
                                 { "text": "Suspense Account Config", "path": "SuspenseAccountConfig", "permission": "50016" },
                                 { "text": "Allowed Payment Modes", "path": "AllowedPaymentModes", "permission": "50017" },
                                 { "text": "Transfer Logic", "path": "TransferLogic", "permission": "50018" },                 { "text": "Bill Invoice Payment", "path": "BillInvoicePayment", "permission": "50018" },
                                 //{ "text": "Bill Invoice Cancellation", "path": "BillInvoiceCancellation", "permission": "50018" }
                             ]
                         },
                         
                    {
                              "label": "Help", 
                              "base": "../../Views/Help/",
                              "icon": "icon_book",
                              "selected": false,
                              "menu": [
                                { "text": "User Manual", "path": "UserManual/index.htm#t=First_Topic.htm", "permission": "50001", "target":"_blank" },
                                { "text": "Bulk Payment Excel", "path": "Templates/BulkPaymentExcel.xlsx", "permission": "50001", "target": "_blank" },
                                { "text": "Bulk Cancellation Excel", "path": "Templates/BulkCancellationExcel.xlsx", "permission": "50001", "target": "_blank" },
                                { "text": "Bulk Print Excel", "path": "Templates/BulkPrintExcel.xlsx", "permission": "50001", "target": "_blank" },
                                { "text": "Batch Process", "path": "Templates/BatchProcess.xlsx", "permission": "50001", "target": "_blank" }
                              ]
                }

                          



                    ];
                    //<-- Main Nav 

                    angular.forEach(navigationList, function (item) {

                        var haveSubnav = false;

                        angular.forEach(item.menu, function (menu) {

                            if ($scope.checkPermission(menu.permission)) {
                                haveSubnav = true;
                            }

                        });

                        item["haveSubnav"] = haveSubnav;

                    });


                    console.log(navigationList);

                    $scope.navigation = navigationList;


                }

            }

            $scope.checkPermission = function(code){
                return ($scope.permission_.indexOf(code) >= 0) ? true : false;
            };

            if(AuthService.getProfile())
                $scope.permission_ = AuthService.getProfile().permission || '';

            //Check Permissione Change
            $scope.$watch('userInfo', function() {
                //
                if(AuthService.getProfile())
                    $scope.permission_ = AuthService.getProfile().permission || '';

                InitNav();
            });

 

        }]
    };

}]);



angular.module("DialogBilling").directive("permissionCode", function () {
    return {
        restrict: 'A',
        scope: {
            permissionCode: "="
        },
        controller: ["$scope", "$element", "AuthService", function ($scope, $element, AuthService) {

            var permissionCodes = AuthService.getProfile().permission;

          //  console.log($scope.permissionCode, permissionCodes, $element[0].innerHTML);


            if (permissionCodes.indexOf($scope.permissionCode) == -1) {
                angular.element($element).remove();
            }

        }]
    };
});
/*
Posting Status Modal Directive

*/

angular.module("DialogBilling").directive("postingStatus", [function () {
    return {
        restrict: "E",
        replace: true,
        scope: {
            params: "=",
            callback: "&",
            data: "@",
            title: "@"
        },
        templateUrl: "./Views/Common/postingStatus.html",
        controller: ["$scope", "$attrs", function ($scope, $attrs) {

            //Init


            //watch params and initiate directives
            $scope.$watchCollection("params", function (_val) {
              //  if ($scope.params.onLoad) {
                   // init();
               // }
            });

            $scope.$watchCollection("data", function (_val) {
                // console.log("datacollection", _val);

            });

        }]
    }

}]);
angular.module("DialogBilling").directive("reference", ['fileUploadService', "toaster", function (fileUploadService, toaster) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            options: "=",
            callback: "&"
        },
        templateUrl: 'Views/Common/Reference.html',
        controller: ["$scope", "$attrs", function ($scope, $attrs) {

            $scope.gridId = $scope.options.moduleId + "_grid";

            $scope.objTrans = [];
            $scope.Reference = [];
            $scope.TransReference = [];
            $scope.Reference.AttachWorkflow = true;
            $scope.Reference.Remarks = "";
            $scope.alertMessagePopup = new Message(MessageTypes.Empty); 

            $scope.clearAttachedFile = function () {
                $scope.Reference.Remarks = "";
                $scope.Reference.AttachWorkflow = false;
                $scope.TransReference.TrasnsactionReference = "";
                $scope.alertMessagePopup = new Message(MessageTypes.Empty);
            };

             

            $scope.$watchCollection("options", function (newValue) {
                $scope.options = newValue;
                if ($scope.options.TransactionId != undefined) {
                    $scope.GetAttchedFiles($scope.options.TransactionId, $scope.options.isAttachedDoc);
                }

            });



            $scope.uploadProgress = function (e) {
            };

            $scope.getFileDetails = function (e) {
                debugger;
                $scope.files = [];
                $scope.$apply(function () {

                    // STORE THE FILE OBJECT IN AN ARRAY.
                    for (var i = 0; i < e.files.length; i++) {
                        $scope.files.push(e.files[i])
                    }

                });
            };

            $scope.uploadDocuments = function () {
                $scope.files2 = [];
                console.log($scope.files, "$scope.myFileaaaaaaabbb");
                if ($scope.myFile != undefined) {


                    for (var i = 0; i < $scope.files.length; i++) {
                        var objAttached = {
                            form: $scope.Reference,
                            file: $scope.files[i],
                            ModuleId: $scope.options.moduleId,
                            TransactionId: $scope.options.TransactionId
                        };
                        $scope.files2.push(objAttached);

                    }

                    fileUploadService.attachedFiles($scope.files2).then(
                        function (result) {
                            console.log(result, 'result');
                            $scope.TransReference = {
                                TrasnsactionReference: result.data.Result.TrasnsRef.TrasnsactionReference
                            };

                            $scope.objTrans.push($scope.TransReference.TrasnsactionReference);

                            toaster.success({ type: 'success', title: 'Success', body: result.data.Message, showCloseButton: true });


                            $scope.finalCallBack();

                            //reload attached file gird view
                            $scope.GetAttchedFiles($scope.options.TransactionId, $scope.options.isAttachedDoc);


                        }, function (result) {
                            toaster.error({ type: 'Error', title: 'Error', body: result.data.Message, showCloseButton: true });

                        });
                } else {

                    toaster.error({ type: 'Error', title: 'Error', body: "Please select the upload file", showCloseButton: true });
                }

            };


            $scope.downloadFile = function (e) {
            };

            //-> Grid Start
            var config = {};

            config.pageable = {
                input: true,
                numeric: false
            };

            config.columns = [
                { field: "TransRef", title: "Transaction Ref" },
                { field: "FileName", title: "File Name" },
                { field: "Date", title: "Date" },
                { field: "Remark", title: "Remark" },
                {
                    field: "Download",
                    headerTemplate: 'Download',
                    template: '<button type="button" ng-click="gridDownload($event);" class="btn btn-sm btn-info">Download</button>',
                    width: "100px",
                    sortable: false
                },
                {
                    field: "Remove",
                    headerTemplate: 'Remove',
                    template: '<button type="button" ng-click="gridRemove($event);" ng-disabled = "dataItem.RemoveBtn" class="btn btn-sm btn-info">Remove</button>',
                    width: "100px",
                    sortable: false
                }
            ];

            config.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        //id: "TransRef",
                        fields: {
                            'TransRef': { editable: false, type: "string" },
                            'FileName': { editable: false, type: "string" },
                            'Date': { editable: false, type: "string" },
                            'Remark': { editable: false, type: "string" }
                        }
                    }
                },
                pageSize: 8
            });

            //Create a datagrid object
            $scope.dgGrid = new DataGrid();
            $scope.dgGrid.options(config);

            //Init
            $scope.Init = function (arg) {
                $scope.dgGrid.Init(arg);

            };

            $scope.finalCallBack = function () {
                var func = $scope.callback();
                console.log(func, 'in call back');
                func({ "TransactionReference": $scope.objTrans });
            };

            $scope.gridDownload = function (e) {
                var row = $(e.currentTarget).closest("tr");
                var dataItem = $scope.dgGrid.dataItem(row);

                fileUploadService.getAttachedFile(dataItem.TransRef, dataItem.FileId).then(
                   function (result) {
                       //window.open(result.config.url, '_blank' + Math.floor(Math.random() * 999999));
                       window.open(result.config.url);

                   }, function (result) {
                       $scope.alertMessagePopup = new Message(result.data.Code, result.data.Message);
                   });
            };

            $scope.gridRemove = function (e) {
                var row = $(e.currentTarget).closest("tr");
                var dataItem = $scope.dgGrid.dataItem(row);

                var z = "tr:eq(" + row.index() + ")";
                var grid = $("#dgAttachedFile").data("kendoGrid");

                fileUploadService.postRemoveAttachedFile(dataItem.TransRef).then(
                   function (result) {
                       grid.removeRow(grid.tbody.find(z));

                   }, function (result) {
                       $scope.alertMessagePopup = new Message(result.data.Code, result.data.Message);
                   });
            };

            $scope.GetAttchedFiles = function (transferId, isAttachedDoc) {

                console.log(transferId, isAttachedDoc, 'transferId, isAttachedDoc');

                if (transferId) {
                    fileUploadService.getAttachedFiles(transferId, isAttachedDoc).then(function (result) {
                        $scope.dgGrid.data([]);
                        $scope.dgGrid.data(result.data.Result.FileGird);//disabled.RemoveBtn

                        angular.forEach($scope.dgGrid.data(), function (row) {
                            if ($scope.options.IsDisabled) {
                                row.RemoveBtn = true;
                            } else {
                                row.RemoveBtn = false;
                            }
                        });

                    }, function (result) {
                        console.log("error", result);
                        $scope.alertMessagePopup = new Message(result.data.Code, result.data.Message);
                    });
                }

            };

        }]
    }
}]);
//

angular.module("DialogBilling").directive('rowSelector', [function () {
    return {
        restrict: 'A',
        scope: true,
        controller: function ($scope) {

            $scope.toggleSelectAll = function (ev) {
                var grid = $(ev.target).closest("[kendo-grid]").data("kendoGrid");
                var items = grid.dataSource.data();
                items.forEach(function (item) {
                    item.IsSelected = ev.target.checked;
                });
            };
        },
        link: function ($scope, $element, $attrs) {
            var options = angular.extend({}, $scope.$eval($attrs.kOptions));

            options.columns.unshift({
                template: "<input type='checkbox' ng-model='dataItem.IsSelected' />",
                title: "<input type='checkbox' title='Select all' ng-click='toggleSelectAll($event)' />",
                width: 50
            });
        }
    };


}]);

/**
 * Created by Jeyarathnem on 11/3/2014.
 * Zillione Business Solutions.
 */


angular.module("DialogBilling").directive('tooltip', function () {
    return {
        restrict: 'A',
        link: function(scope, element, attrs){
            $(element).hover(function(){
                // on mouseenter
                $(element).tooltip('show');
            }, function(){
                // on mouseleave
                $(element).tooltip('hide');
            });
        }
    };
});


angular.module("DialogBilling").directive('autofocus', ['$document', function ($document) {
    return {
        link: function($scope, $element, attrs) {
            setTimeout(function() {
                $element[0].focus();
            }, 100);
        }
    };
}])
//

angular.module("DialogBilling").directive('spValidation', function () {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, modelCtrl) {

            var _type = attrs["spValidation"];

            modelCtrl.$parsers.push(function (inputValue) {
                if (inputValue == undefined) return;

                //integers-number-text-double

                var transformedInput;

                //console.log(inputValue);

                if(_type=="number"){
                    transformedInput = inputValue.replace(/[^0-9]/g, '');
                } else if(_type=="text"){
                    transformedInput = inputValue.replace(/[^a-zA-Z]/g, '');
                } else if(_type=="double"){
                    transformedInput = inputValue.replace(/[a-zA-Z]/,'');
                } else if(_type=="integers"){
                    transformedInput = inputValue.replace(/[^\-{1}0-9]/,'');
                } else if (_type == "rupees") {
                    transformedInput = inputValue.replace(/[^0-9]/g, '');
                }

                //
                if (transformedInput!=inputValue) {
                    modelCtrl.$setViewValue(transformedInput);
                    modelCtrl.$render();
                }
                return transformedInput;

            });

        }
    };
});
/*
Yes No Confirmation Modal Directive

*/

angular.module("DialogBilling").directive("yesNo", [function () {
    return {
        restrict: "E",
        replace: true,
        scope: {
            params: "=",
            callback: "&",
            data: "@",
            title: "@",
            options: "=",
            message:"="
        },
        templateUrl: "./Views/Common/yesNo.html",
        controller: ["$scope", "$attrs", function ($scope, $attrs) {     


            $scope.$watchCollection("options", function (yesNoMessageParams) {
                $scope.options = yesNoMessageParams;
               // console.log(yesNoMessageParams.numericValue);  
            });

            $scope.$watchCollection("message", function (customMessage) {
                $scope.message = customMessage;
               // console.log(customMessage.Message);
            });
         
            $scope.objYesNo = [];
       
            $scope.finalCallBack = function (objYesNo) {
                var response = $scope.callback();
              //  console.log(response, 'in call back');   
                response({ "YesNoResponse": objYesNo, "Id": $scope.options.Id });
              
            };

            }]
    }

    }]);
//Jquery Kendo Grid

var DataGrid = function () {
    var jHandle = null;
    var isInitialized = false;

    var config = null;
    this.options = function (arg) {
        if (arg) { config = arg; config.resizable = true; }
        else { return config; }
    };

    var elementId = null;
    this.Id = function () { return elementId; };

    var internal = {
        getHandle: function () { return jHandle.data("kendoGrid"); }
    };

    this.getDataSource = function () { return jHandle.data("kendoGrid"); };

    this.removeSelectedRow = function (e) {
        var row = $(e.currentTarget).closest("tr");
        var z = "tr:eq(" + row.index() + ")";
        var grid = jHandle.data("kendoGrid");

        grid.removeRow(grid.tbody.find(z));
    };

    this.Init = function (arg, force) {
        force = force || false;

        if (isInitialized == true
            && force == false) { return; }

        elementId = arg;
        jHandle = $('#' + arg + '').kendoGrid();

        isInitialized = true;
    };

    this.dataItem = function (arg) {
        var kHandle = internal.getHandle();

        if (arg) { return kHandle.dataItem(arg); }
        else { return null; }
    };

    this.findByGuid = function (uid) {
        var dataItems = this.data();

        for (var i = 0; i < dataItems.length; i++) {
            if (dataItems[i].uid == uid) { return i; }
        } return -1;
    };

    this.removeByGuid = function (uid) {
        var rwIndex = this.findByGuid(uid);

        if (rwIndex < 0) { return null; }

        var dataItems = this.data();
        var objTemp = dataItems.splice(rwIndex, 1);

        if (objTemp && objTemp.length && objTemp.length > 0) {
            return objTemp[0];
        } else { return null; }
    };

    this.currentCell = function (arg) {
        var kHandle = internal.getHandle();

        if (arg) { kHandle.current(arg); }
        else { return kHandle.current(); }
    };

    this.refresh = function () {
       var kHandle = internal.getHandle();
        kHandle.refresh();
    };

    this.showColumn = function (arg) {
        if (!isInitialized) { return; }

        var kHandle = internal.getHandle();
        kHandle.showColumn(arg);
    };

    this.hideColumn = function (arg) {
        if (!isInitialized) { return; }

        var kHandle = internal.getHandle();        
        kHandle.hideColumn(arg);
    };

    this.data = function (arg) {
        var kHandle = internal.getHandle();

        if (arg) { kHandle.dataSource.data(arg); }
        else { return kHandle.dataSource.data(); }
    };

    this.select = function (arg) {
        var kHandle = internal.getHandle();
        if (arg) { kHandle.select(arg); }
    };
};
//Jquery Kendo Date Picker

var DatePicker = function (isNull) {
    isNull = isNull || false;

    //
    var config = null;
    this.options = function (arg) {
        if (arg) { config = arg; }
        else { return config; }
    };

    var elementId = null;
    this.Id = function () { return elementId; };


    var internal = {
        getHandle: function () { return jHandle.data("kendoDatePicker"); }
    };

    var jHandle = null, isinitialized = false;
    this.Init = function (arg, force) {
        force = force || false;

        if (isinitialized === true
            && force === false) { return; }

        elementId = arg;
        jHandle = $('#' + arg + '').kendoDatePicker({
            format: "yyyy/MM/dd"
        });

        isinitialized = true;
    };

    this.open = function () {
        var kHandle = internal.getHandle();
        kHandle.open();
    };

    this.close = function () {
        var kHandle = internal.getHandle();
        kHandle.close();
    };

    this.destroy = function () {
        var kHandle = internal.getHandle();
        kHandle.destroy();
    };

    this.enable = function (arg) {
        arg = arg || false;

        var kHandle = internal.getHandle();
        kHandle.enable(arg);
    };

    this.readonly = function (arg) {
        if (!isinitialized) { return; }

        arg = arg || false;

        var kHandle = internal.getHandle();
        kHandle.readonly(arg);
    };

    this.max = function (arg) {
        var kHandle = internal.getHandle();
        if (arg) { kHandle.max(arg); }
    };

    this.min = function (arg) {
        var kHandle = internal.getHandle();
        if (arg) { kHandle.min(arg); }
    };

    this.setOptions = function (arg) {
        var kHandle = internal.getHandle();
        if (arg) { kHandle.setOptions(arg); }
    };

    this.value = function (arg) {
        var kHandle = internal.getHandle();

        if (arg) { kHandle.value(arg); }
        else { return kHandle.value(); }
    };
        };
angular.module("DialogBilling").service('bulkExcelVerificationService', ['$http', 'appConfig', function ($http, appConfig) {
    return {
        getAttachedFiles: function (transferId, isAttachedDoc) { 
            return $http.get(appConfig.Billing_URL + 'AttachedFile/GetUploadDocuments/' + transferId + '/' + isAttachedDoc);
        },
        GetSuspenseAccountNo: function (sbu, payMethod, payType) {
            debugger;
            return $http.get(appConfig.Billing_URL + 'BillingController/GetSuspenseAccountNo/' + sbu + '/' + payMethod, + '/' + payType);
        },
        UploadExcelFiles: function (obj) { 
            //Bulk excel upload back office

            var validFileExtensions = [".xls", ".xlsx"];
            var blnValid = false;
            var fileName = obj.file.name;
            for (var j = 0; j < validFileExtensions.length; j++) {
                var sCurExtension = validFileExtensions[j];
                blnValid = fileName.substr(fileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase();
            }


            var fd = new FormData();
            fd.append('file', obj.file);
            fd.append('AttachWorkflow', false);
            fd.append('Remarks', "");
            fd.append('ModuleId', ""); 
            fd.append('TransactionId', "");

            if (appConfig.IsPostpaidCloud == "1") {
            return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
            } else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostUploadDocuments", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
            }
        },


        ExcelVerifycation: function (objRequest) { 
            var s = "100";
            if (appConfig.IsPostpaidCloud == "1") {
            return $http.post(appConfig.POSTPAID_MODULE_URL + '/GetCcbsCustDetails', objRequest);
            } else {
                return $http.post(appConfig.Billing_URL + 'BillingController/GetCcbsCustDetails', objRequest);
            }
        },

    };
}]);
(function () {
    'use strict';

    angular.module('DialogBilling')
      .service('DirectPrintService', function () {
          var printerConnected = false;
          var qz = window.qz;
          
          var service = {};
          service.start = function () {
              qz.websocket.connect().then(function () {
                  printerConnected = true;
                  console.log('Printer Connected.', arguments);
              })
                .catch(function (error) {
                    catchError(error);
                });
          };
          service.print = function (callback, htmlData, printer) {
              if (!!printer) {
                  return printHtml(callback, htmlData, printer);
              }
              service.getDefaultPrinter(function (defaultPrinter) {
                  if (!defaultPrinter) {
                      return catchError('Default Printer not found.');
                  }
                  printHtml(callback, htmlData, defaultPrinter);
              });
          };

          service.printPdf = function (callback, pdfBase64String, printer) {
              if (!!printer) {
                  return printPdf(callback, pdfBase64String, printer);
              }
              service.getDefaultPrinter(function (defaultPrinter) {
                  if (!defaultPrinter) {
                      return catchError('Default Printer noto found.');
                  }
                  printPdf(callback, pdfBase64String, defaultPrinter);
              });
          };

          service.getDefaultPrinter = function (callback) {
              getDefaultPrinter(callback);
          };
          service.getPrinters = getPrinters;

          function printHtml(callback, html, printer) {
              startServiceIfNotStarted(function () {
                  var config = qz.configs.create(printer,
                  {
                      size: { width: 4.50, height: 5.50 }, units: 'in',
                      //colorType: 'grayscale',
                      //interpolation: "nearest-neighbor"
                      margins: { top: 1.7 } //margins: { top: 0.25, right: 0.25, bottom: 0.25, left: 0.25 } 
                  });
                  var data = [{
                      type: 'html',
                      format: 'plain',
                      data: html
                  }];

                  qz.print(config, data)
                    .then(function () {
                        if (callback) {
                            callback();
                        }
                    }).catch(function (e) {
                        catchError(e);
                    });
              });
          }

          function printPdf(callback, pdfBase64String, printer) {
              startServiceIfNotStarted(function () {
                  var config = qz.configs.create(printer);
                  var data = [{
                      type: 'pdf',
                      format: 'base64',
                      data: pdfBase64String
                  }];
                  qz.print(config, data)
                    .then(function () {
                        if (callback) {
                            callback();
                        }
                    }).catch(function (e) {
                        catchError(e);
                    });
              });
          }

          function getPrinters(callback, search) {
              startServiceIfNotStarted(function () {
                  qz.printers.find(search).then(function (defaultPrinter) {
                      if (callback) {
                          callback(defaultPrinter);
                      }
                  }).catch(catchError);
              });
          }

          function getDefaultPrinter(callback) {
              startServiceIfNotStarted(function () {
                  qz.printers.getDefault().then(function (defaultPrinter) {
                      if (callback) {
                          callback(defaultPrinter);
                      }
                  }).catch(catchError);
              });
          }

          function startServiceIfNotStarted(callback) {
              if (qz.websocket.isActive()) {
                  callback();
              } else {
                  qz.websocket.connect().then(callback, function () {
                      window.location.assign('qz:launch');
                      qz.websocket.connect({
                          retries: 5,
                          delay: 1
                      }).then(callback, function () {
                          alert('Client Service is not started or installed.');
                          catchError('Client Service is not started or installed.');
                      });
                  });
              }
          }

          function catchError(err) {
              console.error(err);
          }
          return service;
      });
}());

angular.module("DialogBilling").service('fileUploadService', ['$http', 'appConfig', function ($http, appConfig) {
    return {
        spCreditBulk: function (file) {
                var fd = new FormData();
                fd.append('file', file);

                return $http.post(appConfig.API_URL + "SpCreditAdjusmentBulk/PostUploadDocuments", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
        },
        CreOutMain: function (file) {
            var fd = new FormData();
            fd.append('file', file);

            return $http.post(appConfig.API_URL + "CreditOutstandingMaintenance/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
        },
        
        validateFile: function (fileName) {
            var validFileExtensions = [".xls", ".xlsx"];
            var blnValid = false;
            for (var j = 0; j < validFileExtensions.length; j++) {
                var sCurExtension = validFileExtensions[j];
                blnValid = fileName.substr(fileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase();

                if (blnValid==true) {
                    return blnValid;
                }
            }
            return blnValid;
        },

        validateFileCSV: function (fileName) {
            var validFileExtensions = [".txt"];
            var blnValid = false;
            for (var j = 0; j < validFileExtensions.length; j++) {
                var sCurExtension = validFileExtensions[j];
                blnValid = fileName.substr(fileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase();
            }
            return blnValid;
        },

        PreOrderSerialsUpload: function (file) {
            var fd = new FormData();
            fd.append('file', file);

            return $http.post(appConfig.API_URL + "PreOrderVoucher/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
        },  

        BillingReceiptUpload: function (file) {
            debugger;
            var fd = new FormData();
            fd.append('file', file);

            if (appConfig.IsPostpaidCloud == "1") {
            return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" } 
            });
            } else {
                return $http.post(appConfig.Billing_URL + "PaymentInqueryController/PostUploadDocuments", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
            }
           
        },

        BillingBatchProcessUpload: function (file) {
            debugger;
            var fd = new FormData();
            fd.append('file', file);

            if (appConfig.IsPostpaidCloud == "1") {
            return $http.post(appConfig.POSTPAID_MODULE_URL + "/UploadBatchProcessDocument", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
            } else {
                return $http.post(appConfig.Billing_URL + "BatchProcessController/UploadBatchProcessDocument", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
            }
            
        },

        attachedFiles: function (obj) {
            debugger;
            var fd = new FormData();
            //fd.append('file', obj.file);
            //fd.append('AttachWorkflow', obj.form.AttachWorkflow);
            //fd.append('Remarks', obj.form.Remarks);
            //fd.append('ModuleId', obj.ModuleId);
            //fd.append('TransactionId', obj.TransactionId);
            for (var i in obj) {
                fd.append('file', obj[i].file);
                fd.append('AttachWorkflow', obj[i].form.AttachWorkflow);
                fd.append('Remarks', obj[i].form.Remarks);
                fd.append('ModuleId', obj[i].ModuleId);
                fd.append('TransactionId', obj[i].TransactionId);
            }

            return $http.post(appConfig.API_URL + "AttachedFile/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" } 
            });
        },

        UploadExcelFiles: function (obj) { 
            //Bulk excel upload back office

            var validFileExtensions = [".xls", ".xlsx"];
            var blnValid = false;
            var fileName = obj.file.name;
            for (var j = 0; j < validFileExtensions.length; j++) {
                var sCurExtension = validFileExtensions[j];
                blnValid = fileName.substr(fileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase();
            }
            

            var fd = new FormData();
            fd.append('file', obj.file);
            fd.append('AttachWorkflow', false);
            fd.append('Remarks', "");
            fd.append('ModuleId', "");
            fd.append('TransactionId', "");

            if (appConfig.IsPostpaidCloud == "1") {
            return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostUploadDocumentsBulk", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
            } else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostUploadDocuments", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
            }          
        },



        UploadExcelBulkReceiptPrintingFiles: function (obj) {
            var validFileExtensions = [".xls", ".xlsx"];
            var blnValid = false;
            var fileName = obj.file.name;
            for (var j = 0; j < validFileExtensions.length; j++) {
                var sCurExtension = validFileExtensions[j];
                blnValid = fileName.substr(fileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase();
            }

            var fd = new FormData();
            fd.append('file', obj.file);
            fd.append('ModuleId', obj.ModuleId);
            fd.append('TransactionId', obj.TransactionId);
            fd.append('ProductCategory', obj.ProductCategory);
            fd.append('PaymentSource', obj.PaymentSource);
            
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/BulkReceiptPrintingUploadDocuments", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
            }
            else {
            return $http.post(appConfig.Billing_URL + "BulkReceiptPrintingController/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
            }
        },

        getAttachedFiles: function (transferId, isAttachedDoc) {
            return $http.get(appConfig.API_URL + 'AttachedFile/GetUploadDocuments/' + transferId + '/' + isAttachedDoc);
        },
        getAttachedFile: function (transRef, FileId) {
            return $http.get(appConfig.API_URL + 'AttachedFile/GetUploadDocument/' + transRef + '/' + FileId);
        },
        postRemoveAttachedFile: function (transRef) {
            return $http.post(appConfig.API_URL + 'AttachedFile/PostRemoveAttachedFile/' + transRef);
        }
    };
}]);
//

angular.module("DialogBilling").service("FinderService", ["$http", "appConfig", function ($http, appConfig) {

    return {
        getFields: function (credentials) {
            debugger;
            if (appConfig.IsPostpaidCloud == "1" && (credentials.uiId == "BILLING-PAYMENTMETHOD"
                || credentials.uiId == "BILLING-PAYMENTTYPE" || credentials.uiId == "BILLING-PRODUCTCATEGORY"
                || credentials.uiId == "BILLING-CANCELLATIONREASON" || credentials.uiId == "BILLING-PAYMENTSOURCE"
                || credentials.uiId == "BILLING-PRODUCTTYPE" || credentials.uiId == "BILLING-TRANSFERLOGIC"
                || credentials.uiId == "BILLING-SUSPENSEACCOUNTCONFIG" || credentials.uiId == "BILLING-TRANSFERPRODUCT"
                || credentials.uiId == "BILLING-CHEQUERETURNREASON" || credentials.uiId == "POS-UPDATE-CHEQUEFR-Transaction-Id"
                || credentials.uiId == "BILLING-BULK-PAYMENT-001" || credentials.uiId == "BILLING-TRANSFER-BATCH"
                || credentials.uiId == "POS-BILLING-RECEIPTBATCH" || credentials.uiId == "POS-BILLING-RECEIPTBATCH-CANCEL"
                || credentials.uiId == "BILLING-BULKRECEIPTPRINTING" || credentials.uiId == "BILLING-TRANSFER-BATCH"
                || credentials.uiId == "POS-BILLING-BILLCANCELLATION" || credentials.uiId == "BATCH-PROCESS"
                || credentials.uiId == "BILLING-CHQ-RETURN")) {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetInterfaceFinders", credentials);
            }
            else if (appConfig.IsPrepaidCloud == "1" &&
            (credentials.uiId == "POS-EAI-Billing")) {
                return $http.post(appConfig.PREPAID_MODULE_URL + "/GetInterfaceFinders", credentials);
            }
            else {
                return $http.post(appConfig.API_URL + "Finders/GetInterfaceFinders", credentials);
            }
        },
        searchQuery: function (credentials) {
            if (appConfig.IsPostpaidCloud == "1" && (credentials.uiId == "BILLING-PAYMENTMETHOD"
                || credentials.uiId == "BILLING-PAYMENTTYPE" || credentials.uiId == "BILLING-PRODUCTCATEGORY"
                || credentials.uiId == "BILLING-CANCELLATIONREASON" || credentials.uiId == "BILLING-PAYMENTSOURCE"
                || credentials.uiId == "BILLING-PRODUCTTYPE" || credentials.uiId == "BILLING-TRANSFERLOGIC"
                || credentials.uiId == "BILLING-SUSPENSEACCOUNTCONFIG" || credentials.uiId == "BILLING-TRANSFERPRODUCT"
                || credentials.uiId == "BILLING-CHEQUERETURNREASON" || credentials.uiId == "POS-UPDATE-CHEQUEFR-Transaction-Id"
                || credentials.uiId == "BILLING-BULK-PAYMENT-001" || credentials.uiId == "BILLING-TRANSFER-BATCH"
                || credentials.uiId == "POS-BILLING-RECEIPTBATCH" || credentials.uiId == "POS-BILLING-RECEIPTBATCH-CANCEL"
                || credentials.uiId == "BILLING-BULKRECEIPTPRINTING" || credentials.uiId == "BILLING-TRANSFER-BATCH"
                || credentials.uiId == "POS-BILLING-BILLCANCELLATION" || credentials.uiId == "BATCH-PROCESS"
                || credentials.uiId == "BILLING-CHQ-RETURN")) {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostSearchFinderGrid", credentials);
            }
            else if (appConfig.IsPrepaidCloud == "1" &&
                (credentials.uiId == "POS-EAI-Billing")) {
                return $http.post(appConfig.PREPAID_MODULE_URL + "/PostSearchFinderGrid", credentials);
            }
            else {
                return $http.post(appConfig.API_URL + "Finders/PostSearchFinderGrid", credentials);
            }
        }
    };

}]);


//

angular.module("DialogBilling").service("LoginService", ["$http", "appConfig", function ($http, appConfig) {

    //USE appConfig.API_URL

    return {

        attemptLogin: function (Outlet, credintials) {
            if (appConfig.IsUserCloud == "1") {
                return $http.post(appConfig.USER_MODULE_URL + '/UserLogin/' + Outlet, credintials);
            }
            else {
            return $http.post(appConfig.API_URL + 'Login/UserLogin/' + Outlet, credintials);
            }
        },
        
        getOutlet: function (userID) {
            if (appConfig.IsUserCloud == "1") {
                return $http.get(appConfig.USER_MODULE_URL + '/outlet/' + userID);
            }
            else {
                return $http.get(appConfig.API_URL + 'Login/outlet/' + userID);
            }
            },

        getDomainUser: function () {
            
            return $http.get(appConfig.BASE_URL + 'WebForm1.aspx');
        },

        checkDomainUser: function (domainUsername) {
            if (appConfig.IsUserCloud == "1") {
                return $http.get(appConfig.USER_MODULE_URL + '/FindUserType/' + domainUsername);
            }
            else {
            return $http.get(appConfig.API_URL + 'Login/FindUserType/' + domainUsername);
            }
        },
        logOutUser: function (tocken) {

            var a = String(tocken);

            if (appConfig.IsUserCloud == "1") {
                return $http.get(appConfig.USER_MODULE_URL + '/logOutUser/' + a);
            }
            else {
            return $http.get(appConfig.API_URL + 'Login/logOutUser/' + a);
            }
        },

        whoImI: function (tocken) {
            var a = String(tocken);           
            console.log('from method');
            if (appConfig.IsUserCloud == "1") {
                return $http.get(appConfig.USER_MODULE_URL + '/whoImI/' + a);
            }
            else {
            return $http.get(appConfig.API_URL + 'Login/whoImI/' + a);
            }
        },

    };

}]);
//

angular.module("DialogBilling").service("Page", [function () {

    var Title = "Home",
        Domain = " :: Billing";

    this.setTitle = function (newTitle) {
        Title = newTitle;
    };

    this.getTitle = function () {
        return Title;
    };

    this.getHeadTitle = function () {
        return (Title + Domain);
    };

    return this;

}]);
//

angular.module("DialogBilling").service("PaymentModeService", ["$http", "appConfig", function ($http, appConfig) {

    return {
        initCreditNexusCard: function () {
            if (appConfig.IsPostpaidCloud == "1") {
            return $http.get(appConfig.POSTPAID_MODULE_URL + "/InitCreditNexusCard");
            } else {
                return $http.get(appConfig.API_URL + "PaymentMode/InitCreditNexusCard");
            }
        },
        initCheque: function () {
            if (appConfig.IsPostpaidCloud == "1") {
            return $http.get(appConfig.POSTPAID_MODULE_URL + "/InitCheque");
            } else {
                return $http.get(appConfig.API_URL + "PaymentMode/InitCheque");
            }
        },
        chequeReslove: function (data) {
            if (appConfig.IsPostpaidCloud == "1") {
            return $http.post(appConfig.POSTPAID_MODULE_URL + "/chequeReslove", data);
            } else {
                return $http.post(appConfig.API_URL + "PaymentMode/chequeReslove", data);
            }
        },
        EzCashVerifyStatus: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/EzCashVerifyStatus", data);
        },
        VerifyReedemtion: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/VerifyEzCashRedeemedStatus", data);
        },
        EzCashRetrieveAccRef: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/EzCashRetrieveAccRef", data);
        },
        EzCashRedemption: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/EzCashRedemption", data);
        },

        PostEzCashRedemption: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/PostEzCashRedemption", data);
        },

        StShowBalance: function (data) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/StShowBalance", data);
            }
            else {
            return $http.post(appConfig.API_URL + "PaymentMode/StShowBalance", data);
            }
        },

        StRequestNfcPin: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/StRequestNfcPin", data);
        },

        StRequestQuestion: function (data) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/StRequestQuestion", data);
            }
            else {
            return $http.post(appConfig.API_URL + "PaymentMode/StRequestQuestion", data);
            }
        },

        StarPointsRedemption: function (data) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/StarPointsRedemption", data);
            }
            else {
                return $http.post(appConfig.API_URL + "PaymentMode/StarPointsRedemption", data);
            }
        },

        SmRequestVoucher: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/SmRequestVoucher", data);
        },

        GfRequestVoucher: function (data) { 
            if (appConfig.IsVoucherCloud == "1") {
                return $http.post(appConfig.VOUCHER_MODULE_URL + "/GfRequestVoucher", data);
            }
            else {
            return $http.post(appConfig.API_URL + "PaymentMode/GfRequestVoucher", data);
            }
        },

        initMiscellaneous: function () {
            return $http.get(appConfig.POSTPAID_MODULE_URL + "/InitMiscellaneous");
        },

        VoRetrieveVoucher: function (data) {
            return $http.post(appConfig.API_URL + "PaymentMode/VoRetrieveVoucher", data);
        },

        VerifySerialNumbers: function (data) {
            return $http.get(appConfig.API_URL + "PaymentMode/VerifySerialNumbers/" + data);
        },

        UpdateSerials: function (detailItem) {
            return $http.post(appConfig.API_URL + "PaymentMode/UpdateSerials", detailItem);
        },

        sendPayRequest: function (sendPayRequestRequest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/sendPayRequest", sendPayRequestRequest);
            }
            else {
                return $http.post(appConfig.API_URL + "PaymentMode/sendPayRequest", sendPayRequestRequest);
            }
        },

        genieVerifyStatus: function (genieVerifyStatusRequest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/genieVerifyStatus", genieVerifyStatusRequest);
            }
            else {
                return $http.post(appConfig.API_URL + "PaymentMode/genieVerifyStatus", genieVerifyStatusRequest);
            }
        }, 

        PostPamentModeReferences: function (data, payMode) { 
            if (payMode == PaymentModesTypes.CreditCard) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/CreditNexusCardPaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/CreditNexusCardPaymentReference", data);
                }
            }
            else if (payMode == PaymentModesTypes.Cheque) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/ChequePaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/ChequePaymentReference", data);
                }
            }
            else if (payMode == PaymentModesTypes.SMSVoucher) {
                return $http.post(appConfig.API_URL + "PaymentMode/SmsGiftVoucherPaymentReference", data);
            }
            else if (payMode == PaymentModesTypes.GiftVoucher) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/GiftVoucherPaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/GiftVoucherPaymentReference", data);
                }
            }
            else if (payMode == PaymentModesTypes.BTR) {
                return $http.post(appConfig.API_URL + "PaymentMode/BtrPaymentReference", data);
            }
            else if (payMode == PaymentModesTypes.IBUY) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/IbuyPaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/IbuyPaymentReference", data);
                }
            }
            else if (payMode == PaymentModesTypes.Miscellaneous) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/MiscellaneousPaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/MiscellaneousPaymentReference", data);
                }
            }
            else if (payMode == PaymentModesTypes.Voucher) {
                return $http.post(appConfig.API_URL + "PaymentMode/VoucherPaymentReference", data);
            } else if (payMode == PaymentModesTypes.DDB) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/IbuyPaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/IbuyPaymentReference", data);
                }
            }
            else if (payMode == PaymentModesTypes.MS2) {
                if (appConfig.IsPostpaidCloud == "1") {
                    return $http.post(appConfig.POSTPAID_MODULE_URL + "/IbuyPaymentReference", data);
                }
                else {
                    return $http.post(appConfig.API_URL + "PaymentMode/IbuyPaymentReference", data); 
                }
            }
        },

        GetPaymentReferenceDetailsByReferenceId: function (refId, paymentMode) {
            return $http.get(appConfig.API_URL + "PaymentMode/GetPaymentReferenceDetailsByReferenceId/" + refId + "/" + paymentMode);
        },
        getValidator: function () {
            var ErrorTypes = { Email: 1, Max: 2, Maxlength: 3, Min: 4, Minlength: 5, Number: 6, Pattern: 7, Required: 8, Url: 9 };

            return {
                ErrorTypes: ErrorTypes,

                hasError: function (source, type) {
                    var rtnVal = (source.$pristine === false && source.$dirty === true && source.$invalid === true);

                    if (type) {
                        var statusObj = false, errorObj = source.$error;

                        switch (type) {
                            case ErrorTypes.Email:
                                statusObj = errorObj.email; break;

                            case ErrorTypes.Max:
                                statusObj = errorObj.max; break;

                            case ErrorTypes.Maxlength:
                                statusObj = errorObj.maxlength; break;

                            case ErrorTypes.Min:
                                statusObj = errorObj.min; break;

                            case ErrorTypes.Minlength:
                                statusObj = errorObj.minlength; break;

                            case ErrorTypes.Number:
                                statusObj = errorObj.number; break;

                            case ErrorTypes.Pattern:
                                statusObj = errorObj.pattern; break;

                            case ErrorTypes.Required:
                                statusObj = errorObj.required; break;

                            case ErrorTypes.Url:
                                statusObj = errorObj.url; break;

                            default:
                                statusObj = false; break;
                        } rtnVal = rtnVal && statusObj;

                    } return rtnVal;
                },

                showErrors: function (form) {
                    if (form && form.$error && form.$error.required) { } else { return; }

                    for (var i = 0; i < form.$error.required.length; i++) {
                        form.$error.required[i].$pristine = false;
                        form.$error.required[i].$dirty = true;
                        form.$error.required[i].$invalid = true;
                    }
                }
            };
        }
    };
}]);

/**
 * Created by SAMi on 20150608.
 * Zillione Business Solutions.
 */

angular.module("DialogBilling").service("PrintService", [function () {
    return {
        OpenPrint: function(verb, url, data, target) {
            var form = document.createElement("form");
            form.action = url;
            form.method = verb;
            form.target = target || "_self";
            if (data) {
                for (var key in data) {
                    var input = document.createElement("textarea");
                    input.name = key;
                    input.value = typeof data[key] === "object" ? JSON.stringify(data[key]) : data[key];
                    form.appendChild(input);
                }
            }
            form.style.display = 'none';

            //form.style.left = '100';
            //form.style.top = '100';
            //form.style.height = '750';
            //form.style.width = '1000';
            //form.style.display = 'left=100, top=100, height=750, width= 1000, status=no, resizable= yes, scrollbars= no, toolbar= no,location=no, menubar= no';

            document.body.appendChild(form);
            form.submit();
        }
    }
}]);

//

angular.module("DialogBilling").service("SerialNumberService", ["$http", "appConfig", function ($http, appConfig) {

    return {
        getSerialNumbers: function (itemCode) {
            return $http.get(appConfig.API_URL + "SerialNumber/get/" + itemCode);
        },
        validateSerialNumbers: function (data) {
            return $http.post(appConfig.API_URL + "GoodIssurance/PostValidatedSerialNumbers", data);
        },
        saveSerialNumbers: function (data) {
            var resp = $http.post(appConfig.API_URL + "SerialNumber/save", data);
            return resp;
        },
        ValidatedReturnSerialNumbers: function (data) {
            var resp = $http.post(appConfig.API_URL + "Warehouse/ValidatedReturnSerialNumbers", data);
            return resp;
        }
    };
}]);

angular.module("DialogBilling").service('UploadCSVService', ['$http', 'appConfig', function ($http, appConfig) {
    return {
        spCreditBulk: function (file) {
                var fd = new FormData();
                fd.append('file', file);

                return $http.post(appConfig.API_URL + "SpCreditAdjusmentBulk/PostUploadDocuments", fd, {
                    transformRequest: angular.identity,
                    headers: { 'Content-Type': "FILEUPLOAD" }
                });
        },
        CreOutMain: function (file) {
            var fd = new FormData();
            fd.append('file', file);

            return $http.post(appConfig.API_URL + "CreditOutstandingMaintenance/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
        },
        
        validateFile: function (fileName) {
            var validFileExtensions = [".xls", ".xlsx"];
            var blnValid = false;
            for (var j = 0; j < validFileExtensions.length; j++) {
                var sCurExtension = validFileExtensions[j];
                blnValid = fileName.substr(fileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase();
            }
            return blnValid;
        },

        attachedFiles: function (obj) {

            var fd = new FormData();
            fd.append('file', obj.file);
            fd.append('AttachWorkflow', obj.form.AttachWorkflow);
            fd.append('Remarks', obj.form.Remarks);
            fd.append('ModuleId', obj.ModuleId);
            fd.append('TransactionId', obj.TransactionId);

            return $http.post(appConfig.API_URL + "AttachedFile/PostUploadDocuments", fd, {
                transformRequest: angular.identity,
                headers: { 'Content-Type': "FILEUPLOAD" }
            });
        },
        getAttachedFiles: function (transferId, isAttachedDoc) {
            return $http.get(appConfig.API_URL + 'AttachedFile/GetUploadDocuments/' + transferId + '/' + isAttachedDoc);
        },
        getAttachedFile: function (transRef) {
            return $http.get(appConfig.API_URL + 'AttachedFile/GetUploadDocument/' + transRef);
        },
        postRemoveAttachedFile: function (transRef) {
            return $http.post(appConfig.API_URL + 'AttachedFile/PostRemoveAttachedFile/' + transRef);
        }
    };
}]);
'use strict';

/**
 * @version 2.0.3-2;
 * @overview QZ Tray Connector
 * <p/>
 * Connects a web client to the QZ Tray software.
 * Enables printing and device communication from javascript.
 *
 * @requires RSVP
 *     Provides Promises/A+ functionality for API calls.
 *     Can be overridden via <code>qz.api.setPromiseType</code> to remove dependency.
 * @requires Sha256
 *     Provides hashing algorithm for signing messages.
 *     Can be overridden via <code>qz.api.setSha256Type</code> to remove dependency.
 */
var qz = (function() {

///// POLYFILLS /////

    if (!Array.isArray) {
        Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === '[object Array]';
        };
    }


///// PRIVATE METHODS /////

    var _qz = {
        VERSION: "2.0.3-2",                              //must match @version above
        DEBUG: false,

        log: {
            /** Debugging messages */
            trace: function() { if (_qz.DEBUG) { console.log.apply(console, arguments); } },
            /** General messages */
            info: function() { console.info.apply(console, arguments); },
            /** Debugging errors */
            warn: function() { if (_qz.DEBUG) { console.warn.apply(console, arguments); } },
            /** General errors */
            error: function() { console.error.apply(console, arguments); }
        },


        //stream types
        streams: {
            serial: 'SERIAL', usb: 'USB', hid: 'HID'
        },


        websocket: {
            /** The actual websocket object managing the connection. */
            connection: null,

            /** Default parameters used on new connections. Override values using options parameter on {@link qz.websocket.connect}. */
            connectConfig: {
                host: ["localhost", "localhost.qz.io"], //hosts QZ Tray can be running on
                hostIndex: 0,                           //internal var - index on host array
                usingSecure: true,                      //boolean use of secure protocol
                protocol: {
                    secure: "wss://",                   //secure websocket
                    insecure: "ws://"                   //insecure websocket
                },
                port: {
                    secure: [8181, 8282, 8383, 8484],   //list of secure ports QZ Tray could be listening on
                    insecure: [8182, 8283, 8384, 8485], //list of insecure ports QZ Tray could be listening on
                    portIndex: 0                        //internal var - index on active port array
                },
                keepAlive: 60,                          //time between pings to keep connection alive, in seconds
                retries: 0,                             //number of times to reconnect before failing
                delay: 0                                //seconds before firing a connection
            },

            setup: {
                /** Loop through possible ports to open connection, sets web socket calls that will settle the promise. */
                findConnection: function(config, resolve, reject) {
                    //force flag if missing ports
                    if (!config.port.secure.length) {
                        if (!config.port.insecure.length) {
                            reject(new Error("No ports have been specified to connect over"));
                            return;
                        } else if (config.usingSecure) {
                            _qz.log.error("No secure ports specified - forcing insecure connection");
                            config.usingSecure = false;
                        }
                    } else if (!config.port.insecure.length && !config.usingSecure) {
                        _qz.log.trace("No insecure ports specified - forcing secure connection");
                        config.usingSecure = true;
                    }

                    var deeper = function() {
                        config.port.portIndex++;

                        if ((config.usingSecure && config.port.portIndex >= config.port.secure.length)
                            || (!config.usingSecure && config.port.portIndex >= config.port.insecure.length)) {
                            if (config.hostIndex >= config.host.length - 1) {
                                //give up, all hope is lost
                                reject(new Error("Unable to establish connection with QZ"));
                                return;
                            } else {
                                config.hostIndex++;
                                config.port.portIndex = 0;
                            }
                        }

                        // recursive call until connection established or all ports are exhausted
                        _qz.websocket.setup.findConnection(config, resolve, reject);
                    };

                    var address;
                    if (config.usingSecure) {
                        address = config.protocol.secure + config.host[config.hostIndex] + ":" + config.port.secure[config.port.portIndex];
                    } else {
                        address = config.protocol.insecure + config.host[config.hostIndex] + ":" + config.port.insecure[config.port.portIndex];
                    }

                    try {
                        _qz.log.trace("Attempting connection", address);
                        _qz.websocket.connection = new _qz.tools.ws(address);
                    }
                    catch(err) {
                        _qz.log.error(err);
                        deeper();
                        return;
                    }

                    if (_qz.websocket.connection != null) {
                        _qz.websocket.connection.established = false;

                        //called on successful connection to qz, begins setup of websocket calls and resolves connect promise after certificate is sent
                        _qz.websocket.connection.onopen = function(evt) {
                            _qz.log.trace(evt);
                            _qz.log.info("Established connection with QZ Tray on " + address);

                            _qz.websocket.setup.openConnection({ resolve: resolve, reject: reject });

                            if (config.keepAlive > 0) {
                                var interval = setInterval(function() {
                                    if (!qz.websocket.isActive()) {
                                        clearInterval(interval);
                                        return;
                                    }

                                    _qz.websocket.connection.send("ping");
                                }, config.keepAlive * 1000);
                            }
                        };

                        //called during websocket close during setup
                        _qz.websocket.connection.onclose = function() {
                            // Safari compatibility fix to raise error event
                            if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
                                _qz.websocket.connection.onerror();
                            }
                        };

                        //called for errors during setup (such as invalid ports), reject connect promise only if all ports have been tried
                        _qz.websocket.connection.onerror = function(evt) {
                            _qz.log.trace(evt);
                            deeper();
                        };
                    } else {
                        reject(new Error("Unable to create a websocket connection"));
                    }
                },

                /** Finish setting calls on successful connection, sets web socket calls that won't settle the promise. */
                openConnection: function(openPromise) {
                    _qz.websocket.connection.established = true;

                    //called when an open connection is closed
                    _qz.websocket.connection.onclose = function(evt) {
                        _qz.log.trace(evt);
                        _qz.log.info("Closed connection with QZ Tray");

                        //if this is set, then an explicit close call was made
                        if (_qz.websocket.connection.promise != undefined) {
                            _qz.websocket.connection.promise.resolve();
                        }

                        _qz.websocket.callClose(evt);
                        _qz.websocket.connection = null;

                        for(var uid in _qz.websocket.pendingCalls) {
                            if (_qz.websocket.pendingCalls.hasOwnProperty(uid)) {
                                _qz.websocket.pendingCalls[uid].reject(new Error("Connection closed before response received"));
                            }
                        }
                    };

                    //called for any errors with an open connection
                    _qz.websocket.connection.onerror = function(evt) {
                        _qz.websocket.callError(evt);
                    };

                    //send JSON objects to qz
                    _qz.websocket.connection.sendData = function(obj) {
                        _qz.log.trace("Preparing object for websocket", obj);

                        if (obj.timestamp == undefined) {
                            obj.timestamp = Date.now();
                        }
                        if (obj.promise != undefined) {
                            obj.uid = _qz.websocket.setup.newUID();
                            _qz.websocket.pendingCalls[obj.uid] = obj.promise;
                        }

                        try {
                            if (obj.call != undefined && obj.signature == undefined) {
                                var signObj = {
                                    call: obj.call,
                                    params: obj.params,
                                    timestamp: obj.timestamp
                                };

                                _qz.security.callSign(_qz.tools.hash(_qz.tools.stringify(signObj))).then(function(signature) {
                                    _qz.log.trace("Signature for call", signature);
                                    obj.signature = signature;
                                    _qz.signContent = undefined;

                                    _qz.websocket.connection.send(_qz.tools.stringify(obj));
                                });
                            } else {
                                _qz.log.trace("Signature for call", obj.signature);

                                //called for pre-signed content and (unsigned) setup calls
                                _qz.websocket.connection.send(_qz.tools.stringify(obj));
                            }
                        }
                        catch(err) {
                            _qz.log.error(err);

                            if (obj.promise != undefined) {
                                obj.promise.reject(err);
                                delete _qz.websocket.pendingCalls[obj.uid];
                            }
                        }
                    };

                    //receive message from qz
                    _qz.websocket.connection.onmessage = function(evt) {
                        var returned = JSON.parse(evt.data);

                        if (returned.uid == null) {
                            if (returned.type == null) {
                                //incorrect response format, likely connected to incompatible qz version
                                _qz.websocket.connection.close(4003, "Connected to incompatible QZ Tray version");

                            } else {
                                //streams (callbacks only, no promises)
                                switch(returned.type) {
                                    case _qz.streams.serial:
                                        if (!returned.event) {
                                            returned.event = JSON.stringify({ portName: returned.key, output: returned.data });
                                        }

                                        _qz.serial.callSerial(JSON.parse(returned.event));
                                        break;
                                    case _qz.streams.usb:
                                        if (!returned.event) {
                                            returned.event = JSON.stringify({ vendorId: returned.key[0], productId: returned.key[1], output: returned.data });
                                        }

                                        _qz.usb.callUsb(JSON.parse(returned.event));
                                        break;
                                    case _qz.streams.hid:
                                        _qz.hid.callHid(JSON.parse(returned.event));
                                        break;
                                    default:
                                        _qz.log.warn("Cannot determine stream type for callback", returned);
                                        break;
                                }
                            }

                            return;
                        }

                        _qz.log.trace("Received response from websocket", returned);

                        var promise = _qz.websocket.pendingCalls[returned.uid];
                        if (promise == undefined) {
                            _qz.log.warn('No promise found for returned response');
                        } else {
                            if (returned.error != undefined) {
                                promise.reject(new Error(returned.error));
                            } else {
                                promise.resolve(returned.result);
                            }
                        }

                        delete _qz.websocket.pendingCalls[returned.uid];
                    };


                    //send up the certificate before making any calls
                    //also gives the user a chance to deny the connection
                    function sendCert(cert) {
                        if (cert === undefined) { cert = null; }
                        _qz.websocket.connection.sendData({ certificate: cert, promise: openPromise });
                    }

                    _qz.security.callCert().then(sendCert).catch(sendCert);
                },

                /** Generate unique ID used to map a response to a call. */
                newUID: function() {
                    var len = 6;
                    return (new Array(len + 1).join("0") + (Math.random() * Math.pow(36, len) << 0).toString(36)).slice(-len)
                }
            },

            dataPromise: function(callName, params, signature, signingTimestamp) {
                return _qz.tools.promise(function(resolve, reject) {
                    var msg = {
                        call: callName,
                        promise: { resolve: resolve, reject: reject },
                        params: params,
                        signature: signature,
                        timestamp: signingTimestamp
                    };

                    _qz.websocket.connection.sendData(msg);
                });
            },

            /** Library of promises awaiting a response, uid -> promise */
            pendingCalls: {},

            /** List of functions to call on error from the websocket. */
            errorCallbacks: [],
            /** Calls all functions registered to listen for errors. */
            callError: function(evt) {
                if (Array.isArray(_qz.websocket.errorCallbacks)) {
                    for(var i = 0; i < _qz.websocket.errorCallbacks.length; i++) {
                        _qz.websocket.errorCallbacks[i](evt);
                    }
                } else {
                    _qz.websocket.errorCallbacks(evt);
                }
            },

            /** List of function to call on closing from the websocket. */
            closedCallbacks: [],
            /** Calls all functions registered to listen for closing. */
            callClose: function(evt) {
                if (Array.isArray(_qz.websocket.closedCallbacks)) {
                    for(var i = 0; i < _qz.websocket.closedCallbacks.length; i++) {
                        _qz.websocket.closedCallbacks[i](evt);
                    }
                } else {
                    _qz.websocket.closedCallbacks(evt);
                }
            }
        },


        printing: {
            /** Default options used for new printer configs. Can be overridden using {@link qz.configs.setDefaults}. */
            defaultConfig: {
                //value purposes are explained in the qz.configs.setDefaults docs

                colorType: 'color',
                copies: 1,
                density: 0,
                duplex: false,
                fallbackDensity: null,
                interpolation: 'bicubic',
                jobName: null,
                margins: 0,
                orientation: null,
                paperThickness: null,
                printerTray: null,
                rasterize: true,
                rotation: 0,
                scaleContent: true,
                size: null,
                units: 'in',

                altPrinting: false,
                encoding: null,
                endOfDoc: null,
                perSpool: 1
            }
        },


        serial: {
            /** List of functions called when receiving data from serial connection. */
            serialCallbacks: [],
            /** Calls all functions registered to listen for serial events. */
            callSerial: function(streamEvent) {
                if (Array.isArray(_qz.serial.serialCallbacks)) {
                    for(var i = 0; i < _qz.serial.serialCallbacks.length; i++) {
                        _qz.serial.serialCallbacks[i](streamEvent);
                    }
                } else {
                    _qz.serial.serialCallbacks(streamEvent);
                }
            }
        },


        usb: {
            /** List of functions called when receiving data from usb connection. */
            usbCallbacks: [],
            /** Calls all functions registered to listen for usb events. */
            callUsb: function(streamEvent) {
                if (Array.isArray(_qz.usb.usbCallbacks)) {
                    for(var i = 0; i < _qz.usb.usbCallbacks.length; i++) {
                        _qz.usb.usbCallbacks[i](streamEvent);
                    }
                } else {
                    _qz.usb.usbCallbacks(streamEvent);
                }
            }
        },


        hid: {
            /** List of functions called when receiving data from hid connection. */
            hidCallbacks: [],
            /** Calls all functions registered to listen for hid events. */
            callHid: function(streamEvent) {
                if (Array.isArray(_qz.hid.hidCallbacks)) {
                    for(var i = 0; i < _qz.hid.hidCallbacks.length; i++) {
                        _qz.hid.hidCallbacks[i](streamEvent);
                    }
                } else {
                    _qz.hid.hidCallbacks(streamEvent);
                }
            }
        },


        security: {
            /** Function used to resolve promise when acquiring site's public certificate. */
            certPromise: function(resolve, reject) { reject(); },
            /** Called to create new promise (using {@link _qz.security.certPromise}) for certificate retrieval. */
            callCert: function() {
                return _qz.tools.promise(_qz.security.certPromise);
            },

            /** Function used to create promise resolver when requiring signed calls. */
            signaturePromise: function() { return function(resolve) { resolve(); } },
            /** Called to create new promise (using {@link _qz.security.signaturePromise}) for signed calls. */
            callSign: function(toSign) {
                return _qz.tools.promise(_qz.security.signaturePromise(toSign));
            }
        },


        tools: {
            /** Create a new promise */
            promise: function(resolver) {
                return new RSVP.Promise(resolver);
            },

            stringify: function(object) {
                //old versions of prototype affect stringify
                var pjson = Array.prototype.toJSON;
                delete Array.prototype.toJSON;

                var result = JSON.stringify(object);

                if (pjson) {
                    Array.prototype.toJSON = pjson;
                }

                return result;
            },

            hash: function(data) {
                return Sha256.hash(data);
            },

            ws: typeof WebSocket !== 'undefined' ? WebSocket : null,

            absolute: function(loc) {
                if (document && typeof document.createElement === 'function') {
                    var a = document.createElement("a");
                    a.href = loc;
                    return a.href;
                }
                return loc;
            },

            /** Performs deep copy to target from remaining params */
            extend: function(target) {
                //special case when reassigning properties as objects in a deep copy
                if (typeof target !== 'object') {
                    target = {};
                }

                for(var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (!source) { continue; }

                    for(var key in source) {
                        if (source.hasOwnProperty(key)) {
                            if (target === source[key]) { continue; }

                            if (source[key] && source[key].constructor && source[key].constructor === Object) {
                                var clone;
                                if (Array.isArray(source[key])) {
                                    clone = target[key] || [];
                                } else {
                                    clone = target[key] || {};
                                }

                                target[key] = _qz.tools.extend(clone, source[key]);
                            } else if (source[key] !== undefined) {
                                target[key] = source[key];
                            }
                        }
                    }
                }

                return target;
            }
        }
    };


///// CONFIG CLASS ////

    /** Object to handle configured printer options. */
    function Config(printer, opts) {
        /**
         * Set the printer assigned to this config.
         * @param {string|Object} newPrinter Name of printer. Use object type to specify printing to file or host.
         *  @param {string} [newPrinter.name] Name of printer to send printing.
         *  @param {string} [newPrinter.file] Name of file to send printing.
         *  @param {string} [newPrinter.host] IP address or host name to send printing.
         *  @param {string} [newPrinter.port] Port used by &lt;printer.host>.
         */
        this.setPrinter = function(newPrinter) {
            if (typeof newPrinter === 'string') {
                newPrinter = { name: newPrinter };
            }

            this.printer = newPrinter;
        };

        /**
         *  @returns {Object} The printer currently assigned to this config.
         */
        this.getPrinter = function() {
            return this.printer;
        };

        /**
         * Alter any of the printer options currently applied to this config.
         * @param newOpts {Object} The options to change. See <code>qz.config.setDefaults</code> docs for available values.
         *
         * @see qz.config.setDefaults
         */
        this.reconfigure = function(newOpts) {
            _qz.tools.extend(this.config, newOpts);
        };

        /**
         * @returns {Object} The currently applied options on this config.
         */
        this.getOptions = function() {
            return this.config;
        };

        // init calls for new config object
        this.setPrinter(printer);
        this.config = opts;
    }

    /**
     * Shortcut method for calling <code>qz.print</code> with a particular config.
     * @param {Array<Object|string>} data Array of data being sent to the printer. See <code>qz.print</code> docs for available values.
     * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.
     * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.
     *
     * @example
     * qz.print(myConfig, ...); // OR
     * myConfig.print(...);
     *
     * @see qz.print
     */
    Config.prototype.print = function(data, signature, signingTimestamp) {
        qz.print(this, data, signature, signingTimestamp);
    };


///// PUBLIC METHODS /////

    /** @namespace qz */
    return {

        /**
         * Calls related specifically to the web socket connection.
         * @namespace qz.websocket
         */
        websocket: {
            /**
             * Check connection status. Active connection is necessary for other calls to run.
             *
             * @returns {boolean} If there is an active connection with QZ Tray.
             *
             * @see connect
             *
             * @memberof  qz.websocket
             */
            isActive: function() {
                return _qz.websocket.connection != null && _qz.websocket.connection.established;
            },

            /**
             * Call to setup connection with QZ Tray on user's system.
             *
             * @param {Object} [options] Configuration options for the web socket connection.
             *  @param {string|Array<string>} [options.host=['localhost', 'localhost.qz.io']] Host running the QZ Tray software.
             *  @param {Object} [options.port] Config options for ports to cycle.
             *   @param {Array<number>} [options.port.secure=[8181, 8282, 8383, 8484]] Array of secure (WSS) ports to try
             *   @param {Array<number>} [options.port.insecure=[8182, 8283, 8384, 8485]] Array of insecure (WS) ports to try
             *  @param {boolean} [options.usingSecure=true] If the web socket should try to use secure ports for connecting.
             *  @param {number} [options.keepAlive=60] Seconds between keep-alive pings to keep connection open. Set to 0 to disable.
             *  @param {number} [options.retries=0] Number of times to reconnect before failing.
             *  @param {number} [options.delay=0] Seconds before firing a connection.  Ignored if <code>options.retries</code> is 0.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.websocket
             */
            connect: function(options) {
                return _qz.tools.promise(function(resolve, reject) {
                    if (qz.websocket.isActive()) {
                        reject(new Error("An open connection with QZ Tray already exists"));
                        return;
                    } else if (_qz.websocket.connection != null) {
                        reject(new Error("The current connection attempt has not returned yet"));
                        return;
                    }

                    if (!_qz.tools.ws) {
                        reject(new Error("WebSocket not supported by this browser"));
                        return;
                    } else if (!_qz.tools.ws.CLOSED || _qz.tools.ws.CLOSED == 2) {
                        reject(new Error("Unsupported WebSocket version detected: HyBi-00/Hixie-76"));
                        return;
                    }

                    //ensure some form of options exists for value checks
                    if (options == undefined) { options = {}; }

                    //disable secure ports if page is not secure
                    if (typeof location === 'undefined' || location.protocol !== 'https:') {
                        //respect forcing secure ports if it is defined, otherwise disable
                        if (typeof options.usingSecure === 'undefined') {
                            _qz.log.trace("Disabling secure ports due to insecure page");
                            options.usingSecure = false;
                        }
                    }

                    //ensure any hosts are passed to internals as an array
                    if (typeof options.host !== 'undefined' && !Array.isArray(options.host)) {
                        options.host = [options.host];
                    }

                    var attempt = function(count) {
                        var nextAttempt = function() {
                            if (options && count < options.retries) {
                                attempt(count + 1);
                            } else {
                                _qz.websocket.connection = null;
                                reject.apply(null, arguments);
                            }
                        };

                        var delayed = function() {
                            var config = _qz.tools.extend({}, _qz.websocket.connectConfig, options);
                            _qz.websocket.setup.findConnection(config, resolve, nextAttempt)
                        };
                        if (count == 0) {
                            delayed(); // only retries will be called with a delay
                        } else {
                            setTimeout(delayed, options.delay * 1000);
                        }
                    };

                    attempt(0);
                });
            },

            /**
             * Stop any active connection with QZ Tray.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.websocket
             */
            disconnect: function() {
                return _qz.tools.promise(function(resolve, reject) {
                    if (qz.websocket.isActive()) {
                        _qz.websocket.connection.close();
                        _qz.websocket.connection.promise = { resolve: resolve, reject: reject };
                    } else {
                        reject(new Error("No open connection with QZ Tray"))
                    }
                });
            },

            /**
             * List of functions called for any connections errors outside of an API call.<p/>
             * Also called if {@link websocket#connect} fails to connect.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.
             *
             * @memberof qz.websocket
             */
            setErrorCallbacks: function(calls) {
                _qz.websocket.errorCallbacks = calls;
            },

            /**
             * List of functions called for any connection closing event outside of an API call.<p/>
             * Also called when {@link websocket#disconnect} is called.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.
             *
             * @memberof qz.websocket
             */
            setClosedCallbacks: function(calls) {
                _qz.websocket.closedCallbacks = calls;
            },

            /**
             * @param {string} [hostname] Hostname to try to connect to when determining network interfaces, defaults to "google.com"
             * @param {number} [port] Port to use with custom hostname, defaults to 443
             *
             * @returns {Promise<Object<{ipAddress: String, macAddress: String}>|Error>} Connected system's network information.
             *
             * @memberof qz.websocket
             */
            getNetworkInfo: function(hostname, port) {
                return _qz.websocket.dataPromise('websocket.getNetworkInfo', {
                    hostname: hostname,
                    port: port
                });
            },

            /**
             * @returns {Object<{socket: String, host: String, port: Number}>} Details of active websocket connection
             *
             * @memberof qz.websocket
             */
            getConnectionInfo: function() {
                if (_qz.websocket.connection) {
                    var url = _qz.websocket.connection.url.split(/[:\/]+/g);
                    return { socket: url[0], host: url[1], port: +url[2] };
                } else {
                    throw new Error("A connection to QZ has not been established yet");
                }
            }

        },


        /**
         * Calls related to getting printer information from the connection.
         * @namespace qz.printers
         */
        printers: {
            /**
             * @returns {Promise<string|Error>} Name of the connected system's default printer.
             *
             * @memberof qz.printers
             */
            getDefault: function() {
                return _qz.websocket.dataPromise('printers.getDefault');
            },

            /**
             * @param {string} [query] Search for a specific printer. All printers are returned if not provided.
             *
             * @returns {Promise<Array<string>|string|Error>} The matched printer name if <code>query</code> is provided.
             *                                                Otherwise an array of printer names found on the connected system.
             *
             * @memberof qz.printers
             */
            find: function(query) {
                return _qz.websocket.dataPromise('printers.find', { query: query });
            }
        },

        /**
         * Calls related to setting up new printer configurations.
         * @namespace qz.configs
         */
        configs: {
            /**
             * Default options used by new configs if not overridden.
             * Setting a value to NULL will use the printer's default options.
             * Updating these will not update the options on any created config.
             *
             * @param {Object} options Default options used by printer configs if not overridden.
             *
             *  @param {string} [options.colorType='color'] Valid values <code>[color | grayscale | blackwhite]</code>
             *  @param {number} [options.copies=1] Number of copies to be printed.
             *  @param {number|Array<number>} [options.density=72] Pixel density (DPI, DPMM, or DPCM depending on <code>[options.units]</code>).
             *      If provided as an array, uses the first supported density found (or the first entry if none found).
             *  @param {boolean} [options.duplex=false] Double sided printing
             *  @param {number} [options.fallbackDensity=null] Value used when default density value cannot be read, or in cases where reported as "Normal" by the driver, (in DPI, DPMM, or DPCM depending on <code>[options.units]</code>).
             *  @param {string} [options.interpolation='bicubic'] Valid values <code>[bicubic | bilinear | nearest-neighbor]</code>. Controls how images are handled when resized.
             *  @param {string} [options.jobName=null] Name to display in print queue.
             *  @param {Object|number} [options.margins=0] If just a number is provided, it is used as the margin for all sides.
             *   @param {number} [options.margins.top=0]
             *   @param {number} [options.margins.right=0]
             *   @param {number} [options.margins.bottom=0]
             *   @param {number} [options.margins.left=0]
             *  @param {string} [options.orientation=null] Valid values <code>[portrait | landscape | reverse-landscape]</code>
             *  @param {number} [options.paperThickness=null]
             *  @param {string} [options.printerTray=null] //TODO - string?
             *  @param {boolean} [options.rasterize=true] Whether documents should be rasterized before printing. Forced TRUE if <code>[options.density]</code> is specified.
             *  @param {number} [options.rotation=0] Image rotation in degrees.
             *  @param {boolean} [options.scaleContent=true] Scales print content to page size, keeping ratio.
             *  @param {Object} [options.size=null] Paper size.
             *   @param {number} [options.size.width=null] Page width.
             *   @param {number} [options.size.height=null] Page height.
             *  @param {string} [options.units='in'] Page units, applies to paper size, margins, and density. Valid value <code>[in | cm | mm]</code>
             *
             *  @param {boolean} [options.altPrinting=false] Print the specified file using CUPS command line arguments.  Has no effect on Windows.
             *  @param {string} [options.encoding=null] Character set
             *  @param {string} [options.endOfDoc=null]
             *  @param {number} [options.perSpool=1] Number of pages per spool.
             *
             * @memberof qz.configs
             */
            setDefaults: function(options) {
                _qz.tools.extend(_qz.printing.defaultConfig, options);
            },

            /**
             * Creates new printer config to be used in printing.
             *
             * @param {string|object} printer Name of printer. Use object type to specify printing to file or host.
             *  @param {string} [printer.name] Name of printer to send printing.
             *  @param {string} [printer.file] Name of file to send printing.
             *  @param {string} [printer.host] IP address or host name to send printing.
             *  @param {string} [printer.port] Port used by &lt;printer.host>.
             * @param {Object} [options] Override any of the default options for this config only.
             *
             * @returns {Config} The new config.
             *
             * @see config.setDefaults
             *
             * @memberof qz.configs
             */
            create: function(printer, options) {
                var myOpts = _qz.tools.extend({}, _qz.printing.defaultConfig, options);
                return new Config(printer, myOpts);
            }
        },


        /**
         * Send data to selected config for printing.
         * The promise for this method will resolve when the document has been sent to the printer. Actual printing may not be complete.
         * <p/>
         * Optionally, print requests can be pre-signed:
         * Signed content consists of a JSON object string containing no spacing,
         * following the format of the "call" and "params" keys in the API call, with the addition of a "timestamp" key in milliseconds
         * ex. <code>'{"call":"<callName>","params":{...},"timestamp":1450000000}'</code>
         *
         * @param {Object<Config>} config Previously created config object.
         * @param {Array<Object|string>} data Array of data being sent to the printer. String values are interpreted the same as the default <code>[raw]</code> object value.
         *  @param {string} data.data
         *  @param {string} data.type Valid values <code>[html | image | pdf | raw]</code>
         *  @param {string} [data.format] Format of data provided.<p/>
         *      For <code>[html]</code> types, valid formats include <code>[file(default) | plain]</code>.<p/>
         *      For <code>[image]</code> types, valid formats include <code>[base64 | file(default)]</code>.<p/>
         *      For <code>[pdf]</code> types, valid format include <code>[base64 | file(default)]</code>.<p/>
         *      For <code>[raw]</code> types, valid formats include <code>[base64 | file | hex | plain(default) | image | xml]</code>.
         *  @param {Object} [data.options]
         *   @param {string} [data.options.language] Required with <code>[raw]</code> type <code>[image]</code> format. Printer language.
         *   @param {number} [data.options.x] Optional with <code>[raw]</code> type <code>[image]</code> format. The X position of the image.
         *   @param {number} [data.options.y] Optional with <code>[raw]</code> type <code>[image]</code> format. The Y position of the image.
         *   @param {string|number} [data.options.dotDensity] Optional with <code>[raw]</code> type <code>[image]</code> format.
         *   @param {string} [data.options.xmlTag] Required with <code>[xml]</code> format. Tag name containing base64 formatted data.
         *   @param {number} [data.options.pageWidth] Optional with <code>[html]</code> type printing. Width of the web page to render. Defaults to paper width.
         *   @param {number} [data.options.pageHeight] Optional with <code>[html]</code> type printing. Height of the web page to render. Defaults to adjusted web page height.
         * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.
         * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.
         *
         * @returns {Promise<null|Error>}
         *
         * @see qz.config.create
         *
         * @memberof qz
         */
        print: function(config, data, signature, signingTimestamp) {
            //change relative links to absolute
            for(var i = 0; i < data.length; i++) {
                if (data[i].constructor === Object) {
                    if ((!data[i].format && data[i].type && data[i].type.toUpperCase() !== 'RAW') //unspecified format and not raw -> assume file
                        || (data[i].format && (data[i].format.toUpperCase() === 'FILE'
                        || (data[i].format.toUpperCase() === 'IMAGE' && !(data[i].data.indexOf("data:image/") === 0 && data[i].data.indexOf(";base64,") !== 0))
                        || data[i].format.toUpperCase() === 'XML'))) {
                        data[i].data = _qz.tools.absolute(data[i].data);
                    }
                }
            }

            var params = {
                printer: config.getPrinter(),
                options: config.getOptions(),
                data: data
            };
            return _qz.websocket.dataPromise('print', params, signature, signingTimestamp);
        },


        /**
         * Calls related to interaction with serial ports.
         * @namespace qz.serial
         */
        serial: {
            /**
             * @returns {Promise<Array<string>|Error>} Communication (RS232, COM, TTY) ports available on connected system.
             *
             * @memberof qz.serial
             */
            findPorts: function() {
                return _qz.websocket.dataPromise('serial.findPorts');
            },

            /**
             * List of functions called for any response from open serial ports.
             * Event data will contain <code>{string} portName</code> for all types.
             *  For RECEIVE types, <code>{string} output</code>.
             *  For ERROR types, <code>{string} exception</code>.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({string} portName, {string} output)</code> calls.
             *
             * @memberof qz.serial
             */
            setSerialCallbacks: function(calls) {
                _qz.serial.serialCallbacks = calls;
            },

            /**
             * @param {string} port Name of port to open.
             * @param {Object} bounds Boundaries of serial port output.
             *  @param {string} [bounds.begin=0x0002] Character denoting start of serial response. Not used if <code>width</code is provided.
             *  @param {string} [bounds.end=0x000D] Character denoting end of serial response. Not used if <code>width</code> is provided.
             *  @param {number} [bounds.width] Used for fixed-width response serial communication.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.serial
             */
            openPort: function(port, bounds) {
                var params = {
                    port: port,
                    bounds: bounds
                };
                return _qz.websocket.dataPromise('serial.openPort', params);
            },

            /**
             * Send commands over a serial port.
             * Any responses from the device will be sent to serial callback functions.
             *
             * @param {string} port An open port to send data over.
             * @param {string} data The data to send to the serial device.
             * @param {Object} [properties] Properties of data being sent over the serial port.
             *  @param {string} [properties.baudRate=9600]
             *  @param {string} [properties.dataBits=8]
             *  @param {string} [properties.stopBits=1]
             *  @param {string} [properties.parity='NONE'] Valid values <code>[NONE| EVEN | ODD | MARK | SPACE]</code>
             *  @param {string} [properties.flowControl='NONE'] Valid values <code>[NONE | XONXOFF_OUT | XONXOFF_IN | RTSCTS_OUT | RTSCTS_IN]</code>
             *
             * @returns {Promise<null|Error>}
             *
             * @see qz.serial.setSerialCallbacks
             *
             * @memberof qz.serial
             */
            sendData: function(port, data, properties) {
                var params = {
                    port: port,
                    data: data,
                    properties: properties
                };
                return _qz.websocket.dataPromise('serial.sendData', params);
            },

            /**
             * @param {string} port Name of port to close.
             *
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.serial
             */
            closePort: function(port) {
                return _qz.websocket.dataPromise('serial.closePort', { port: port });
            }
        },


        /**
         * Calls related to interaction with USB devices.
         * @namespace qz.usb
         */
        usb: {
            /**
             * List of available USB devices. Includes (hexadecimal) vendor ID, (hexadecimal) product ID, and hub status.
             * If supported, also returns manufacturer and product descriptions.
             *
             * @param includeHubs Whether to include USB hubs.
             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected USB devices.
             *
             * @memberof qz.usb
             */
            listDevices: function(includeHubs) {
                return _qz.websocket.dataPromise('usb.listDevices', { includeHubs: includeHubs });
            },

            /**
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) interfaces on a USB device.
             *
             * @memberof qz.usb
             */
            listInterfaces: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('usb.listInterfaces', params);
            },

            /**
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param iface Hex string of interface on the USB device to search.
             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) endpoints on a USB device's interface.
             *
             * @memberof qz.usb
             */
            listEndpoints: function(vendorId, productId, iface) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    interface: iface
                };
                return _qz.websocket.dataPromise('usb.listEndpoints', params);
            },

            /**
             * List of functions called for any response from open usb devices.
             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.
             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).
             *  For ERROR types, <code>{string} exception</code>.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.
             *
             * @memberof qz.usb
             */
            setUsbCallbacks: function(calls) {
                _qz.usb.usbCallbacks = calls;
            },

            /**
             * Claim a USB device's interface to enable sending/reading data across an endpoint.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param iface Hex string of interface on the USB device to claim.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            claimDevice: function(vendorId, productId, iface) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    interface: iface
                };
                return _qz.websocket.dataPromise('usb.claimDevice', params);
            },

            /**
             * Check the current claim state of a USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @returns {Promise<boolean|Error>}
             *
             * @since 2.0.2
             * @memberOf qz.usb
             */
            isClaimed: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('usb.isClaimed', params);
            },

            /**
             * Send data to a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @param data Bytes to send over specified endpoint.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            sendData: function(vendorId, productId, endpoint, data) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint,
                    data: data
                };
                return _qz.websocket.dataPromise('usb.sendData', params);
            },

            /**
             * Read data from a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @param responseSize Size of the byte array to receive a response in.
             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the USB device.
             *
             * @memberof qz.usb
             */
            readData: function(vendorId, productId, endpoint, responseSize) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint,
                    responseSize: responseSize
                };
                return _qz.websocket.dataPromise('usb.readData', params);
            },

            /**
             * Provides a continuous stream of read data from a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @param responseSize Size of the byte array to receive a response in.
             * @param [interval=100] Frequency to send read data back, in milliseconds.
             * @returns {Promise<null|Error>}
             *
             * @see qz.usb.setUsbCallbacks
             *
             * @memberof qz.usb
             */
            openStream: function(vendorId, productId, endpoint, responseSize, interval) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint,
                    responseSize: responseSize,
                    interval: interval
                };
                return _qz.websocket.dataPromise('usb.openStream', params);
            },

            /**
             * Stops the stream of read data from a claimed USB device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param endpoint Hex string of endpoint on the claimed interface for the USB device.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            closeStream: function(vendorId, productId, endpoint) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: endpoint
                };
                return _qz.websocket.dataPromise('usb.closeStream', params);
            },

            /**
             * Release a claimed USB device to free resources after sending/reading data.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @returns {Promise<null|Error>}
             *
             * @memberof qz.usb
             */
            releaseDevice: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('usb.releaseDevice', params);
            }
        },


        /**
         * Calls related to interaction with HID USB devices<br/>
         * Many of these calls can be accomplished from the <code>qz.usb</code> namespace,
         * but HID allows for simpler interaction
         * @namespace qz.hid
         * @since 2.0.1
         */
        hid: {
            /**
             * List of available HID devices. Includes (hexadecimal) vendor ID and (hexadecimal) product ID.
             * If available, also returns manufacturer and product descriptions.
             *
             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected HID devices.
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            listDevices: function() {
                return _qz.websocket.dataPromise('hid.listDevices');
            },

            /**
             * Start listening for HID device actions, such as attach / detach events.
             * Reported under the ACTION type in the streamEvent on callbacks.
             *
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @see qz.hid.setHidCallbacks
             *
             * @memberof qz.hid
             */
            startListening: function() {
                return _qz.websocket.dataPromise('hid.startListening');
            },

            /**
             * Stop listening for HID device actions.
             *
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @see qz.hid.setHidCallbacks
             *
             * @memberof qz.hid
             */
            stopListening: function() {
                return _qz.websocket.dataPromise('hid.stopListening');
            },

            /**
             * List of functions called for any response from open usb devices.
             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.
             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).
             *  For ERROR types, <code>{string} exception</code>.
             *  For ACTION types, <code>{string} actionType</code>.
             *
             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            setHidCallbacks: function(calls) {
                _qz.hid.hidCallbacks = calls;
            },

            /**
             * Claim a HID device to enable sending/reading data across.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            claimDevice: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.claimDevice', params);
            },

            /**
             * Check the current claim state of a HID device.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<boolean|Error>}
             *
             * @since 2.0.2
             * @memberOf qz.hid
             */
            isClaimed: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.isClaimed', params);
            },

            /**
             * Send data to a claimed HID device.
             *
             * @param vendorId Hex string of USB device's vendor ID.
             * @param productId Hex string of USB device's product ID.
             * @param data Bytes to send over specified endpoint.
             * @param [reportId=0x00] First byte of the data packet signifying the HID report ID.
             *                        Must be 0x00 for devices only supporting a single report.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            sendData: function(vendorId, productId, data, reportId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    endpoint: reportId,
                    data: data
                };
                return _qz.websocket.dataPromise('hid.sendData', params);
            },

            /**
             * Read data from a claimed HID device.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @param responseSize Size of the byte array to receive a response in.
             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the HID device.
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            readData: function(vendorId, productId, responseSize) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    responseSize: responseSize
                };
                return _qz.websocket.dataPromise('hid.readData', params);
            },

            /**
             * Provides a continuous stream of read data from a claimed HID device.
             *
             * @param vendorId Hex string of UHIDSB device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @param responseSize Size of the byte array to receive a response in.
             * @param [interval=100] Frequency to send read data back, in milliseconds.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @see qz.hid.setHidCallbacks
             *
             * @memberof qz.hid
             */
            openStream: function(vendorId, productId, responseSize, interval) {
                var params = {
                    vendorId: vendorId,
                    productId: productId,
                    responseSize: responseSize,
                    interval: interval
                };
                return _qz.websocket.dataPromise('hid.openStream', params);
            },

            /**
             * Stops the stream of read data from a claimed HID device.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            closeStream: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.closeStream', params);
            },

            /**
             * Release a claimed HID device to free resources after sending/reading data.
             *
             * @param vendorId Hex string of HID device's vendor ID.
             * @param productId Hex string of HID device's product ID.
             * @returns {Promise<null|Error>}
             * @since 2.0.1
             *
             * @memberof qz.hid
             */
            releaseDevice: function(vendorId, productId) {
                var params = {
                    vendorId: vendorId,
                    productId: productId
                };
                return _qz.websocket.dataPromise('hid.releaseDevice', params);
            }
        },


        /**
         * Calls related to signing connection requests.
         * @namespace qz.security
         */
        security: {
            /**
             * Set promise resolver for calls to acquire the site's certificate.
             *
             * @param {Function} promiseCall <code>Function({function} resolve)</code> called as promise for getting the public certificate.
             *        Should call <code>resolve</code> parameter with the result.
             *
             * @memberof qz.security
             */
            setCertificatePromise: function(promiseCall) {
                _qz.security.certPromise = promiseCall;
            },

            /**
             * Set promise creator for calls to sign API calls.
             *
             * @param {Function} promiseGen <code>Function({function} toSign)</code> Should return a function, <code>Function({function} resolve)</code>, that
             *                              will sign the content and resolve the created promise.
             * @memberof qz.security
             */
            setSignaturePromise: function(promiseGen) {
                _qz.security.signaturePromise = promiseGen;
            }
        },

        /**
         * Calls related to compatibility adjustments
         * @namespace qz.api
         */
        api: {
            /**
             * Show or hide QZ api debugging statements in the browser console.
             *
             * @param {boolean} show Whether the debugging logs for QZ should be shown. Hidden by default.
             *
             * @memberof qz.api
             */
            showDebug: function(show) {
                _qz.DEBUG = show;
            },

            /**
             * Get version of connected QZ Tray application.
             *
             * @returns {Promise<string|Error>} Version number of QZ Tray.
             *
             * @memberof qz.api
             */
            getVersion: function() {
                return _qz.websocket.dataPromise('getVersion');
            },

            /**
             * Change the promise library used by QZ API.
             * Should be called before any initialization to avoid possible errors.
             *
             * @param {Function} promiser <code>Function({function} resolver)</code> called to create new promises.
             *
             * @memberof qz.api
             */
            setPromiseType: function(promiser) {
                _qz.tools.promise = promiser;
            },

            /**
             * Change the SHA-256 hashing library used by QZ API.
             * Should be called before any initialization to avoid possible errors.
             *
             * @param {Function} hasher <code>Function({function} message)</code> called to create hash of passed string.
             *
             * @memberof qz.api
             */
            setSha256Type: function(hasher) {
                _qz.tools.hash = hasher;
            },

            /**
             * Change the WebSocket handler.
             * Should be called before any initialization to avoid possible errors.
             *
             * @param {Function} ws <code>Function({function} WebSocket)</code> called to override the internal WebSocket handler.
             *
             * @memberof qz.api
             */
            setWebSocketType: function(ws) {
                _qz.tools.ws = ws;
            }
        },

        /**
         * Version of this JavaScript library
         *
         * @constant {string}
         *
         * @memberof qz
         */
        version: _qz.VERSION
    };

})();


(function() {
    if (typeof define === 'function' && define.amd) {
        define(qz);
    } else if (typeof exports === 'object') {
        module.exports = qz;
        try {
            var crypto = require('crypto');
            qz.api.setSha256Type(function(data) {
                return crypto.createHash('sha256').update(data).digest('hex');
            });
        }
        catch(ignore) {}
    } else {
        window.qz = qz;
    }
})();

/*!
 * @overview  RSVP - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE
 * @version   3.1.0
 */

//@formatter:off
(function(){"use strict";function lib$rsvp$utils$$objectOrFunction(x){return typeof x==="function"||typeof x==="object"&&x!==null}function lib$rsvp$utils$$isFunction(x){return typeof x==="function"}function lib$rsvp$utils$$isMaybeThenable(x){return typeof x==="object"&&x!==null}var lib$rsvp$utils$$_isArray;if(!Array.isArray){lib$rsvp$utils$$_isArray=function(x){return Object.prototype.toString.call(x)==="[object Array]"}}else{lib$rsvp$utils$$_isArray=Array.isArray}var lib$rsvp$utils$$isArray=lib$rsvp$utils$$_isArray;var lib$rsvp$utils$$now=Date.now||function(){return(new Date).getTime()};function lib$rsvp$utils$$F(){}var lib$rsvp$utils$$o_create=Object.create||function(o){if(arguments.length>1){throw new Error("Second argument not supported")}if(typeof o!=="object"){throw new TypeError("Argument must be an object")}lib$rsvp$utils$$F.prototype=o;return new lib$rsvp$utils$$F};function lib$rsvp$events$$indexOf(callbacks,callback){for(var i=0,l=callbacks.length;i<l;i++){if(callbacks[i]===callback){return i}}return-1}function lib$rsvp$events$$callbacksFor(object){var callbacks=object._promiseCallbacks;if(!callbacks){callbacks=object._promiseCallbacks={}}return callbacks}var lib$rsvp$events$$default={mixin:function(object){object["on"]=this["on"];object["off"]=this["off"];object["trigger"]=this["trigger"];object._promiseCallbacks=undefined;return object},on:function(eventName,callback){if(typeof callback!=="function"){throw new TypeError("Callback must be a function")}var allCallbacks=lib$rsvp$events$$callbacksFor(this),callbacks;callbacks=allCallbacks[eventName];if(!callbacks){callbacks=allCallbacks[eventName]=[]}if(lib$rsvp$events$$indexOf(callbacks,callback)===-1){callbacks.push(callback)}},off:function(eventName,callback){var allCallbacks=lib$rsvp$events$$callbacksFor(this),callbacks,index;if(!callback){allCallbacks[eventName]=[];return}callbacks=allCallbacks[eventName];index=lib$rsvp$events$$indexOf(callbacks,callback);if(index!==-1){callbacks.splice(index,1)}},trigger:function(eventName,options,label){var allCallbacks=lib$rsvp$events$$callbacksFor(this),callbacks,callback;if(callbacks=allCallbacks[eventName]){for(var i=0;i<callbacks.length;i++){callback=callbacks[i];callback(options,label)}}}};var lib$rsvp$config$$config={instrument:false};lib$rsvp$events$$default["mixin"](lib$rsvp$config$$config);function lib$rsvp$config$$configure(name,value){if(name==="onerror"){lib$rsvp$config$$config["on"]("error",value);return}if(arguments.length===2){lib$rsvp$config$$config[name]=value}else{return lib$rsvp$config$$config[name]}}var lib$rsvp$instrument$$queue=[];function lib$rsvp$instrument$$scheduleFlush(){setTimeout(function(){var entry;for(var i=0;i<lib$rsvp$instrument$$queue.length;i++){entry=lib$rsvp$instrument$$queue[i];var payload=entry.payload;payload.guid=payload.key+payload.id;payload.childGuid=payload.key+payload.childId;if(payload.error){payload.stack=payload.error.stack}lib$rsvp$config$$config["trigger"](entry.name,entry.payload)}lib$rsvp$instrument$$queue.length=0},50)}function lib$rsvp$instrument$$instrument(eventName,promise,child){if(1===lib$rsvp$instrument$$queue.push({name:eventName,payload:{key:promise._guidKey,id:promise._id,eventName:eventName,detail:promise._result,childId:child&&child._id,label:promise._label,timeStamp:lib$rsvp$utils$$now(),error:lib$rsvp$config$$config["instrument-with-stack"]?new Error(promise._label):null}})){lib$rsvp$instrument$$scheduleFlush()}}var lib$rsvp$instrument$$default=lib$rsvp$instrument$$instrument;function lib$rsvp$$internal$$withOwnPromise(){return new TypeError("A promises callback cannot return that same promise.")}function lib$rsvp$$internal$$noop(){}var lib$rsvp$$internal$$PENDING=void 0;var lib$rsvp$$internal$$FULFILLED=1;var lib$rsvp$$internal$$REJECTED=2;var lib$rsvp$$internal$$GET_THEN_ERROR=new lib$rsvp$$internal$$ErrorObject;function lib$rsvp$$internal$$getThen(promise){try{return promise.then}catch(error){lib$rsvp$$internal$$GET_THEN_ERROR.error=error;return lib$rsvp$$internal$$GET_THEN_ERROR}}function lib$rsvp$$internal$$tryThen(then,value,fulfillmentHandler,rejectionHandler){try{then.call(value,fulfillmentHandler,rejectionHandler)}catch(e){return e}}function lib$rsvp$$internal$$handleForeignThenable(promise,thenable,then){lib$rsvp$config$$config.async(function(promise){var sealed=false;var error=lib$rsvp$$internal$$tryThen(then,thenable,function(value){if(sealed){return}sealed=true;if(thenable!==value){lib$rsvp$$internal$$resolve(promise,value)}else{lib$rsvp$$internal$$fulfill(promise,value)}},function(reason){if(sealed){return}sealed=true;lib$rsvp$$internal$$reject(promise,reason)},"Settle: "+(promise._label||" unknown promise"));if(!sealed&&error){sealed=true;lib$rsvp$$internal$$reject(promise,error)}},promise)}function lib$rsvp$$internal$$handleOwnThenable(promise,thenable){if(thenable._state===lib$rsvp$$internal$$FULFILLED){lib$rsvp$$internal$$fulfill(promise,thenable._result)}else if(thenable._state===lib$rsvp$$internal$$REJECTED){thenable._onError=null;lib$rsvp$$internal$$reject(promise,thenable._result)}else{lib$rsvp$$internal$$subscribe(thenable,undefined,function(value){if(thenable!==value){lib$rsvp$$internal$$resolve(promise,value)}else{lib$rsvp$$internal$$fulfill(promise,value)}},function(reason){lib$rsvp$$internal$$reject(promise,reason)})}}function lib$rsvp$$internal$$handleMaybeThenable(promise,maybeThenable){if(maybeThenable.constructor===promise.constructor){lib$rsvp$$internal$$handleOwnThenable(promise,maybeThenable)}else{var then=lib$rsvp$$internal$$getThen(maybeThenable);if(then===lib$rsvp$$internal$$GET_THEN_ERROR){lib$rsvp$$internal$$reject(promise,lib$rsvp$$internal$$GET_THEN_ERROR.error)}else if(then===undefined){lib$rsvp$$internal$$fulfill(promise,maybeThenable)}else if(lib$rsvp$utils$$isFunction(then)){lib$rsvp$$internal$$handleForeignThenable(promise,maybeThenable,then)}else{lib$rsvp$$internal$$fulfill(promise,maybeThenable)}}}function lib$rsvp$$internal$$resolve(promise,value){if(promise===value){lib$rsvp$$internal$$fulfill(promise,value)}else if(lib$rsvp$utils$$objectOrFunction(value)){lib$rsvp$$internal$$handleMaybeThenable(promise,value)}else{lib$rsvp$$internal$$fulfill(promise,value)}}function lib$rsvp$$internal$$publishRejection(promise){if(promise._onError){promise._onError(promise._result)}lib$rsvp$$internal$$publish(promise)}function lib$rsvp$$internal$$fulfill(promise,value){if(promise._state!==lib$rsvp$$internal$$PENDING){return}promise._result=value;promise._state=lib$rsvp$$internal$$FULFILLED;if(promise._subscribers.length===0){if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("fulfilled",promise)}}else{lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish,promise)}}function lib$rsvp$$internal$$reject(promise,reason){if(promise._state!==lib$rsvp$$internal$$PENDING){return}promise._state=lib$rsvp$$internal$$REJECTED;promise._result=reason;lib$rsvp$config$$config.async(lib$rsvp$$internal$$publishRejection,promise)}function lib$rsvp$$internal$$subscribe(parent,child,onFulfillment,onRejection){var subscribers=parent._subscribers;var length=subscribers.length;parent._onError=null;subscribers[length]=child;subscribers[length+lib$rsvp$$internal$$FULFILLED]=onFulfillment;subscribers[length+lib$rsvp$$internal$$REJECTED]=onRejection;if(length===0&&parent._state){lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish,parent)}}function lib$rsvp$$internal$$publish(promise){var subscribers=promise._subscribers;var settled=promise._state;if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default(settled===lib$rsvp$$internal$$FULFILLED?"fulfilled":"rejected",promise)}if(subscribers.length===0){return}var child,callback,detail=promise._result;for(var i=0;i<subscribers.length;i+=3){child=subscribers[i];callback=subscribers[i+settled];if(child){lib$rsvp$$internal$$invokeCallback(settled,child,callback,detail)}else{callback(detail)}}promise._subscribers.length=0}function lib$rsvp$$internal$$ErrorObject(){this.error=null}var lib$rsvp$$internal$$TRY_CATCH_ERROR=new lib$rsvp$$internal$$ErrorObject;function lib$rsvp$$internal$$tryCatch(callback,detail){try{return callback(detail)}catch(e){lib$rsvp$$internal$$TRY_CATCH_ERROR.error=e;return lib$rsvp$$internal$$TRY_CATCH_ERROR}}function lib$rsvp$$internal$$invokeCallback(settled,promise,callback,detail){var hasCallback=lib$rsvp$utils$$isFunction(callback),value,error,succeeded,failed;if(hasCallback){value=lib$rsvp$$internal$$tryCatch(callback,detail);if(value===lib$rsvp$$internal$$TRY_CATCH_ERROR){failed=true;error=value.error;value=null}else{succeeded=true}if(promise===value){lib$rsvp$$internal$$reject(promise,lib$rsvp$$internal$$withOwnPromise());return}}else{value=detail;succeeded=true}if(promise._state!==lib$rsvp$$internal$$PENDING){}else if(hasCallback&&succeeded){lib$rsvp$$internal$$resolve(promise,value)}else if(failed){lib$rsvp$$internal$$reject(promise,error)}else if(settled===lib$rsvp$$internal$$FULFILLED){lib$rsvp$$internal$$fulfill(promise,value)}else if(settled===lib$rsvp$$internal$$REJECTED){lib$rsvp$$internal$$reject(promise,value)}}function lib$rsvp$$internal$$initializePromise(promise,resolver){var resolved=false;try{resolver(function resolvePromise(value){if(resolved){return}resolved=true;lib$rsvp$$internal$$resolve(promise,value)},function rejectPromise(reason){if(resolved){return}resolved=true;lib$rsvp$$internal$$reject(promise,reason)})}catch(e){lib$rsvp$$internal$$reject(promise,e)}}function lib$rsvp$enumerator$$makeSettledResult(state,position,value){if(state===lib$rsvp$$internal$$FULFILLED){return{state:"fulfilled",value:value}}else{return{state:"rejected",reason:value}}}function lib$rsvp$enumerator$$Enumerator(Constructor,input,abortOnReject,label){var enumerator=this;enumerator._instanceConstructor=Constructor;enumerator.promise=new Constructor(lib$rsvp$$internal$$noop,label);enumerator._abortOnReject=abortOnReject;if(enumerator._validateInput(input)){enumerator._input=input;enumerator.length=input.length;enumerator._remaining=input.length;enumerator._init();if(enumerator.length===0){lib$rsvp$$internal$$fulfill(enumerator.promise,enumerator._result)}else{enumerator.length=enumerator.length||0;enumerator._enumerate();if(enumerator._remaining===0){lib$rsvp$$internal$$fulfill(enumerator.promise,enumerator._result)}}}else{lib$rsvp$$internal$$reject(enumerator.promise,enumerator._validationError())}}var lib$rsvp$enumerator$$default=lib$rsvp$enumerator$$Enumerator;lib$rsvp$enumerator$$Enumerator.prototype._validateInput=function(input){return lib$rsvp$utils$$isArray(input)};lib$rsvp$enumerator$$Enumerator.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")};lib$rsvp$enumerator$$Enumerator.prototype._init=function(){this._result=new Array(this.length)};lib$rsvp$enumerator$$Enumerator.prototype._enumerate=function(){var enumerator=this;var length=enumerator.length;var promise=enumerator.promise;var input=enumerator._input;for(var i=0;promise._state===lib$rsvp$$internal$$PENDING&&i<length;i++){enumerator._eachEntry(input[i],i)}};lib$rsvp$enumerator$$Enumerator.prototype._eachEntry=function(entry,i){var enumerator=this;var c=enumerator._instanceConstructor;if(lib$rsvp$utils$$isMaybeThenable(entry)){if(entry.constructor===c&&entry._state!==lib$rsvp$$internal$$PENDING){entry._onError=null;enumerator._settledAt(entry._state,i,entry._result)}else{enumerator._willSettleAt(c.resolve(entry),i)}}else{enumerator._remaining--;enumerator._result[i]=enumerator._makeResult(lib$rsvp$$internal$$FULFILLED,i,entry)}};lib$rsvp$enumerator$$Enumerator.prototype._settledAt=function(state,i,value){var enumerator=this;var promise=enumerator.promise;if(promise._state===lib$rsvp$$internal$$PENDING){enumerator._remaining--;if(enumerator._abortOnReject&&state===lib$rsvp$$internal$$REJECTED){lib$rsvp$$internal$$reject(promise,value)}else{enumerator._result[i]=enumerator._makeResult(state,i,value)}}if(enumerator._remaining===0){lib$rsvp$$internal$$fulfill(promise,enumerator._result)}};lib$rsvp$enumerator$$Enumerator.prototype._makeResult=function(state,i,value){return value};lib$rsvp$enumerator$$Enumerator.prototype._willSettleAt=function(promise,i){var enumerator=this;lib$rsvp$$internal$$subscribe(promise,undefined,function(value){enumerator._settledAt(lib$rsvp$$internal$$FULFILLED,i,value)},function(reason){enumerator._settledAt(lib$rsvp$$internal$$REJECTED,i,reason)})};function lib$rsvp$promise$all$$all(entries,label){return new lib$rsvp$enumerator$$default(this,entries,true,label).promise}var lib$rsvp$promise$all$$default=lib$rsvp$promise$all$$all;function lib$rsvp$promise$race$$race(entries,label){var Constructor=this;var promise=new Constructor(lib$rsvp$$internal$$noop,label);if(!lib$rsvp$utils$$isArray(entries)){lib$rsvp$$internal$$reject(promise,new TypeError("You must pass an array to race."));return promise}var length=entries.length;function onFulfillment(value){lib$rsvp$$internal$$resolve(promise,value)}function onRejection(reason){lib$rsvp$$internal$$reject(promise,reason)}for(var i=0;promise._state===lib$rsvp$$internal$$PENDING&&i<length;i++){lib$rsvp$$internal$$subscribe(Constructor.resolve(entries[i]),undefined,onFulfillment,onRejection)}return promise}var lib$rsvp$promise$race$$default=lib$rsvp$promise$race$$race;function lib$rsvp$promise$resolve$$resolve(object,label){var Constructor=this;if(object&&typeof object==="object"&&object.constructor===Constructor){return object}var promise=new Constructor(lib$rsvp$$internal$$noop,label);lib$rsvp$$internal$$resolve(promise,object);return promise}var lib$rsvp$promise$resolve$$default=lib$rsvp$promise$resolve$$resolve;function lib$rsvp$promise$reject$$reject(reason,label){var Constructor=this;var promise=new Constructor(lib$rsvp$$internal$$noop,label);lib$rsvp$$internal$$reject(promise,reason);return promise}var lib$rsvp$promise$reject$$default=lib$rsvp$promise$reject$$reject;var lib$rsvp$promise$$guidKey="rsvp_"+lib$rsvp$utils$$now()+"-";var lib$rsvp$promise$$counter=0;function lib$rsvp$promise$$needsResolver(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function lib$rsvp$promise$$needsNew(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function lib$rsvp$promise$$Promise(resolver,label){var promise=this;promise._id=lib$rsvp$promise$$counter++;promise._label=label;promise._state=undefined;promise._result=undefined;promise._subscribers=[];if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("created",promise)}if(lib$rsvp$$internal$$noop!==resolver){if(!lib$rsvp$utils$$isFunction(resolver)){lib$rsvp$promise$$needsResolver()}if(!(promise instanceof lib$rsvp$promise$$Promise)){lib$rsvp$promise$$needsNew()}lib$rsvp$$internal$$initializePromise(promise,resolver)}}var lib$rsvp$promise$$default=lib$rsvp$promise$$Promise;lib$rsvp$promise$$Promise.cast=lib$rsvp$promise$resolve$$default;lib$rsvp$promise$$Promise.all=lib$rsvp$promise$all$$default;lib$rsvp$promise$$Promise.race=lib$rsvp$promise$race$$default;lib$rsvp$promise$$Promise.resolve=lib$rsvp$promise$resolve$$default;lib$rsvp$promise$$Promise.reject=lib$rsvp$promise$reject$$default;lib$rsvp$promise$$Promise.prototype={constructor:lib$rsvp$promise$$Promise,_guidKey:lib$rsvp$promise$$guidKey,_onError:function(reason){var promise=this;lib$rsvp$config$$config.after(function(){if(promise._onError){lib$rsvp$config$$config["trigger"]("error",reason,promise._label)}})},then:function(onFulfillment,onRejection,label){var parent=this;var state=parent._state;if(state===lib$rsvp$$internal$$FULFILLED&&!onFulfillment||state===lib$rsvp$$internal$$REJECTED&&!onRejection){if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("chained",parent,parent)}return parent}parent._onError=null;var child=new parent.constructor(lib$rsvp$$internal$$noop,label);var result=parent._result;if(lib$rsvp$config$$config.instrument){lib$rsvp$instrument$$default("chained",parent,child)}if(state){var callback=arguments[state-1];lib$rsvp$config$$config.async(function(){lib$rsvp$$internal$$invokeCallback(state,child,callback,result)})}else{lib$rsvp$$internal$$subscribe(parent,child,onFulfillment,onRejection)}return child},"catch":function(onRejection,label){return this.then(undefined,onRejection,label)},"finally":function(callback,label){var promise=this;var constructor=promise.constructor;return promise.then(function(value){return constructor.resolve(callback()).then(function(){return value})},function(reason){return constructor.resolve(callback()).then(function(){throw reason})},label)}};function lib$rsvp$all$settled$$AllSettled(Constructor,entries,label){this._superConstructor(Constructor,entries,false,label)}lib$rsvp$all$settled$$AllSettled.prototype=lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);lib$rsvp$all$settled$$AllSettled.prototype._superConstructor=lib$rsvp$enumerator$$default;lib$rsvp$all$settled$$AllSettled.prototype._makeResult=lib$rsvp$enumerator$$makeSettledResult;lib$rsvp$all$settled$$AllSettled.prototype._validationError=function(){return new Error("allSettled must be called with an array")};function lib$rsvp$all$settled$$allSettled(entries,label){return new lib$rsvp$all$settled$$AllSettled(lib$rsvp$promise$$default,entries,label).promise}var lib$rsvp$all$settled$$default=lib$rsvp$all$settled$$allSettled;function lib$rsvp$all$$all(array,label){return lib$rsvp$promise$$default.all(array,label)}var lib$rsvp$all$$default=lib$rsvp$all$$all;var lib$rsvp$asap$$len=0;var lib$rsvp$asap$$toString={}.toString;var lib$rsvp$asap$$vertxNext;function lib$rsvp$asap$$asap(callback,arg){lib$rsvp$asap$$queue[lib$rsvp$asap$$len]=callback;lib$rsvp$asap$$queue[lib$rsvp$asap$$len+1]=arg;lib$rsvp$asap$$len+=2;if(lib$rsvp$asap$$len===2){lib$rsvp$asap$$scheduleFlush()}}var lib$rsvp$asap$$default=lib$rsvp$asap$$asap;var lib$rsvp$asap$$browserWindow=typeof window!=="undefined"?window:undefined;var lib$rsvp$asap$$browserGlobal=lib$rsvp$asap$$browserWindow||{};var lib$rsvp$asap$$BrowserMutationObserver=lib$rsvp$asap$$browserGlobal.MutationObserver||lib$rsvp$asap$$browserGlobal.WebKitMutationObserver;var lib$rsvp$asap$$isNode=typeof self==="undefined"&&typeof process!=="undefined"&&{}.toString.call(process)==="[object process]";var lib$rsvp$asap$$isWorker=typeof Uint8ClampedArray!=="undefined"&&typeof importScripts!=="undefined"&&typeof MessageChannel!=="undefined";function lib$rsvp$asap$$useNextTick(){var nextTick=process.nextTick;var version=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);if(Array.isArray(version)&&version[1]==="0"&&version[2]==="10"){nextTick=setImmediate}return function(){nextTick(lib$rsvp$asap$$flush)}}function lib$rsvp$asap$$useVertxTimer(){return function(){lib$rsvp$asap$$vertxNext(lib$rsvp$asap$$flush)}}function lib$rsvp$asap$$useMutationObserver(){var iterations=0;var observer=new lib$rsvp$asap$$BrowserMutationObserver(lib$rsvp$asap$$flush);var node=document.createTextNode("");observer.observe(node,{characterData:true});return function(){node.data=iterations=++iterations%2}}function lib$rsvp$asap$$useMessageChannel(){var channel=new MessageChannel;channel.port1.onmessage=lib$rsvp$asap$$flush;return function(){channel.port2.postMessage(0)}}function lib$rsvp$asap$$useSetTimeout(){return function(){setTimeout(lib$rsvp$asap$$flush,1)}}var lib$rsvp$asap$$queue=new Array(1e3);function lib$rsvp$asap$$flush(){for(var i=0;i<lib$rsvp$asap$$len;i+=2){var callback=lib$rsvp$asap$$queue[i];var arg=lib$rsvp$asap$$queue[i+1];callback(arg);lib$rsvp$asap$$queue[i]=undefined;lib$rsvp$asap$$queue[i+1]=undefined}lib$rsvp$asap$$len=0}function lib$rsvp$asap$$attemptVertex(){try{var r=require;var vertx=r("vertx");lib$rsvp$asap$$vertxNext=vertx.runOnLoop||vertx.runOnContext;return lib$rsvp$asap$$useVertxTimer()}catch(e){return lib$rsvp$asap$$useSetTimeout()}}var lib$rsvp$asap$$scheduleFlush;if(lib$rsvp$asap$$isNode){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useNextTick()}else if(lib$rsvp$asap$$BrowserMutationObserver){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useMutationObserver()}else if(lib$rsvp$asap$$isWorker){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useMessageChannel()}else if(lib$rsvp$asap$$browserWindow===undefined&&typeof require==="function"){lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$attemptVertex()}else{lib$rsvp$asap$$scheduleFlush=lib$rsvp$asap$$useSetTimeout()}function lib$rsvp$defer$$defer(label){var deferred={};deferred["promise"]=new lib$rsvp$promise$$default(function(resolve,reject){deferred["resolve"]=resolve;deferred["reject"]=reject},label);return deferred}var lib$rsvp$defer$$default=lib$rsvp$defer$$defer;function lib$rsvp$filter$$filter(promises,filterFn,label){return lib$rsvp$promise$$default.all(promises,label).then(function(values){if(!lib$rsvp$utils$$isFunction(filterFn)){throw new TypeError("You must pass a function as filter's second argument.")}var length=values.length;var filtered=new Array(length);for(var i=0;i<length;i++){filtered[i]=filterFn(values[i])}return lib$rsvp$promise$$default.all(filtered,label).then(function(filtered){var results=new Array(length);var newLength=0;for(var i=0;i<length;i++){if(filtered[i]){results[newLength]=values[i];newLength++}}results.length=newLength;return results})})}var lib$rsvp$filter$$default=lib$rsvp$filter$$filter;function lib$rsvp$promise$hash$$PromiseHash(Constructor,object,label){this._superConstructor(Constructor,object,true,label)}var lib$rsvp$promise$hash$$default=lib$rsvp$promise$hash$$PromiseHash;lib$rsvp$promise$hash$$PromiseHash.prototype=lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);lib$rsvp$promise$hash$$PromiseHash.prototype._superConstructor=lib$rsvp$enumerator$$default;lib$rsvp$promise$hash$$PromiseHash.prototype._init=function(){this._result={}};lib$rsvp$promise$hash$$PromiseHash.prototype._validateInput=function(input){return input&&typeof input==="object"};lib$rsvp$promise$hash$$PromiseHash.prototype._validationError=function(){return new Error("Promise.hash must be called with an object")};lib$rsvp$promise$hash$$PromiseHash.prototype._enumerate=function(){var enumerator=this;var promise=enumerator.promise;var input=enumerator._input;var results=[];for(var key in input){if(promise._state===lib$rsvp$$internal$$PENDING&&Object.prototype.hasOwnProperty.call(input,key)){results.push({position:key,entry:input[key]})}}var length=results.length;enumerator._remaining=length;var result;for(var i=0;promise._state===lib$rsvp$$internal$$PENDING&&i<length;i++){result=results[i];enumerator._eachEntry(result.entry,result.position)}};function lib$rsvp$hash$settled$$HashSettled(Constructor,object,label){this._superConstructor(Constructor,object,false,label)}lib$rsvp$hash$settled$$HashSettled.prototype=lib$rsvp$utils$$o_create(lib$rsvp$promise$hash$$default.prototype);lib$rsvp$hash$settled$$HashSettled.prototype._superConstructor=lib$rsvp$enumerator$$default;lib$rsvp$hash$settled$$HashSettled.prototype._makeResult=lib$rsvp$enumerator$$makeSettledResult;lib$rsvp$hash$settled$$HashSettled.prototype._validationError=function(){return new Error("hashSettled must be called with an object")};function lib$rsvp$hash$settled$$hashSettled(object,label){return new lib$rsvp$hash$settled$$HashSettled(lib$rsvp$promise$$default,object,label).promise}var lib$rsvp$hash$settled$$default=lib$rsvp$hash$settled$$hashSettled;function lib$rsvp$hash$$hash(object,label){return new lib$rsvp$promise$hash$$default(lib$rsvp$promise$$default,object,label).promise}var lib$rsvp$hash$$default=lib$rsvp$hash$$hash;function lib$rsvp$map$$map(promises,mapFn,label){return lib$rsvp$promise$$default.all(promises,label).then(function(values){if(!lib$rsvp$utils$$isFunction(mapFn)){throw new TypeError("You must pass a function as map's second argument.")}var length=values.length;var results=new Array(length);for(var i=0;i<length;i++){results[i]=mapFn(values[i])}return lib$rsvp$promise$$default.all(results,label)})}var lib$rsvp$map$$default=lib$rsvp$map$$map;function lib$rsvp$node$$Result(){this.value=undefined}var lib$rsvp$node$$ERROR=new lib$rsvp$node$$Result;var lib$rsvp$node$$GET_THEN_ERROR=new lib$rsvp$node$$Result;function lib$rsvp$node$$getThen(obj){try{return obj.then}catch(error){lib$rsvp$node$$ERROR.value=error;return lib$rsvp$node$$ERROR}}function lib$rsvp$node$$tryApply(f,s,a){try{f.apply(s,a)}catch(error){lib$rsvp$node$$ERROR.value=error;return lib$rsvp$node$$ERROR}}function lib$rsvp$node$$makeObject(_,argumentNames){var obj={};var name;var i;var length=_.length;var args=new Array(length);for(var x=0;x<length;x++){args[x]=_[x]}for(i=0;i<argumentNames.length;i++){name=argumentNames[i];obj[name]=args[i+1]}return obj}function lib$rsvp$node$$arrayResult(_){var length=_.length;var args=new Array(length-1);for(var i=1;i<length;i++){args[i-1]=_[i]}return args}function lib$rsvp$node$$wrapThenable(then,promise){return{then:function(onFulFillment,onRejection){return then.call(promise,onFulFillment,onRejection)}}}function lib$rsvp$node$$denodeify(nodeFunc,options){var fn=function(){var self=this;var l=arguments.length;var args=new Array(l+1);var arg;var promiseInput=false;for(var i=0;i<l;++i){arg=arguments[i];if(!promiseInput){promiseInput=lib$rsvp$node$$needsPromiseInput(arg);if(promiseInput===lib$rsvp$node$$GET_THEN_ERROR){var p=new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);lib$rsvp$$internal$$reject(p,lib$rsvp$node$$GET_THEN_ERROR.value);return p}else if(promiseInput&&promiseInput!==true){arg=lib$rsvp$node$$wrapThenable(promiseInput,arg)}}args[i]=arg}var promise=new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);args[l]=function(err,val){if(err)lib$rsvp$$internal$$reject(promise,err);else if(options===undefined)lib$rsvp$$internal$$resolve(promise,val);else if(options===true)lib$rsvp$$internal$$resolve(promise,lib$rsvp$node$$arrayResult(arguments));else if(lib$rsvp$utils$$isArray(options))lib$rsvp$$internal$$resolve(promise,lib$rsvp$node$$makeObject(arguments,options));else lib$rsvp$$internal$$resolve(promise,val)};if(promiseInput){return lib$rsvp$node$$handlePromiseInput(promise,args,nodeFunc,self)}else{return lib$rsvp$node$$handleValueInput(promise,args,nodeFunc,self)}};fn.__proto__=nodeFunc;return fn}var lib$rsvp$node$$default=lib$rsvp$node$$denodeify;function lib$rsvp$node$$handleValueInput(promise,args,nodeFunc,self){var result=lib$rsvp$node$$tryApply(nodeFunc,self,args);if(result===lib$rsvp$node$$ERROR){lib$rsvp$$internal$$reject(promise,result.value)}return promise}function lib$rsvp$node$$handlePromiseInput(promise,args,nodeFunc,self){return lib$rsvp$promise$$default.all(args).then(function(args){var result=lib$rsvp$node$$tryApply(nodeFunc,self,args);if(result===lib$rsvp$node$$ERROR){lib$rsvp$$internal$$reject(promise,result.value)}return promise})}function lib$rsvp$node$$needsPromiseInput(arg){if(arg&&typeof arg==="object"){if(arg.constructor===lib$rsvp$promise$$default){return true}else{return lib$rsvp$node$$getThen(arg)}}else{return false}}var lib$rsvp$platform$$platform;if(typeof self==="object"){lib$rsvp$platform$$platform=self}else if(typeof global==="object"){lib$rsvp$platform$$platform=global}else{throw new Error("no global: `self` or `global` found")}var lib$rsvp$platform$$default=lib$rsvp$platform$$platform;function lib$rsvp$race$$race(array,label){return lib$rsvp$promise$$default.race(array,label)}var lib$rsvp$race$$default=lib$rsvp$race$$race;function lib$rsvp$reject$$reject(reason,label){return lib$rsvp$promise$$default.reject(reason,label)}var lib$rsvp$reject$$default=lib$rsvp$reject$$reject;function lib$rsvp$resolve$$resolve(value,label){return lib$rsvp$promise$$default.resolve(value,label)}var lib$rsvp$resolve$$default=lib$rsvp$resolve$$resolve;function lib$rsvp$rethrow$$rethrow(reason){setTimeout(function(){throw reason});throw reason}var lib$rsvp$rethrow$$default=lib$rsvp$rethrow$$rethrow;lib$rsvp$config$$config.async=lib$rsvp$asap$$default;lib$rsvp$config$$config.after=function(cb){setTimeout(cb,0)};var lib$rsvp$$cast=lib$rsvp$resolve$$default;function lib$rsvp$$async(callback,arg){lib$rsvp$config$$config.async(callback,arg)}function lib$rsvp$$on(){lib$rsvp$config$$config["on"].apply(lib$rsvp$config$$config,arguments)}function lib$rsvp$$off(){lib$rsvp$config$$config["off"].apply(lib$rsvp$config$$config,arguments)}if(typeof window!=="undefined"&&typeof window["__PROMISE_INSTRUMENTATION__"]==="object"){var lib$rsvp$$callbacks=window["__PROMISE_INSTRUMENTATION__"];lib$rsvp$config$$configure("instrument",true);for(var lib$rsvp$$eventName in lib$rsvp$$callbacks){if(lib$rsvp$$callbacks.hasOwnProperty(lib$rsvp$$eventName)){lib$rsvp$$on(lib$rsvp$$eventName,lib$rsvp$$callbacks[lib$rsvp$$eventName])}}}var lib$rsvp$umd$$RSVP={race:lib$rsvp$race$$default,Promise:lib$rsvp$promise$$default,allSettled:lib$rsvp$all$settled$$default,hash:lib$rsvp$hash$$default,hashSettled:lib$rsvp$hash$settled$$default,denodeify:lib$rsvp$node$$default,on:lib$rsvp$$on,off:lib$rsvp$$off,map:lib$rsvp$map$$default,filter:lib$rsvp$filter$$default,resolve:lib$rsvp$resolve$$default,reject:lib$rsvp$reject$$default,all:lib$rsvp$all$$default,rethrow:lib$rsvp$rethrow$$default,defer:lib$rsvp$defer$$default,EventTarget:lib$rsvp$events$$default,configure:lib$rsvp$config$$configure,async:lib$rsvp$$async};if(typeof define==="function"&&define["amd"]){define(function(){return lib$rsvp$umd$$RSVP})}else if(typeof module!=="undefined"&&module["exports"]){module["exports"]=lib$rsvp$umd$$RSVP}else if(typeof lib$rsvp$platform$$default!=="undefined"){lib$rsvp$platform$$default["RSVP"]=lib$rsvp$umd$$RSVP}}).call(this);

/*!
 * @overview  SHA-256 implementation in JavaScript
 * @copyright Copyright (c) Chris Veness 2002-2014
 * @license   Licensed under MIT license
 *            See http://www.movable-type.co.uk/scripts/sha1.html
 */

//@formatter:off
"use strict";var Sha256={};Sha256.hash=function(t){t=t.utf8Encode();var r=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],e=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];t+=String.fromCharCode(128);for(var n=t.length/4+2,o=Math.ceil(n/16),a=new Array(o),h=0;o>h;h++){a[h]=new Array(16);for(var S=0;16>S;S++)a[h][S]=t.charCodeAt(64*h+4*S)<<24|t.charCodeAt(64*h+4*S+1)<<16|t.charCodeAt(64*h+4*S+2)<<8|t.charCodeAt(64*h+4*S+3)}a[o-1][14]=8*(t.length-1)/Math.pow(2,32),a[o-1][14]=Math.floor(a[o-1][14]),a[o-1][15]=8*(t.length-1)&4294967295;for(var u,f,c,i,d,R,p,y,x=new Array(64),h=0;o>h;h++){for(var O=0;16>O;O++)x[O]=a[h][O];for(var O=16;64>O;O++)x[O]=Sha256.σ1(x[O-2])+x[O-7]+Sha256.σ0(x[O-15])+x[O-16]&4294967295;u=e[0],f=e[1],c=e[2],i=e[3],d=e[4],R=e[5],p=e[6],y=e[7];for(var O=0;64>O;O++){var T=y+Sha256.Σ1(d)+Sha256.Ch(d,R,p)+r[O]+x[O],s=Sha256.Σ0(u)+Sha256.Maj(u,f,c);y=p,p=R,R=d,d=i+T&4294967295,i=c,c=f,f=u,u=T+s&4294967295}e[0]=e[0]+u&4294967295,e[1]=e[1]+f&4294967295,e[2]=e[2]+c&4294967295,e[3]=e[3]+i&4294967295,e[4]=e[4]+d&4294967295,e[5]=e[5]+R&4294967295,e[6]=e[6]+p&4294967295,e[7]=e[7]+y&4294967295}return Sha256.toHexStr(e[0])+Sha256.toHexStr(e[1])+Sha256.toHexStr(e[2])+Sha256.toHexStr(e[3])+Sha256.toHexStr(e[4])+Sha256.toHexStr(e[5])+Sha256.toHexStr(e[6])+Sha256.toHexStr(e[7])},Sha256.ROTR=function(t,r){return r>>>t|r<<32-t},Sha256.Σ0=function(t){return Sha256.ROTR(2,t)^Sha256.ROTR(13,t)^Sha256.ROTR(22,t)},Sha256.Σ1=function(t){return Sha256.ROTR(6,t)^Sha256.ROTR(11,t)^Sha256.ROTR(25,t)},Sha256.σ0=function(t){return Sha256.ROTR(7,t)^Sha256.ROTR(18,t)^t>>>3},Sha256.σ1=function(t){return Sha256.ROTR(17,t)^Sha256.ROTR(19,t)^t>>>10},Sha256.Ch=function(t,r,e){return t&r^~t&e},Sha256.Maj=function(t,r,e){return t&r^t&e^r&e},Sha256.toHexStr=function(t){for(var r,e="",n=7;n>=0;n--)r=t>>>4*n&15,e+=r.toString(16);return e},"undefined"==typeof String.prototype.utf8Encode&&(String.prototype.utf8Encode=function(){return unescape(encodeURIComponent(this))}),"undefined"==typeof String.prototype.utf8Decode&&(String.prototype.utf8Decode=function(){try{return decodeURIComponent(escape(this))}catch(t){return this}}),"undefined"!=typeof module&&module.exports&&(module.exports=Sha256),"function"==typeof define&&define.amd&&define([],function(){return Sha256});

/*
*   KPI MANAGEMENT APP
*/

//

angular.module("KPIManagement", []);

//Kpis Management App Route Config
angular.module("KPIManagement").config(["$routeProvider", function ($routeProvider) {

    var _basepath = "./Views/KPIManagement/";

    //Route Navigation
    $routeProvider
         .when("/KPIManagement", {
             templateUrl: _basepath + "Index.html",
             controller: "IndexController",
             permissionCode: "1001"
         })
        .when("/KPIManagement/Kpi", {
            templateUrl: _basepath + "kpi.html",
            controller: "kpiController",
            permissionCode: "1002"
        })
         .when("/KPIManagement/directPrint", {
             templateUrl: _basepath + "printDemo.html",
             controller: "PrintDemoController",
             permissionCode: "1002"
         })
        .when("/KPIManagement/KpiDetails", {           
            templateUrl: _basepath + "KpiDetails.html",
            controller: "KpiDetailsController",
            permissionCode: "1002"
        })
        .when("/KPIManagement/pdfPrint", {
            templateUrl: _basepath + "pdfPrintDemo.html",
            controller: "PdfPrintDemoController",
            permissionCode: "1002"
        })
        .when("/KPIManagement/printDemo", {
            templateUrl: _basepath + "printDemo.html",
            controller: "PrintDemoController",
            permissionCode: "1002"
        })
    ;

}]);
//

angular.module("DialogBilling").service("KpiDetailsService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        
        //Update User
        update: function(credentials) {
            return $http.post(appConfig.API_URL + "Users/ResetPassword", credentials);
        },
        GetUserNameByuserId: function (userId) {
            return $http.get(appConfig.API_URL + "Users/GetUserByUserId/" + userId);
        }
    };

}]);
//

angular.module("DialogBilling").service("kpiService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        
        //Update User
        update: function(credentials) {
            return $http.post(appConfig.API_URL + "Users/ResetPassword", credentials);
        },
        GetUserNameByuserId: function (userId) {
            return $http.get(appConfig.API_URL + "Users/GetUserByUserId/" + userId);
        }
    };

}]);
//

angular.module("DialogBilling").controller("kpiController", ["$scope", "Page", "kpiService", "toaster", function ($scope, Page, kpiService, toaster) {

    //Set Page Title
    Page.setTitle("Direct Printing Sample"); 

   

    $scope.ValidateUserType = function () {

        //console.log('aaa');
        //console.log('toaster', toaster);
        //toaster.success("Your Password has been changed", 'Success');
        //toaster.pop({type: 'error', title: 'Title text', body: 'Body text',showCloseButton: true});

        //toaster.success({type: 'error', title: 'Title text', body: 'Body text',showCloseButton: true});
      
    };


    $scope.sucess = function () {

       toaster.success({ type: 'Success', title: 'Success', body: 'Saved Succesful', showCloseButton: true });
    };

    $scope.error = function () {

        toaster.error({ type: 'error', title: 'Error', body: 'Loading error', showCloseButton: true });
    };

    $scope.info = function () {

        toaster.info({ type: 'Info', title: 'Info', body: 'Information', showCloseButton: true });
    };

    $scope.warning = function () {

        toaster.warning({ type: 'warning', title: 'Warning', body: 'Warning msg', showCloseButton: true });
    };

   // $scope.ValidateUserType();

    $scope.RegisterIssue = {};
    $scope.finderKpiId = {
        title: "Ticket ID",
        info: {
            appId: "",
            uiId: "",
            mapId: "USER-001",
            modalId: "finderUserID", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.user.UserId = data.selectedItem.UserId;
        },
        open: function () {
            window._focuse(this.info.modalId);
            this.params = objTemp;

            $scope.alertMessage = new Message(MessageTypes.Empty, '');
            this.info.onLoad = true;
            $('#finderTicketId').modal('show');


        }
    };

    $scope.printButton = function () { 
       console.log("pdf");
       findDefaultPrinter(true, "../../Views/KPIManagement/assets/printTest.pdf");      
    };
    
    $scope.printRPTButton = function () {
        console.log("rpt");
        printRPT("../../Views/KPIManagement/assets/BillingBulkReceipt.rpt");
    };
    
    function findDefaultPrinter(set, pdfFile) {
        qz.printers.getDefault().then(function (data) {
            displayMessage("<strong>Found:</strong> " + data);
            if (set) {
                setPrinter(data);
            }
            debugger;
            var config = getUpdatedConfig();

            var printData = [
            {
                type: 'pdf',
                format: 'base64',
                data: ''
            }
            ];

            qz.print(config, printData).catch(displayError);
        }).catch(displayError);
    }

    ////////////  Print  RPT  /////////

    function printRPT(rptFile) {
        console.log("rpt");
        var config = getUpdatedConfig();

        // Send base64 encoded characters/raw commands to qz using data type 'base64'.
        // This will automatically convert provided base64 encoded text into text/ascii/bytes, etc.
        // This example is for EPL and contains an embedded image.
        // Please adapt to your printer language.

        //noinspection SpellCheckingInspection
        var printData = [
            {
                type: 'raw',
                format: 'rpt',
                data: '/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsUFRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys/RD84QzQ5OjcBCgoKDQwNGg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N//AABEIAFoAjwMBIgACEQEDEQH/xAAbAAABBQEBAAAAAAAAAAAAAAAEAQIDBQYAB//EADYQAAIBAwMBBQYEBQUAAAAAAAECAAMEERIhMQVBUWFxgRMiMpGx8BShwdEGI1Lh8UJDYpLC/8QAGgEAAgMBAQAAAAAAAAAAAAAAAAQBAgMFBv/EACERAAIDAAIBBQEAAAAAAAAAAAABAgMREiEEFCIxQWET/9oADAMBAAIRAxEAPwAGwA+EKCMZGOCIVnR7j5IH07P1HmIBbVyiglhp5BB7f75hFWsrA1GPvY389uPkPlPIzj7huCch9eo71KVTPwkhhnsOzD0Okx6qF1pkbbiQBLiopdKTYz8JI7sSI0boNpPsw+NkLb4hxT6Gn4ja/SKvTFUqXTOF5HZFpWiVCqnbg4Hb97/Ix6M6Vf5qFH2AyNtoVVtva24ubfIZN3UeHd48GX5NdFoeP2tAr/piUgldFGjhvDuMPtLGjUoI7UxqIhyj8V0/UBs9MjbyjennNpT9frMZWycf06UIxi+irqWiC60hcDaTfhQDt9JJVXN6w72ELZZDsfRZJARo8RVpEGENjMQd0jkyRgAEX0jws7RKtgNO4kbJ4QgU9smNYgwTAHOy4xIGGCQYWwGPGC1yAZpFgVtFcHU/piE22uvUwFAQcCC29YNgOo/Yw2kfYHVvpzs2Nie6NY28POKTiaawsmZAHrksf9tRjH6yPqXQabn2i0KpqgbNuSfXMm6LcUagAOont1YwPpNXSt/bIugIQB4j85T0812hiHkv7MHStHUslRfbJjcEbkdxll07pq213Tp08tQuULU2PORyD5TVv0tbg++CtQY01P8AUD2ZPaIlOw9mq6VxoqrUUf06gVYfOQ/HsZr6kzfT7RUtnp+zP8us6DyBO0Fs7XFuDgAFmx/2M11O2BqVWYc1SYJaWirZUx5n84tOLRpHyGZG4o4vG8xHVF3h3UaQF+wHGRBag7DKP6Ha56gV1OYi0yZMwGIxTjaGmp2MbTiJxESAHZztEZRiOAwZzcQAGqDAMr67+XrLGvsDKq43M3rWgyO1tGqJUTS3taa6lGPjXjHn2fLuaS0KppOEfDUnGx7xPRbL+HbJrZRRyjIwZTnOM8+hGxHbHXP8FWlVCoXSCcgg/CT9/lOh/N2LUeZaaMbYGta3CuKiPSO6NWXKkf8AI9h8TkT1PorpXoUy1NqdQruC2RjwOwx6TEdP6PcWd9VsKwy9HDISNnU9v33GbzoVqKNuoTKrzp7j99o/w74sW17jN9MKq0gvZI2TIJG2/wD6JhtUDBg5+LYZ/wAmaWQz4LpgjUFAc9pZjAFpBLZR4bfOWzj3WOO+A1V026+U5d9SXeG0JMx3Uqeb5xnYtALgYMs+pg/jHK7nXKy4zqOZzJHVoYM2YmOIrHecvEgcFI2kcdmNJggHcCIW2iZjWkgD3PGZWVyGllcn3TKqrv3xiohnqVncCrR0tW9ii874J8M/tvCbR3Nwr29Z3oUzklzkMe4Hk+e448ZjbG+SrUDU6pUkDjP7y8puzHDVTpbs33/OM1+S4vGcOdTNf+Dp3V3Rus4ZF0EdhX7zLOki010rM3Z9RWlTUFgcDBJMNHVlI5nVpvhgrKt6WVxUUZGZAao1ALzj9TK9+o0ywzk+shqX51A0+8ZP35ylty+dLKDLF6vuMAd8mBXFTFBWBztiDC6DUXctggt9TGay1qurfIzOZdfyNoQwoepNi8cA765W3LZYyW/qn8dU79ZgtRsmISOnQiJuYhO0U47pw3lRwYczo/AjSJIHLEcZEeOJxkAAXAOmVrqdUuay6oHUo+EYhLCGZzpXV2okDO55zNbQ66MBWY5I2M80szkgt8I5lzTptrXTkjE6V9EGxCElOPZ6JQ6xTIA1Nn0hA6oW2Lkd0xNBsYLAnPb2wxK+jkMvyimcekRKpaa4dSU7a2xHi7pk4wxz3MZl1vQvwsc+kJTqDED3pWUmQqi+qXJSg60aNXURsMjH1ktK+qrRVMtgDfb+8z46ieCCR5xTfVTxTOPOYS1mkaUE1a+u6Yn+oxtQ77QFWc1S7DGTnYyYuSRiUkhmEeKJTHLEXjeKdpQ0EbmdOzOzAMGmd2TjOG8CRpWROsIIxIyueZKYHmPTNHsS1TYA8kS3oXCEKob3eAdpm6Z9xJMjMq5BI44M9JZVyenHhZiSNGLjGCj5x5SdbnWBll+cy1N21sNRxjvljb7tTB3GBMJ0JI0jPS+yxHAPjmEUnKjHZKRGb2Te8dnHbJtTa8ZOM8ZizrN1IvKVYO2mFow4BlFbk6eez9YYhOBueIvOs1TLdGUnn5SYEDgyuoE6hvCVMXlHDVBZYZE5jICTn0nEnHMphclDgRNUgP6x8MI0lG8UbRqcSUfDIZJxIkLHfEc0hf4oJAf/2Q=='
            }
        ];
        //  toaster.error({ type: 'error', title: 'Error', body: "Voucher retrive failer!", showCloseButton: true });
        qz.print(config, printData).catch(displayError);
    }


}]);


//

angular.module("DialogBilling").controller("KpiDetailsController", ["$scope", "Page", "KpiDetailsService", function ($scope, Page, KpiDetailsService) {


    window.location = "http://dev7.test.com:61195/app.html#/dashboard";



   
    Page.setTitle("KPI Detail1syy111");

    $scope.RegisterIssue = {};

}]);


(function () {
    'use strict';
    angular.module('DialogBilling')
      .controller('PdfPrintDemoController', function (DirectPrintService, $scope, $timeout, $http) {
          var vm = $scope.vm = {};
          PrintService.getPrinters(function (data) {
              data = data || [];
              $scope.$apply(function () {
                  vm.printers = data;
                  vm.selectedPrinter = data[0];
              });
          });
          $scope.savePrinter = function (printer) {
              localStorage.setItem('directPrinter', printer);
              alert('Printer Saved');
          };
          $scope.printPdf = function () {
              vm.printInProgress = true;
              $http.get('/get-pdf-base-64')
                .then(function (res) {
                    var base64String = res.data.data;
                    PrintService.printPdf(function () {
                        $scope.$apply(function () {
                            console.log('Print Completed');
                            vm.printInProgress = false;
                            vm.printCompleted = true;
                            $timeout(function () {
                                vm.printCompleted = false;
                            }, 4000);
                        });
                    }, base64String);
                });
          };
      });
}());

(function()  {
    'use strict';
    angular.module('DialogBilling')
      .controller('PrintDemoController', function (DirectPrintService, $scope, $timeout) {
          var vm = $scope.vm = {};

          DirectPrintService.start();

          $scope.data = [{
              name: 'A',
              info: 'aaaaaaa'
          }, {
              name: 'B',
              info: 'bbbbbbb'
          }, {
              name: 'C',
              info: 'ccccccc'
          }, {
              name: 'D',
              info: 'ddddddd'
          }, {
              name: 'E',
              info: 'eeeeeee'
          }, {
              name: 'F',
              info: 'fffffff'
          }, {
              name: 'G',
              info: 'ggggggg'
          }, {
              name: 'H',
              info: 'hhhhhhh'
          }];

          $scope.printTable = function () {
              for (var i = 0; i < $scope.data.length; i++) {
                  var componentId = $scope.data[i].name;
                  DirectPrintService.print(function () {
                      $scope.$apply(function () {
                          console.log('Print Completed');
                          vm.printCompleted = true;
                          $timeout(function () {
                              vm.printCompleted = false;
                          }, 3000);
                      });
                  },
                  $('#' + componentId + '').html());
              }
          };

          $scope.printHtml = function () {
                  DirectPrintService.print(function () {
                      $scope.$apply(function () {
                          console.log('Print Completed');
                          vm.printCompleted = true;
                          $timeout(function () {
                              vm.printCompleted = false;
                          }, 3000);
                      });
                  },
                  "<br><br><br><body> <div id='page_1'> <table cellpadding='0' cellspacing='0' class='t0'> <tbody><tr> <td class='tr0 td0'><p class='p0 ft0'>Con Ref</p></td> <td class='tr0 td1'><p class='p1 ft0'>: 0114376494</p></td> <td class='tr0 td2'><p class='p0 ft1'>&nbsp;</p></td> </tr> <tr> <td class='tr1 td0'><p class='p0 ft1'>&nbsp;</p></td> <td class='tr1 td1'><p class='p2 ft0'><nobr>TEST-QA-NAME</nobr></p></td> <td class='tr1 td2'><p class='p0 ft1'>&nbsp;</p></td> </tr> <tr> <td class='tr2 td0'><p class='p0 ft0'>Receipt No</p></td> <td class='tr2 td1'><p class='p1 ft0'>: DBBPDSC00058063</p></td> <td class='tr2 td2'><p class='p0 ft2'><nobr>29-Jun-2017</nobr> 1:33 pm</p></td> </tr> <tr> <td class='tr2 td0'><p class='p0 ft0'>Amount</p></td> <td class='tr2 td1'><p class='p1 ft0'>: 10.00</p></td> <td class='tr2 td2'><p class='p0 ft1'>&nbsp;</p></td> </tr> <tr> <td class='tr2 td0'><p class='p0 ft0'>Pay Mode</p></td> <td class='tr2 td1'><p class='p1 ft0'>: CASH</p></td> <td class='tr2 td2'><p class='p0 ft1'>&nbsp;</p></td> </tr><br/> <tr> <td rowspan='2' class='tr3 td0'><p class='p0 ft0'>Printed On</p></td> <td class='tr4 td1'><p class='p1 ft0'>: 0</p></td> <td rowspan='2' class='tr3 td2'><p class='p3 ft0'>By : 002</p></td> </tr> <tr> <td class='tr4 td1'><p class='p1 ft0'>: <nobr>29-Jun-2017</nobr> 1:33 pm</p></td> </tr> </tbody></table> <p class='p4 ft2'>DIALOG BROADBAND NETWORKS No. 57, Dharamapala Mawatha,Colombo 03. Sri Lanka.</p> </div> <div style='padding: 50px 0px 15px 20px; font-family: Arial, Helvetica, sans-serif; font-size: 8px; color: #c8c8c8;'> </div> </body>");
          };



          $scope.dataRecipt = [{
              conRef: '0114376494',
              name: 'TEST-QA-NAME',
              receiptNo: 'DBBPDSC00058063',
              receiptDate: '29-Jun-2017',
              receiptTime: '1:33 pm',
              amount: '10.00',
              payMode: 'CASH',
              printedOnDate: '29-Jun-2017',
              printedOnTime: '1:33 pm',
              by: '002',
              address: 'DIALOG BROADBAND NETWORKS (NPoV. T5)7 L, TDDh.a r(aPmVa 2p6a1la) Mawatha,Colombo 03. Sri Lanka.'
          },
          {
              conRef: '2222222222',
              name: 'TEST-ABC-NAME',
              receiptNo: 'DBBPDSC00058063',
              receiptDate: '29-Jun-2017',
              receiptTime: '1:33 pm',
              amount: '10.00',
              payMode: 'CASH',
              printedOnDate: '29-Jun-2017',
              printedOnTime: '1:33 pm',
              by: '002',
              address: 'DIALOG BROADBAND NETWORKS (NPoV. T5)7 L, TDDh.a r(aPmVa 2p6a1la) Mawatha,Colombo 03. Sri Lanka.'

          }];

          $scope.printHtmlListArray = function () {
              for (var i = 0; i < $scope.dataRecipt.length; i++) {
                   DirectPrintService.print(function () {
                      $scope.$apply(function () {
                          console.log('Print Completed');
                          vm.printCompleted = true;
                          $timeout(function () {
                              vm.printCompleted = false;
                          }, 3000);
                      });
                  },
                  "<br><br><br>" +
                  "<body>" +
                  "<div id='page_1'> " +
                      "<table cellpadding='0' cellspacing='0' class='t0'> " +
                            "<tbody>" +
                                "<tr> " +
                                "<td><p>Con Ref</p></td> " +
                                "<td><p>: " + $scope.dataRecipt[i].conRef + "</p></td>" +
                                "<td><p>&nbsp;</p></td> " +
                                "</tr> <tr> " +
                                "<td><p>&nbsp;</p></td> " +
                                "<td><p><nobr>" + $scope.dataRecipt[i].name + "</nobr></p></td> " +
                                "<td><p>&nbsp;</p></td> " +
                                "</tr> <tr> " +
                                "<td><p>Receipt No</p></td> " +
                                "<td><p>: DBBPDSC00058063</p></td> " +
                                "<td><p><nobr>29-Jun-2017</nobr> 1:33 pm</p></td>" +
                                "</tr> <tr>" +
                                "<td><p>Amount</p></td> " +
                                "<td><p>: 10.00</p></td> " +
                                "<td><p>&nbsp;</p></td> " +
                                "</tr> <tr> " +
                                "<td class='tr2'><p>Pay Mode</p></td> " +
                                "<td class='tr2'><p>: CASH</p></td> " +
                                "<td class='tr2'><p>&nbsp;</p></td> " +
                                "</tr> <tr> " +
                                "<td rowspan='2'><p class='p0 ft0'>Printed On</p></td> " +
                                "<td class='tr4 td1'><p>: 0</p></td> " +
                                "<td rowspan='2'><p class='p3 ft0'>By : 002</p></td> " +
                                "</tr> <tr> " +
                                "<td class='tr4 td1'><p>: <nobr>29-Jun-2017</nobr> 1:33 pm</p>" +
                                "</td> </tr> " +
                             "</tbody>" +
                         "</table> " +
                     "<p class='p4 ft2'>DIALOG BROADBAND NETWORKS No. 57, Dharamapala Mawatha,Colombo 03. Sri Lanka.</p> " +
                     "</div> " +
                        "<div style='padding: 50px 0px 15px 20px; font-family: Arial, Helvetica, sans-serif; font-size: 8px; color: #c8c8c8;'>" +
                        "</div>" +
                     "</body>");
              };
          }
     });
}());

/*
*   USER MANAGEMENT APP
*/

//

angular.module("UserManagement", []);

//User Management App Route Config
angular.module("UserManagement").config(["$routeProvider", function ($routeProvider) {

    var _basepath = "./Views/UserManagement/";

    //Route Navigation
    $routeProvider
        .when("/UserManagement", {
            templateUrl: _basepath + "Index.html",
            controller: "IndexController",
            permissionCode: "1001"
        })
        .when("/UserManagement/CreateUsers", {
            templateUrl: _basepath + "CreateUsers.html",
            controller: "CreateUsersController",
            permissionCode: "1002"
        })
        .when("/UserManagement/ChangePassword", {
            templateUrl: _basepath + "ChangePassword.html",
            controller: "ChangePasswordController",
            permissionCode: "1003"
        })
        .when("/UserManagement/ResetPassword", {
            templateUrl: _basepath + "ResetPassword.html",
            controller: "ResetPasswordController",
            permissionCode: "1004"
        })
        .when("/UserManagement/CreateUsersGroups", {
            templateUrl: _basepath + "CreateUsersGroups.html",
            controller: "CreateUsersGroupsController",
            permissionCode: "1005"
        });


}]);
angular.module("UserManagement").controller("ChangePasswordController", ["$scope", "Page", "ChangePasswordService", "AuthService", function ($scope, Page, ChangePasswordService, AuthService) {

    //Set Page Title
    Page.setTitle("Change Password23456");

   
    $scope.user = {};
     
     

    // validate user
    $scope.ValidateUserType = function () {

       
        ChangePasswordService.ValidateUserType().then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                console.log(response.data.Result);
                if (response.data.Result == 0) {
                    $scope.user.validateUsr = false;
                }
                else {
                    $scope.user.validateUsr = true;
                    $scope.alertMessage = new Message(3, "Domain users are not allowed to changed password through system!!");
                }
            }
           

        }, function (response) {
            $scope.alertMessage = new Message(response.data.Code, response.data.Message);

        });
    };

    // Update Change Password
    $scope.ChangePasswordSubmit = function (isValid)
    {
       
        if (isValid)
        {

            ChangePasswordService.Update($scope.user).then(function (data)
            {
                if (data.data.Code == "0")
                {
                    $scope.alertMessage = {
                        message: data.data.Message,
                        type: "S"
                    };

                    if(AuthService.getProfile().redirectTo){
                        AuthService.setAuthentication(false);
                    }

                } else {
                    $scope.alertMessage = {
                        message: data.data.Message,
                        type: "E"
                    };
                }
            }, function () {
                $scope.alertMessage = {
                    message: data.data.Message,
                    type: "E"
                };
            });

        } else {
            $scope.alertMessage = {
                //title: "Error!",
                message: data.data.Message,
                type: "E"
            };
        }
    };

    //Reset Form
    $scope.ChangePasswordReset = function (formModel) {
        angular.copy({}, formModel);
        $scope.ChangePasswordForm.$setPristine();
        $scope.alertMessage = [];
    };

    $scope.user.validateUsr = true;
    $scope.ValidateUserType();
}]);
angular.module("UserManagement").controller("CreateUsersController", ["$scope", "Page", "CreateUsersService", function ($scope, Page, CreateUsersService) {

    //Set Page Title
    Page.setTitle("Create Userssd12eer");
    $scope.userSP = [];

    var search = false;

    $scope.user = [];
    function init(arg) {

        EnableControl();
    }
    init("ssss");

    $scope.isUpdateUser = false;
   

    //FINDER controler (pop up) 1st finder "UserId"
    $scope.finderUserID = function (response) {
        console.log(response.selectedItem.UserId, response.selectedItem.AccountType, "fromfinder");
        getUserDetails(response.selectedItem.UserId, response.selectedItem.AccountType);
    };

    $scope.changeUser = function (userId, AccountType) {
        $scope.alertMessage = "";
        getUserDetails(userId, AccountType);
    };


    var getUserDetails = function (userId, AccountType) {
        console.log("getUserDetails", userId, AccountType);
        $scope.alertMessage = "";

        if (!userId) {
            return;
        }

        search = true;

        CreateUsersService.getUser(userId, AccountType).then(function (result) {

            console.log(result);
            if (result.data.Code == 0) {
                console.log(result.data.Result, "result.data.Result");
                if (result.data.Result == null) {
                    console.log("in null");
                    return;
                }

                if (result.data.Result.userInfor.isNewUser === true && result.data.Result.userInfor.isDomainUser === false) {
                    $scope.isUpdateUser = false;
                    $scope.clearAllWhenNoRes();
                    return;
                }


                if (result.data.Result.userInfor.isDomainUser === true) {
                    $scope.isUpdateUser = false;
                    $scope.user.UserFullName = result.data.Result.userInfor.UserFullName;
                    $scope.user.AccountType = result.data.Result.userInfor.AccountType;
                    $scope.user.UserId = result.data.Result.userInfor.UserId;
                    $scope.user.email = result.data.Result.userInfor.Email;
                    $scope.user.MobileNo = result.data.Result.userInfor.Mobile;
                }
                else {
                    if (result.data.Result != null) {
                        
                        $scope.isUpdateUser = true;
                        $scope.user = {
                            AccountType: result.data.Result.userInfor.AccountType,
                            accountTypeOption: result.data.Result.userInfor.AccountTypeOption,
                            UserId: result.data.Result.userInfor.UserId,
                            UserFullName: result.data.Result.userInfor.UserFullName,
                            Inactive: result.data.Result.userInfor.Inactive,
                            email: result.data.Result.userInfor.Email,
                            MobileNo: result.data.Result.userInfor.Mobile,
                            IsPwChangeNextLogin: result.data.Result.userInfor.NextLogin,
                            IsSysPwEmail: result.data.Result.userInfor.SystemPwd,
                            GroupId: result.data.Result.userInfor.GroupId,
                            password: result.data.Result.userInfor.Password
                        };
                        
                    } else {
                        $scope.clearAll();
                    }
                }
                if (result.data.Result.userInfor.isDomainUser != true) {
                    DisableControl();
                }
                $scope.checkAccountTypeTicketSys();
            
            }

            else {
                console.log("result", result.data.Code);
                $scope.alertMessage = new Message(result.data.Code, result.data.Message);
                $scope.user = {
                    UserFullName: "",
                    AccountType: "",
                    UserId: "",
                    email: "",
                    MobileNo: ""
                };
            }


        }, function () {
        });
    };



    function EnableControl() {
        $scope.IsNxtLogin = false;
        $scope.IsSystemPwd = false;
        $scope.isPassword = false;
    }

    function DisableControl() {
        $scope.IsNxtLogin = true;
        $scope.IsSystemPwd = true;
        $scope.isPassword = true;
    }



    $scope.clearAllWhenNoRes = function () {

        $scope.user.UserFullName = "";
        $scope.user.Inactive = false;
        $scope.user.email = "";
        $scope.user.MobileNo = "";
        $scope.user.IsPwChangeNextLogin = "";
        $scope.user.IsSysPwEmail = "";
        $scope.user.password = "";

        $scope.isUpdateUser = false;
        EnableControl();
        $scope.alertMessage = new Message(MessageTypes.Empty);
    };

    $scope.clearAll = function () {
        search = false;
        $scope.user = {
            AccountType: false,
            accountTypeOption: "",
            UserId: "",
            UserFullName: "",
            Inactive: false,
            email: "",
            MobileNo: "",
            IsPwChangeNextLogin: "",
            IsSysPwEmail: "",
            password: ""
        };
  
        $scope.isUpdateUser = false;
        EnableControl();

        $scope.alertMessage = new Message(MessageTypes.Empty);
        $scope.CreateUserForm.$setPristine();
        $scope.user.accountTypeOption = "Single Sign On";
    };

    //Create User
    $scope.createUser = function (form) {
        $scope.alertMessage = "";
        if (form.$valid) {

            var objUser = {
                AccountType: $scope.user.AccountType,
                accountTypeOption: $scope.user.accountTypeOption,
                UserId: $scope.user.UserId,
                UserFullName: $scope.user.UserFullName,
                Inactive: $scope.user.Inactive,
                email: $scope.user.email,
                MobileNo: $scope.user.MobileNo,
                IsPwChangeNextLogin: $scope.user.IsPwChangeNextLogin,
                IsSysPwEmail: $scope.user.IsSysPwEmail,
                Password: $scope.user.password,
                GroupId: $scope.user.GroupId

            };

            console.log($scope.user.AccountType, "user.AccountType");
            console.log(objUser.AccountType, "objUser.AccountType");
                
            if ($scope.user.AccountType == 0 && ($scope.user.password == "") && !$scope.user.IsSysPwEmail && !$scope.user.Inactive) {
                console.log("in");
                $scope.alertMessage = new Message(1, "Please enter valid password");
                return;
            }

            if ($scope.user.AccountType == 1 && (!$scope.user.email)) {
                $scope.alertMessage = new Message(1, "Please enter valid email. Email is mandatory for domain accounts.");
                return;
            }

            if ($scope.user.AccountType == 1 && ((!$scope.user.MobileNo) || ($scope.user.MobileNo == "") || ($scope.user.MobileNo == " "))) {
                $scope.alertMessage = new Message(1, "Please enter valid mobile number. Mobile number is mandatory for domain accounts.");
                return;
            }

            if ($scope.user.AccountType == 0 && (!$scope.user.email) && ($scope.user.IsSysPwEmail)) {
                $scope.alertMessage = new Message(1, "Please enter valid email to send user password");
                return;
            }

            if ($scope.user.GroupId == "") {
                $scope.alertMessage = new Message(1, "Please select a User Group");
                return;
            }

            if ($scope.isUpdateUser == false) {
                CreateUsersService.Create(objUser).then(function (result) {

                    $scope.alertMessage = new Message(result.data.Code, result.data.Message);
                    $scope.getUser();
                    //REFRESH FINDER
                    $scope.finderUserID.info.onLoad = false;
                }, function (result) {
                    $scope.alertMessage = new Message(result.data.Code, result.data.Message);
                });
            } else {
                CreateUsersService.Update(objUser).then(function (result) {

                    DisableControl();
                    $scope.alertMessage = new Message(result.data.Code, result.data.Message);
                    //REFRESH FINDER
                    $scope.finderUserID.info.onLoad = false;
                }, function (result) {
                    $scope.alertMessage = new Message(result.data.Code, result.data.Message);
                });
            }
        }
        else {
            $scope.showErrors(form);
        }
    };

    //Delete User 
    $scope.deleteUser = function (isValid) {
        if (isValid) {
            CreateUsersService.Remove($scope.user).then(function (result) {
                $scope.successMessage = 'User deleted Successfully.';
            }, function (result) {
                $scope.ErrorMessage = 'User remove error.';
            });
        }
        else {
            $scope.ErrorMessage = 'User remove error.';
        }
    };

    //Get User 
    $scope.getUser = function (isValid) {
        if (isValid) {
            CreateUsersService.read($scope.user, $scope.AccType).then(function (result) {
            }, function (result) {
                $scope.ErrorMessage = 'User getting error.';
            });
        }
        else {
            $scope.ErrorMessage = 'User getting error.';
        }
    };

    //Reset Form
    $scope.CreateUserReset = function (formModel) {
        //    angular.copy({}, formModel);
        $scope.CreateUserForm.$setPristine();
        $scope.clearAll();
        //     $scope.user.accountTypeOption = "Single Sign On";
        $scope.alertMessage = new Message(MessageTypes.Empty);
    };

    //Check UID
    $scope.isAccountTypeSystem = true;
    $scope.checkAccountTypeTicketSys = function () {
        $scope.alertMessage = "";
      
        if ($scope.user.AccountType == 0 && !search) {
            $scope.user.IsPwChangeNextLogin = true;
        }

        $scope.user.IsSysPwEmail = false;
        $scope.user.password = "";
       
        $scope.isAccountTypeSystem = $scope.user.AccountType != 1;
        // $scope.user.accountTypeOption = "Single Sign On";
    };


    $scope.CheckDomainUser = function () {
        if ($scope.user.AccountType == "DOMAIN") {

        }
    };


    $scope.ClearPw = function () {

        $scope.user.password = "";
    };

    
    var objTemp = new Array();
   
    $scope.aa = function () {
        $scope.finderUserID.info.onLoad = false;
        objTemp = [];
        this.params = objTemp;
        $scope.finderUserID.open();
    }


    $scope.finderUserID = {
        title: "User ID",
        info: {
            appId: "",
            uiId: "",
            mapId: "USER-001",
            modalId: "finderUserID", 
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.user.UserId = data.selectedItem.UserId;
            console.log(data.selectedItem.UserId, data.selectedItem.AccountType,"data");
            getUserDetails(data.selectedItem.UserId, data.selectedItem.AccountType);

        },
        open: function () {
            search = true;
            window._focuse(this.info.modalId);
            this.params = objTemp;

            $scope.alertMessage = new Message(MessageTypes.Empty, '');

            this.info.onLoad = true;
            $('#finderUserID').modal('show');


        }
    };

    $scope.finderGropID = {
        title: "User Group Finder",
        info: {
            appId: "",
            uiId: "",
            mapId: "CER-USER-GRO",
            modalId: "finderGropID", 
            onLoad: true
        },
        params: [],

        callback: function (data) {
            $scope.disabled = {
                groupId: false
            };

            $scope.user.GroupId = data.selectedItem.GroupCode
            
        },
        open: function () {
            //$scope.reset();
            $scope.disabled = {
                GroupID: true
            };
            window._focuse(this.info.modalId);
            this.info.onLoad = true;
            $scope.finderGropID.info.onLoad = false;
            $scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };

}]);

//
angular.module("UserManagement").controller("CreateUsersGroupsController", ["$scope", "Page", "CreateUsersGroupsService", function ($scope, Page, createUsersGroupsService) {

    //Set Page Title
    Page.setTitle("Create Users Groups");
    //FINDER controler (pop up) 1st finder "GroupId"

    $scope.userGroups = {};
    $scope.UserGroup = {};

    $scope.disabled = {
        GroupID: true
    };
    $scope.finderGropID = function (response) {

        $scope.disabled = {
            groupId: false
        };
        
        $scope.userGroups = {
            GroupId: response.selectedItem.GroupCode,
            status: response.selectedItem.Inactive
        };
        $scope.getUserGroupsByGroupCode();
    };

    //FINDER controler (pop up) 2st finder "FromUserGroup"
    $scope.finderUserGrop = function (response) {
        $scope.userGroups.FromUserGroup = response.selectedItem.GroupCode;
        $scope.userGroups.GroupDescription1 = response.selectedItem.GroupDescription;
        $scope.getPermissionFormUserGroupsByGroupCode();
    };
    $scope.Init = function (arg) {
        $scope.dgGrid.Init(arg);
    };

     var config = {};
    var permissionDescriptiontxt = "";
    $scope.AllPermissionCollection = [];
    //Create a datagrid object
    $scope.dgGrid = new DataGrid();

    config.pageable = {
        input: true,
        numeric: false
    };

    config.columns = [
        {
            field: "IsSelected",
            headerTemplate: '<input type="checkbox" title="Select all" ng-model="selectAll" ng-click="toggleSelect($event)" />',
            template: '<input type="checkbox" ng-model="dataItem.IsSelected" ng-click="selectThis($event)" />',
            width: "32px",
            sortable: false

        },
        {
            field: "PermissionCode",
            title: "Permission Code",
            width: "120px",
        },
        {
            field: "PermissionDescription",
            title: "Permission Description",
            width: "350px",
        },
        {
            field: "ModuleDescription",
            title: "Module Description",
            width: "160px"
        },
        //{
        //    field: "ModuleId",
        //    title: "Module Id",
        //    width: "160px",
        //},
        {
            field: "InterfaceDescription",
            title: "Interface Description"
        },
        //{
        //    field: "InterfaceId",
        //    title: "Interface Id"
        //},
        
    ];

    config.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "SubCatCode",
                fields: {
                    'PermissionCode': { editable: false, type: "string" },
                    'PermissionDescription': { editable: false, type: "string" },
                    //'ModuleId': { editable: false, type: "string" },
                    'InterfaceDescription': { editable: false, type: "string" },
                    'ModuleDescription': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 8

    });
    //eeeeesdssdcsd
    $scope.dgGrid.options(config);

    $scope.selectThis = function (e) {
        $scope.selectedRow = e;
    };

    $scope.toggleSelect = function (e, gId) {
        var dataItems = [];

        dataItems = $scope.dgGrid.data();

        for (var i = 0; i < dataItems.length; i++) {
            dataItems[i].IsSelected = e.target.checked;
        } $scope.selectThis();
    };

    //Form Load Get Modules
    $scope.ModuleCollections = [];

    var sort_by = function (field, reverse, primer) {

        var key = primer ?
            function (x) { return primer(x[field]) } :
            function (x) { return x[field] };

        reverse = [-1, 1][+!!reverse];

        return function (a, b) {
            return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
        }
    };
    $scope.LoadPage = function () {
        $scope.disabled = {
            GroupID: true
        };
        createUsersGroupsService.formLoad(0).success(function (response) {


            if (response.Code == 0) {
                $scope.ModuleCollections = response.Result;

            } else {
                $scope.alertMessage = {
                    //   title: "Error!",
                    message: response.Message,
                    type: "E"
                };
            }
        }).error(function (response) {
            $scope.alertMessage = {
                // title: "Error!",
                message: response.Message,
                type: "E"
            };
        });

    }
    $scope.LoadPage();
    //Get All Groups by Module ID

    var groupId = 0;
    try {
        if (angular.isUndefined($scope.userGroups.GroupId) || $scope.userGroups.GroupId === null) {
            groupId = $scope.userGroups.GroupId;
        }
    } catch (e) {
        groupId = 0;
    }
    createUsersGroupsService.GetPermissionByUserGroupId(groupId).success(function (response) {
        $scope.dgGrid.data(response.Result);
        $scope.AllPermissionCollection = response.Result;
    }).error(function (response) {
        $scope.alertMessage = {
           // title: "Error!",
            message: response.Message,
            type: "E"
        };
    });

    var moduleId = 0;
    var interfaceId = 0;

    //Blur in Form group TextBox
    $scope.getPermissionFormUserGroupsByGroupCode = function () {

        if (angular.isUndefined($scope.userGroups.FromUserGroup) || $scope.userGroups.FromUserGroup === null) {
            $scope.alertMessage = {
               // title: "Error!",
                message: "User Group Id not found!",
                type: "E"
            };
            return;
        }
        if ($scope.userGroups.FromUserGroup != "") {
            //Load Permission Data
            createUsersGroupsService.getPermissionGroupsByGroupCode($scope.userGroups.FromUserGroup).success(function (response) {
                $scope.userGroups.GroupDescription1 = response.Result.GroupDescription;
                $scope.dgGrid.data(response.Result.GroupPermissionViewModel);
                $scope.AllPermissionCollection = response.Result.GroupPermissionViewModel;
                
            }).error(function (response) {
                $scope.alertMessage = {
                  //  title: "Error!",
                    message: response.Message,
                    type: "E"
                };
            });
        }
    };

    //Blur in group TextBox
    $scope.getUserGroupsByGroupCode = function () {
        var ss = $scope.userGroups.GroupId;
        if (!$scope.userGroups.GroupId) {
            $scope.alertMessage = "";
            $scope.reset();
            return;
        }

        createUsersGroupsService.getPermissionGroupsByGroupCode($scope.userGroups.GroupId).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                $scope.disabled = {
                    GroupID: true
                };
                console.log(response.data.Result.GroupPermissionViewModel);
                $scope.alertMessage = "";
                // $scope.UiReportCollections = response.data.Result;
                $scope.dgGrid.data(response.data.Result.GroupPermissionViewModel);
                $scope.userGroups.GroupDescription = response.data.Result.GroupDescription;
                $scope.userGroups.status = response.data.Result.Inactive;
                $scope.finderUserGroup.info.onLoad = false;
                $scope.finderGropID.info.onLoad = false;

            } else {
                $scope.reset();
                $scope.disabled = {
                    GroupID: false
                };
                $scope.userGroups.GroupId = ss;
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);
                return;
            }
        }, function (response) {

            $scope.reset();
            $scope.userGroups.GroupId = ss;
            $scope.alertMessage = new Message(response.data.Code, response.data.Message);
        });
        
    };

    $scope.UiReportCollections = [];
    $scope.loadGroupsByModuleId = function () {
        $scope.UserGroup.permissionDescription = "";
    };

 
    //reset button
    $scope.reset = function () {
        console.log("asdasd");
        $scope.disabled = {
            GroupID: true
        };
        $scope.userGroups.switchCopy = false;
        $scope.selectAll=false;
        $scope.finderUserGroup.info.onLoad = false;
        $scope.finderGropID.info.onLoad = false;
        $scope.disabled.GroupID = true;
        $scope.userGroups.GroupId = "";
        $scope.userGroups.GroupDescription = "";
        $scope.userGroups.status = "";
        angular.forEach($scope.AllPermissionCollection, function (row) {
            row.IsSelected = false;
        });
        $scope.dgGrid.data($scope.AllPermissionCollection);
        $scope.UserGroup.ModuleName = 0;
        $scope.UserGroup.UIReport = 0;
        $scope.UserGroup.permissionDescription = "";
        $scope.disabled = {
            GroupDesc: false
        };
        $scope.alertMessage = [];
        $scope.userGroups.FromUserGroup = "";
        $scope.userGroups.GroupDescription1 = "";
        $scope.CreateUsersGroupForm.$setPristine();
        $scope.FormLoadV1();
    };


    $scope.resetcopy = function () {

            $scope.userGroups.FromUserGroup = "";
            $scope.userGroups.GroupDescription1 = "";
            $scope.alertMessage = "";
    };


    $scope.disabled = {
        GroupDesc: false
    };

    //SAVE USER GROUP DATA

    $scope.createUserGroupFormSubmit = function () {
        console.log("sadasdasd");
        //  if (isValid) {
        if (!$scope.userGroups.GroupDescription) {
            $scope.alertMessage = new Message(3, "Please enter valid Group Description");
            return;
        }
            
            var items = $scope.dgGrid.data();
            var gId = 0;
            if (angular.isUndefined($scope.userGroups.GroupId)) {
                gId = 0;
            } else {
                gId=$scope.userGroups.GroupId;
            }
            $scope.formdata = {
                GroupCode: gId,
                gridData: items,
                GroupDescription: $scope.userGroups.GroupDescription,
                Inactive: $scope.userGroups.status
            };
            createUsersGroupsService.PostUserGroupPermissions($scope.formdata).then(function (data) {
                $scope.userGroups.GroupId = data.data.Result;
                $scope.alertMessage = new Message(data.data.Code, data.data.Message);
            }, function () {
                $scope.alertMessage = {
                    //title: "Error!",
                    message: response.Message,
                    type: "E"
                };
            });
    };

    $scope.loadUserGrops = function () {
        $scope.UserGroup.permissionDescription = "";
    };


    $scope.FilterPermissionGroupByKeyword = function (type) {
       $scope.alertMessage = "";
        var criteria = '';
        var currentGrid = [];

        $scope.CurrentPermissionCollection = [];
        var originalSelectedItemList = [];
        criteria = $scope.UserGroup.permissionDescription.toLowerCase();
        originalSelectedItemList = $scope.AllPermissionCollection;
        currentGrid = $scope.dgGrid.data();

        angular.forEach(originalSelectedItemList, function (row) {
            angular.forEach(currentGrid, function (row1) {
                if (row.PermissionCode == row1.PermissionCode) {
                    row.IsSelected = row1.IsSelected;
                }
            });
        });

        angular.forEach(originalSelectedItemList, function(row) {

            if (row.PermissionDescription.toLowerCase().indexOf(criteria) > -1) {
                $scope.CurrentPermissionCollection.push(row);
            }
        });
        $scope.dgGrid.data($scope.CurrentPermissionCollection);

    };    


    $scope.CreateUsersGroupFilterReset = function () {
        $scope.UserGroup.permissionDescription = "";
        var iD = -1;
        var uiDs= -1;
        
        $scope.alertMessage = "";
        if ($scope.UserGroup.ModuleName == 0 && $scope.UserGroup.UIReport == 0 && !$scope.UserGroup.permissionDescription) {
            $scope.alertMessage = new Message(3, "Please select / enter search Criteria");
            return;
        }

        if ($scope.userGroups.GroupId) {
            iD = $scope.userGroups.GroupId;
        }
        if ($scope.UserGroup.UIReport) {
            uiDs = $scope.UserGroup.UIReport;
        }

        console.log($scope.UserGroup.ModuleName, uiDs, iD);
        createUsersGroupsService.Search($scope.UserGroup.ModuleName, uiDs, iD).then(function (response) {
       
                if (response.data.Code == MessageTypes.Success) {
                    $scope.alertMessage = "";
                    $scope.dgGrid.data(response.data.Result);
                    $scope.AllPermissionCollection = response.data.Result;


                } else {
                    $scope.alertMessage = new Message(response.data.Code, response.data.Message);
                    $scope.dgGrid.data([]);

                    return;
                }
            }, function (response) {
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);
            });    
       
    };
    

    $scope.FilterIterface = function () {

        if (!$scope.UserGroup.ModuleName) {
            return;
        }
     
        createUsersGroupsService.FilterIterfaceByModeule($scope.UserGroup.ModuleName).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                console.log(response.data.Result);
                $scope.alertMessage = "";
                $scope.UiReportCollections = response.data.Result;
                $scope.CreateUsersGroupFilterReset();

            } else {
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);               
                return;
            }
        }, function (response) {
            $scope.alertMessage = new Message(response.data.Code, response.data.Message);
        });

    };
    

    $scope.$watch("UserGroup.ModuleName", function () {
        $scope.UserGroup.UIReport = 0;
        $scope.selectAll = false;
        //console.log();
        if ($scope.UserGroup.ModuleName) {
            if ($scope.UserGroup.ModuleName == 0) {
               return;
            }
            $scope.FilterIterface();
        }
    });


    $scope.$watch("UserGroup.UIReport", function () {
        $scope.selectAll = false;
        if ($scope.UserGroup.UIReport) {
            if ($scope.UserGroup.UIReport == 0) {
                return;
            }

            $scope.CreateUsersGroupFilterReset();
        }
    });
    

    $scope.FormLoadV1 = function () {
        
        createUsersGroupsService.formLoad(0).success(function (response) {


            if (response.Code == 0) {
                $scope.ModuleCollections = response.Result;

            } else {
                $scope.alertMessage = {
                    //   title: "Error!",
                    message: response.Message,
                    type: "E"
                };
            }
        }).error(function (response) {
            $scope.alertMessage = {
                // title: "Error!",
                message: response.Message,
                type: "E"
            };
        }); var groupId = 0;
        try {
            if (angular.isUndefined($scope.userGroups.GroupId) || $scope.userGroups.GroupId === null) {
                groupId = $scope.userGroups.GroupId;
            }
        } catch (e) {
            groupId = 0;
        }
        createUsersGroupsService.GetPermissionByUserGroupId(groupId).success(function (response) {
            $scope.dgGrid.data(response.Result);
            $scope.AllPermissionCollection = response.Result;
        }).error(function (response) {
            $scope.alertMessage = {
                // title: "Error!",
                message: response.Message,
                type: "E"
            };
        });

        moduleId = 0;
        interfaceId = 0;
    };   


    $scope.FormLoadV1();


    $scope.finderGropID = {
        title: "User Group Finder",
        info: {
            appId: "",
            uiId: "",
            mapId: "CER-USER-GRO",
            modalId: "finderGropID", 
            onLoad: true
        },
        params: [],

        callback: function (data) {
            $scope.disabled = {
                groupId: false
            };

            $scope.userGroups = {
                GroupId: data.selectedItem.GroupCode,
                status: data.selectedItem.Inactive
            };
            $scope.getUserGroupsByGroupCode();
        },
        open: function () {
            //$scope.reset();
            $scope.disabled = {
                GroupID: true
            };
            window._focuse(this.info.modalId);
            this.info.onLoad = true;
            $scope.finderGropID.info.onLoad = false;
            $scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };

    $scope.finderUserGroup = {
        title: "User Group Finder",
        info: {
            appId: "",
            uiId: "",
            mapId: "CER-USER-GRO-002",
            modalId: "finderUserGroup", 
            onLoad: true
        },
        params: [],

        callback: function (data) {
            $scope.userGroups.FromUserGroup = data.selectedItem.GroupCode;
            $scope.userGroups.GroupDescription1 = data.selectedItem.GroupDescription;
            $scope.getPermissionFormUserGroupsByGroupCode();
        },
        open: function () {
            this.info.onLoad = false;
            this.info.onLoad = true;

            $scope.alertMessage = new Message(MessageTypes.Empty, '');

            var objTemp = new Array();

            objTemp.push($scope.userGroups.GroupId);

            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');

        }
    };

}]);
//

angular.module("UserManagement").controller("ResetPasswordController", ["$scope", "Page", "ResetPasswordService", function($scope, Page, ResetPasswordService) {

    //Set Page Title
    Page.setTitle("Reset Password1");

    $scope.user = {};

    //FINDER controler (pop up) 1st finder "userId"
    $scope.finderUserID = function (response) {

        $scope.field = {
            userId: response.selectedItem.UserId,
            UserFullName: response.selectedItem.UserFullName,
            email: response.selectedItem.email
        };
        $scope.field.passwordgeneratetype = "SystemPassword";
    };

    $scope.pageTitle = "ResetPasswordController";

    //Save User 
    $scope.field = {};
    $scope.field.passwordgeneratetype = "SystemPassword";
    $scope.resetPasswordSubmit = function (isValid) {
        if (isValid) {
            if ($scope.field.passwordgeneratetype == "ManualPassword" && (($scope.field.Password == undefined) || $scope.field.Password.replace(/[\s]/g, '').length<1)) {
               
                $scope.alertMessage = {
                    //title: "success saving!",
                    message: "Password can not be empty!",
                    type: "E"
                };
                return;
            }


            ResetPasswordService.update($scope.field).then(function (data)
            {

               if (data.data.Code == 0) {
                    $scope.alertMessage = {
                        //title: "success saving!",
                        message: data.data.Message,
                        type: "S"
                    };
                }
                else
                    $scope.alertMessage = {
                        //title: "Fail..!",
                        message: data.data.Message,
                        type: "E"
                    };
             },
                function (result) {
                    $scope.alertMessage = {
                       // title: "Fail..!",
                        message: "Password Reset Fail.",
                        type: "E"
                    };
                   
                }
            );

        } else {
            $scope.ErrorMessage = 'permission getting error.';
        }
    };

    $scope.loadUserNameByUserId = function () {

        if ($scope.field.userId != undefined) {

            //Assign Data to Grid
            ResetPasswordService.GetUserNameByuserId($scope.field.userId).success(function (response) {

                $scope.field.UserFullName = response.Result.UserFullName;
                $scope.field.userId = response.Result.UserId;
                $scope.field.email = response.Result.email;
                
                
            }).error(function (response) {
            });

        }


    };

    //Reset Form
    $scope.ResetPasswordReset = function(formModel) {
        angular.copy({}, formModel);
        $scope.alertMessage = new Message(MessageTypes.Empty);
        $scope.resetPasswordForm.$setPristine();
    };



    // validate user
    $scope.ValidateUserType = function () {


        ResetPasswordService.ValidateUserType().then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                console.log(response.data.Result);
                if (response.data.Result == 0) {
                    $scope.user.validateUsr = false;
                }
                else {
                    $scope.user.validateUsr = true;
                    $scope.alertMessage = new Message(3, "Domain users are not allowed to changed password through system");
                }
            }


        }, function (response) {
            $scope.alertMessage = new Message(response.data.Code, response.data.Message);

        });
    };

    $scope.user.validateUsr = true;
    $scope.ValidateUserType();
}]);


angular.module("UserManagement").service("ChangePasswordService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        //Update User
        Update: function (credentials) {
            return $http.post(appConfig.API_URL + "Users/ChangePassword", credentials);
        },
        ValidateUserType: function () {
            return $http.get(appConfig.API_URL + "Users/ValidateResetAndCangePassword");
        }
    };

}]);
//

angular.module("UserManagement").service("CreateUsersGroupsService", ["$http", "appConfig", function($http, appConfig) {

    return {
        formLoad: function (moduleId) {

            if (moduleId=="" || moduleId==undefined) {
                moduleId = 0;
            }
            return $http.get(appConfig.API_URL + "PermissionGroups/FormLoad/" + moduleId);
        },
        //Save User
        /*create: function(credentials) {
            return $http(appConfig.API_URL + "PermissionGroups/", credentials);
        },*/
        //Get User
        /*read: function(credentials) {
            return $http(appConfig.API_URL + "PermissionGroups", { params: { userId: credentials.userId } });
        },*/
        //Update User
        update: function(credentials) {
            return $http.post(appConfig.API_URL + "PermissionGroups", credentials);
        },
        //Delete User
        remove: function(credentials) {
            return $http.delete(appConfig.API_URL + "PermissionGroups", { params: { userId: credentials.userId } });
        },

        loadGroupsByModuleId: function(credentials) {
            return $http.get(appConfig.API_URL + "PermissionGroups/LoadGroupsByModuleId/" + credentials);
        },

        loadGroupsByInterfaceId: function (interfaceCode,groupCode) {
            return $http.get(appConfig.API_URL + "PermissionGroups/LoadGroupsByInterfaceId/" + interfaceCode + "/" + groupCode);
        },

        GetUserGroups: function(interfaceCode) {
            return $http.get(appConfig.API_URL + "PermissionGroups/LoadGroupsByInterfaceId/" + interfaceCode);
        },

        PostUserGroupPermissions: function(credentials) {
            return $http.post(appConfig.API_URL + "Permissions/PostUserGroupPermission", credentials);
        },

        getPermissionGroupsByGroupCode: function (credentials) {
            return $http.get(appConfig.API_URL + "PermissionGroups/GetPermissionGroupsByGroupCode/"+ credentials);
        },

        getSystemModulesByUserGroupId: function (groupId) {
            return $http.get(appConfig.API_URL + "Permissions/GetSystemModulesByUserGroupId/" + groupId);
        },

        GetPermissionByUserGroupId: function (userGroupId) {

            if (userGroupId == "" || userGroupId == undefined) {
                userGroupId = 0;
            }
            return $http.get(appConfig.API_URL + "PermissionGroups/GetPermissionByUserGroupId/" + userGroupId);
        },

        GetSelectedPermissionsByUserGroupId: function (userGroupId, moduleId, interfaceId, permissionDescription) {

            if (userGroupId == "" || userGroupId == undefined) {
                userGroupId = 0;
            }
            return $http.get(appConfig.API_URL + "PermissionGroups/GetSelectedPermissionsByUserGroupId/" + userGroupId + "/" + moduleId + "/" + interfaceId + "/" + permissionDescription);
        },

        GetSystemInterfacesByUserId: function () {
            return $http.get(appConfig.API_URL + "PermissionGroups/GetSystemInterfacesByUserId");
        },
        
        Search: function (modeule, interfacecode, id) {
            return $http.get(appConfig.API_URL + "Permissions/FilterPermissionGrid/" + modeule + "/" + interfacecode + "/" + id);
        },
        
        SearchViaKeyWord: function (serchKey) {
            return $http.post(appConfig.API_URL + "Permissions/FilterPermissionByKeyWord", serchKey);
        },
       
        FilterIterfaceByModeule: function (modeule) {
            return $http.get(appConfig.API_URL + "Permissions/FilterInterface/" + modeule);
        },

       
    };
}]);
//

angular.module("UserManagement").service("CreateUsersService", ["$http", "appConfig", function ($http, appConfig)
{

    return {

        //Save User
        Create: function (credentials)
        {
            return $http.post(appConfig.API_URL + "Users/PostUser", credentials);
        },
        //Update User
        Update: function (credentials)
        {
            return $http.post(appConfig.API_URL + "Users/PostUpdateUser", credentials);
        },
        //Delete User
        Remove: function (credentials)
        {
            return $http.delete(appConfig.API_URL + "Users/CreateUsers", { params: { userId: credentials.userId } });
        },
        //Get User
        getUser: function (userId, AccountType)
        {
            return $http.get(appConfig.API_URL + "Users/GetUser/" + userId + "/" + AccountType); 
        },
        

        //Get Validate Massage ... Chech Valid User and Password
        Create1: function (UserPassword, UserID)
        {
            return $http.get(appConfig.API_URL + "Users/ValidUsedIdAndPassword/" + UserPassword + "/" + UserID);
        },

        getDomainUser: function (userId) {
            return $http.get(appConfig.API_URL + "Users/GetDomainUser/" + userId);
            
         }

   
    };

}]);
//

angular.module("UserManagement").service("ResetPasswordService", ["$http", "appConfig", function($http, appConfig) {
    return {
        //Save User
        create: function(credentials) {
            return $http(appConfig.API_URL + "Users/ResetPassword", credentials);
        },
        //Update User
        update: function(credentials) {
            return $http.post(appConfig.API_URL + "Users/ResetPassword", credentials);
        },
        //Delete User
        remove: function(credentials) {
            return $http.delete(appConfig.API_URL + "Users/ResetPassword", { params: { userId: "002" } });//credentials.userId
        },
        //Get User
        read: function (credentials) {
            return $http(appConfig.API_URL + "Users/ResetPassword", { params: { userId: credentials.userId } });
        },

        isAvailable: function() {
            return !(!$scope.resetPasswordForm.userId || $scope.resetPasswordForm.userId.length === 0);
        },
        GetUserNameByuserId: function (userId) {
            return $http.get(appConfig.API_URL + "Users/GetUserByUserId/" + userId);
        }
        ,
        ValidateUserType: function () {
            return $http.get(appConfig.API_URL + "Users/ValidateResetAndCangePassword");
        }
    };

}]);
/*
 *   Bulk Payment
 */

//

angular.module("BulkPayment", []);

angular.module("BulkPayment").config(["$routeProvider", function ($routeProvider) {

    var _basepath = "./Views/BulkPayment/";

    //Route Navigation
    $routeProvider
        .when("/BulkPayment/BulkPayment", {
            templateUrl: _basepath + "BulkPayment.html",
            controller: "BulkPaymentController",
            permissionCode: "50001"
        })

     .when("/BulkPayment/PaymentMethod", {
         templateUrl: _basepath + "PaymentMethod.html",
         controller: "PaymentMethodController",
         permissionCode: "50010"
     })
    .when("/BulkPayment/PaymentSource", {
        templateUrl: _basepath + "PaymentSource.html",
        controller: "PaymentSourceController",
        permissionCode: "50011"
    })
    .when("/BulkPayment/PaymentType", {
        templateUrl: _basepath + "PaymentType.html",
        controller: "PaymentTypeController",
        permissionCode: "50012"
    })
    .when("/BulkPayment/SuspenseAccountConfig", {
        templateUrl: _basepath + "SuspenseAccountConfig.html",
        controller: "SuspenseAccountConfigController",
        permissionCode: "50016"
    })
     .when("/BulkPayment/PaymentInquiry", {
         templateUrl: _basepath + "PaymentInquiry.html",
         controller: "PaymentInquiryController",
         permissionCode: "50002"
     })
     .when("/BulkPayment/PaymentCancellation", {
         templateUrl: _basepath + "PaymentCancellation.html",
         controller: "PaymentCancellationController",
         permissionCode: "50003" 
     })
    .when("/BulkPayment/PaymentTransfer", { 
        templateUrl: _basepath + "PaymentTransfer.html",
        controller: "PaymentTransferController",
        permissionCode: "50004"
    })
    .when("/BulkPayment/BulkReceiptPrinting", {
        templateUrl: _basepath + "BulkReceiptPrinting.html",
        controller: "BulkReceiptPrintingController",
        permissionCode: "50005"
    })
     .when("/BulkPayment/ForcefulRealizationOfCheque", {
         templateUrl: _basepath + "ForcefulRealizationOfCheque.html",
         controller: "ForcefulRealizationOfChequeController",
         permissionCode: "50006"
     })
    .when("/BulkPayment/ChequeReturn", {
        templateUrl: _basepath + "ChequeReturn.html",
        controller: "ChequeReturnController",
        permissionCode: "50007"
    })
    .when("/BulkPayment/ChequeReturnReasons", {
        templateUrl: _basepath + "ChequeReturnReasons.html",
        controller: "ChequeReturnReasonsController",
        permissionCode: "50008"
    })
    .when("/BulkPayment/CancellationAndTransferReasons", {
        templateUrl: _basepath + "CancellationTransferReasons.html",
        controller: "CancellationTransferReasonsController",
        permissionCode: "50009"
    })
    .when("/BulkPayment/ProductCategory", {
        templateUrl: _basepath + "ProductCategory.html",
        controller: "ProductCategoryController",
        permissionCode: "50013"
    })
    .when("/BulkPayment/ProductType", {
        templateUrl: _basepath + "ProductType.html",
        controller: "ProductTypeController",
        permissionCode: "50014"
    })
    .when("/BulkPayment/AllowedPaymentModes", {
        templateUrl: _basepath + "AllowedPaymentModes.html",
        controller: "AllowedPaymentModesController",
        permissionCode: "50001"
    })
    .when("/BulkPayment/TransferProduct", {
        templateUrl: _basepath + "TransferProduct.html",
        controller: "TransferProductController",
        permissionCode: "50015"
    })
    .when("/BulkPayment/TransferLogic", {
        templateUrl: _basepath + "TransferLogic.html",
        controller: "TransferLogicController",
        permissionCode: "50018"
    })
    .when("/BulkPayment/BillInvoicePayment", {
        templateUrl: _basepath + "BillInvoicePayment.html",
        controller: "BillInvoicePaymentController",
        permissionCode: "50018"
    })
    .when("/BulkPayment/BillInvoiceCancellation", {
        templateUrl: _basepath + "BillInvoiceCancellation.html",
        controller: "BillInvoiceCancellationController",
        permissionCode: "50018"
    })
    .when("/BulkPayment/BatchProcessPayments", {
        templateUrl: _basepath + "BatchProcessPayments.html",
        controller: "BatchProcessPaymentsController",
        permissionCode: "50019"
    });


}]);
'use strict';

angular.module('DialogBilling')
  .directive('addBillInvoicePayments', function (toaster) {
      return {
          restrict: 'E',
          replace: true,
          scope: {
              callback: "&"
          },
          templateUrl: './Views/Common/addBillInvoicePayments.html',
          link: function (scope, element) {
              var table = element.find('table');
              var templateTr = table.find('#template');
              var cumilaltiveTr = element.find('#cumilaltive'),
                totalAmountInput = cumilaltiveTr.find('input')[1];

              scope.$on('popAddBillInvoicePayments.CustomEvent', function (event, data) {
                  var rowItems = [];
                  scope.totAmount = 0;
                  scope.correctRecCount = 0;
                  scope.rowItems = data;
              });

              //filter('number')(number, fractionSize);

              scope.submitData = function () {
                  var correctItemsList = [];
                  
                  var rowItems = scope.rowItems;
                  if (window.paymentsDirectiveCb) {
                      for (var i = 0; i < rowItems.length; i++) {
                          if ((rowItems[i].ConnectionReference == '' || rowItems[i].ConnectionReference == null) &&
                               (rowItems[i].ContractNumber == '' || rowItems[i].ContractNumber == null)) {

                              if ((rowItems[i].ConnectionReference == '') && (rowItems[i].ContractNumber == '') && (rowItems[i].Amount == 0) && (rowItems[i].ReferenceNumber == '')) {
                                  continue;
                              }

                              if (rowItems[i].ConnectionReference == undefined) {
                                  continue;
                              }

                              toaster.error({ type: 'error', title: 'Error', body: 'Amount should be entered with Connection Reference or Contract Number!', showCloseButton: true });
                              return;

                          } else {                              
                              if (rowItems[i].Amount == "" || rowItems[i].Amount == null)
                                  rowItems[i].IsSelected = false;
                              
                              rowItems[i].ContractNumberGridDisabled = true;
                              rowItems[i].ConnectionReferenceGridDisabled = true;

                              rowItems[i].ReferenceNumberGridDisabled = false;
                              rowItems[i].RemarksGridDisabled = false;

                              correctItemsList.push(rowItems[i]);
                          }
                      }

                      setTimeout(function () {
                          console.log(new Date().toLocaleString());
                          window.paymentsDirectiveCb(scope.rowItems.length, scope.totAmount, correctItemsList);
                          rowItems = [];
                      }, 1000);
                      $("#popAddBillInvoicePayments").modal('hide');
                  }
              };

              scope.enterAmount = function () {
                  var sum = 0;
                  scope.correctRecCount = 0;
                  scope.rowItems.forEach(function (item) {

                      if ((item.ConnectionReference == '' || item.ConnectionReference == null) &&
                               (item.ContractNumber == '' || item.ContractNumber == null) ||
                               (item.Amount == '' || item.Amount <= 0 || item.Amount == null)) {


                      } else {
                          sum += item.Amount;
                          scope.correctRecCount += 1;
                      }
                  });
                  scope.totAmount = sum;

              };

              scope.enterEvent = function (row, e) {
                  var key = e.keyCode ? e.keyCode : e.which;
                  if (key === 13) {
                      var focusedElement = $(e.target);
                      //if ((nextElement.next().length) == 0) {
                      var nextElement = focusedElement.closest('tr').next().children().eq(2);//next row's first column;
                      nextElement.find('input').focus();
                      if ($(e.target).closest('td').is(':last-child') && $(e.target).closest('tr').is(':last-child')) {
                          setTimeout(function () {
                              var index = 0;
                              $('.dd').eq(index).focus();
                          }, 10);
                      }
                      //}
                  }
              }


              ///////////////****** Auto focus input  when modal loads ******///////////////

              $('#popAddBillInvoicePayments').on('shown.bs.modal', function () {

                  setTimeout(function () {
                      $('#amount').focus();
                      //$("#BillInvoicePaymentsForm").find("tr(:first)").children().eq(2).find('input').focus();
                  }, 10);
                  ///////////////////// 

              });
          }
      };
  });

function debounce(func, wait, immediate) {
    var timeout;
    return function () {
        var context = this,
          args = arguments;
        var later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};

/*
Add Payments Modal Directive
*/
angular.module("DialogBilling").directive("addPayments", [function () { 
    return {
        restrict: "E", 
        replace: true, 
        scope: {
            params: "=",
            callback: "&",
            data: "@",
            title: "@",
            disable:"="
        },

        templateUrl: "./Views/Common/addPayments.html",
        controller: ["$scope", "$attrs", "BulkPaymentService", "toaster", function ($scope, $attrs, BulkPaymentService, toaster) {
            $scope.RandomBill = {};
            $scope.RowsId = 0;
            //watch params and initiate directives
            $scope.$watchCollection("params", function (_val) {
                if ($scope.params.onLoad) {
                    $scope.RowsId = 0;
                    init();
                }
            });

            $scope.$watchCollection("disable", function (_val) {
                $scope.RandomBill.AddPaymentButton = true;
            });
         
            var totalRows = '';
            $scope.$watchCollection("data12", function (_val) {
                $scope.RowsId = 0;
            });
            //-> Grid Sample data for demo purposes
            var s1 = [];
            var d2 = [];
            //@@@@@@@@@@@@@@@@@@@@@@@@@@
            //-> Grid Start
            var configAddPaymentsEnter = {};
            configAddPaymentsEnter.resizable = true;

            configAddPaymentsEnter.sortable = false;

            configAddPaymentsEnter.navigatable = false;

            configAddPaymentsEnter.pageable = false;

            configAddPaymentsEnter.editable = false;

            configAddPaymentsEnter.scrollable = true;

            configAddPaymentsEnter.columns = [

                  {
                      field: "ConnectionReference",
                      attributes: {
                          "navi-text": ""
                      },
                      headerTemplate: 'Connection Reference',
                      template: '<input ng-keydown="AA(this,$event)"  type="text" class="k-fill text-right aa conn-ref-count"  ng-change="dataItem.ContractNumber = null"  ng-model="dataItem.ConnectionReference"/>'

                  },
                   {
                       field: "ContractNumber",
                       attributes: {
                           "navi-text": ""
                       },
                       headerTemplate: 'Contract Number',
                       template: '<input ng-keydown="AA(this,$event)"  type="text"   class="k-fill text-right aa contr-num-count"   ng-change="dataItem.ConnectionReference = null" ng-model="dataItem.ContractNumber"/>'

                   },
                    {
                        field: "Amount",
                        attributes: {
                            "navi-text": ""
                        },
                        headerTemplate: 'Amount',
                        template: '<input ng-keydown="AA(this,$event)" type="text"  class="k-fill text-right aa amount"  ng-model="dataItem.Amount" format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />'

                         
                    },
                    {
                        field: "ReferenceNumber",
                        attributes: {
                            "navi-text": ""
                        },
                        headerTemplate: 'Reference Number',
                        template: '<input ng-keydown="AA(this,$event)"  type="text"  class="k-fill text-right aa"  ng-model="dataItem.ReferenceNumber"/>'

                    }

            ];


            configAddPaymentsEnter.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        id: "ID",
                        fields: {
                            'RowId': { editable: true, type: "number" },
                            'ConnectionReference': { editable: true, type: "number" },
                            'ContractNumber': { editable: true, type: "number" },
                            'Amount': { editable: true, type: "number" },
                            'ReferenceNumber': { editable: true, type: "number" },
                            'BillTyppe': { editable: true, type: "number" }
                        }
                    }
                },
                pageSize: 7000,

            });

            $scope.dgGridAddPaymentsEnter = new DataGrid();
            $scope.dgGridAddPaymentsEnter.options(configAddPaymentsEnter);

            $scope.Init = function (arg) {
                $scope.dgGridAddPaymentsEnter.Init(arg);
            };

            $scope.submitForm = function () {
             //   $scope.RandomBill.AddPaymentButton = true; 
                var fun = $scope.callback();
                var d = $scope.dgGridAddPaymentsEnter.data();
                //d.splice(0, 1);
                $scope.RowsId = 0;
                fun($scope.RandomBill.totRec, $scope.RandomBill.totalAmt, $scope.dgGridAddPaymentsEnter.data());

               
            }

            //@@@@@@@@@@@@@@@@@@@@@@@@@@
            //-> Data Entry Grid Start
            var configDataEntry = {};

            configDataEntry.resizable = true

            configDataEntry.sortable = false;

            configDataEntry.navigatable = false;

            configDataEntry.pageable = false;

            configDataEntry.editable = false;

            configDataEntry.columns = [

                    {
                        field: "ConnectionReference",
                        attributes: {
                            "navi-text": ""
                        },
                        headerTemplate: 'Connection Reference',
                        headerAttributes: {
                            style: "display: none"
                        },
                        template: '<input ng-keydown="DD(this,$event)" type="text" class="k-fill text-right dd conn-ref conn-ref-count"  ng-change="dataItem.ContractNumber = null" ng-model="dataItem.ConnectionReference" />'
                         //ng-change="dataItem.ContractNumber = null"
                    },
                     {
                         field: "ContractNumber",
                         attributes: {
                             "navi-text": ""
                         },
                         headerTemplate: 'Contract Number',
                         headerAttributes: {
                             style: "display: none"
                         },
                         template: ' <input ng-keydown="DD(this,$event)"  type="text" class="k-fill text-right dd contr-num contr-num-count"  ng-change="dataItem.ConnectionReference = null" ng-model="dataItem.ContractNumber"/>'//ng-change="dataItem.ConnectionReference = null"

                     },
                      {
                          field: "Amount",
                          attributes: {
                              "navi-text": ""
                          },
                          headerTemplate: 'Amount',
                          headerAttributes: {
                              style: "display: none"
                          },
                          template: '<input ng-keydown="DD(this,$event)"  type="text" class="k-fill text-right dd amount" ng-model="dataItem.Amount" ng-pattern="/^[0-9]+(\.[0-9]{2})?$/" />'

                      },
                      {
                          field: "ReferenceNumber",
                          attributes: {
                              "navi-text": ""
                          },
                          headerTemplate: 'Reference Number',
                          headerAttributes: {
                              style: "display: none"
                          },
                          template: '<input ng-keydown="DD(this,$event)"  type="text" class="k-fill text-right dd" ng-model="dataItem.ReferenceNumber" ng-pattern="/^[0-9]+(\.[0-9]{2})?$/" />'

                      } 
            ];

              
            configDataEntry.scrollable = true;



            configDataEntry.dataSource = new kendo.data.DataSource({
                data: [d2],

                schema: {
                    model: {
                        id: "ID",
                        fields: {

                            'ConnectionReference': { editable: true, type: "string" },
                            'ContractNumber': { editable: true, type: "string" },
                            'Amount': { editable: true, type: "number" },
                            'ReferenceNumber': { editable: true, type: "string" }


                        }
                    }
                },
                pageSize: 2,

            });




            $scope.dgGridDataEntry = new DataGrid();
            $scope.dgGridDataEntry.options(configDataEntry);

            $scope.Init2 = function (arg) {
                $scope.dgGridDataEntry.Init(arg);
            };

            //@@@@@@@@@@@@@@@@@@@@@@@@@@

            /////////////////////////////////////////////////////////////////////////////


            $scope.AA = function (row, e) {
                var key = e.keyCode ? e.keyCode : e.which;
                if (key === 13) {

                    var focusedElement = $(e.target);
                    var nextElement = focusedElement.closest('td').next();


                    if (nextElement.find('input').length > 0) {
                        setTimeout(function () {
                            nextElement.find('input').focus();
                        }, 10);


                    } else if ((nextElement.next().length) == 0) {


                        var nextElement = focusedElement.closest('tr').next().children().eq(0);//next row's first column;
                        nextElement.find('input').focus();

                        if ($(e.target).closest('td').is(':last-child') && $(e.target).closest('tr').is(':last-child')) {

                            setTimeout(function () {
                                var index = 0;
                                $('.dd').eq(index).focus();

                            }, 10);


                        }

                    }
                }
            }


            /////////////////////////////////////////////////////////////////////////////
            $scope.DD = function (row, e) {
                var key = e.keyCode ? e.keyCode : e.which;
                if (key === 13) {
                    var s = row.dataItem;
                    var focusedElement = $(e.target);
                    var nextElement = focusedElement.closest('td').next();
                    
                    var $nonempty = $('.conn-ref').filter(function () {
                        return this.value != ''
                    });
                    //proCategory != 2 && s.ConnectionReference.length > 0 && s.ConnectionReference.length != 9
                        ///////////////////////////////////
                        if ($(e.target).closest('td').is(':last-child') || $(e.target).closest('td').is(':nth-last-child(2)')) {

                                s1 = $scope.dgGridAddPaymentsEnter.data();

                                if ((angular.isUndefined(s.ConnectionReference) || s.ConnectionReference == '' || s.ConnectionReference == null) &&
                                (angular.isUndefined(s.ContractNumber) || s.ContractNumber == '' || s.ContractNumber == null) ||
                                (angular.isUndefined(s.Amount) || s.Amount == '' || s.Amount <= 0 || s.Amount ==null)) {
                                    toaster.error({ type: 'error', title: 'Error', body: 'Amount should be entered with Connection Reference or Contract Number!', showCloseButton: true });
                                    return;
                                } else {
                                    var proCategory = JSON.parse(localStorage.getItem("CurrentProductCategory"));
                                    if (s.ConnectionReference != null)
                                    {
                                        if (s != undefined) {
                                            if (proCategory != 2 && s.ConnectionReference.length > 0 && (s.ConnectionReference.length < 8 || s.ConnectionReference.length > 9)) {
                                                toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between 8 and 9!', showCloseButton: true });
                                                return;
                                            } else {
                                                if (proCategory == 2 && s.ConnectionReference != null && s.ConnectionReference.length > 20) {
                                                    toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference Length should be 0 < length <= 20!', showCloseButton: true });
                                                    return;
                                                } else {
                                                }
                                            }
                                        }
                                    }
                                        $scope.RowsId = $scope.RowsId + 1;
                                        s1.push({ 'RowId': $scope.RowsId, 'ConnectionReference': s.ConnectionReference, 'ContractNumber': s.ContractNumber, 'Amount': s.Amount, 'ReferenceNumber': s.ReferenceNumber });
                                        s.ConnectionReference = '';
                                        s.ContractNumber = '';
                                        s.Amount = '';
                                        s.ReferenceNumber = '';
                                }


                             

                                //$scope.CalcTotal();

                                $scope.RandomBill.AddPaymentButton = false;

                               $('#dgAddPaymentsEnterId .k-grid-content').scrollTop($('#dgAddPaymentsEnterId .k-grid-content')[0].scrollHeight);


                               setTimeout(function () {
                                   var index = 0;
                                   $('.dd').eq(index).focus();

                               }, 2);

                        }

                        else {

                            if ($nonempty.length == 0) {

                                setTimeout(function () {
                                    nextElement.find('input').focus();
                                }, 2);

                            } else {

                                nextElement = focusedElement.closest('td').next().next();

                                nextElement.find('input').focus();

                                }
                  }

               }
            }
            ////////////////////////////////////////////////////////
            //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    changeAddPaymentPageState     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
            $scope.changeAddPaymentPageState = function (status) {

                if (status = "NEW") {

                    $scope.dgGridDataEntry.data([d2]);
                    $scope.dgGridAddPaymentsEnter.data([]);
                    $scope.RandomBill.totRec = Number(0).toFixed(2);
                    $scope.RandomBill.totalAmt = Number(0).toFixed(2);               
                   
                    $('#myAddPayments').on('hidden.bs.modal', function (e) {
                        $scope.RandomBill.AddPaymentButton = true; 
                      
                    });

                } else {

                    $scope.dgGridDataEntry.data([]);
                    $scope.dgGridAddPaymentsEnter.data([]);
                    $scope.RandomBill.totRec = Number(0).toFixed(2);
                    $scope.RandomBill.totalAmt = Number(0).toFixed(2);
                    
                }

               
            
            }
            //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    checkForBlankWidget     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

          $scope.checkForBlankWidget = function () {                    
            //  toaster.error({ type: 'error', title: 'warning', body: "You are about to close the popup without submitting any data.", showCloseButton: true });
              // $('#myaddPayments').modal('hide');     
          }

        
  
            //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

            $("#dgDataEntryId tr").css("background-color", "#fcd0c6");
            ///////////////****** Auto focus input  when modal loads ******///////////////

            $('#myAddPayments').on('shown.bs.modal', function () {

                setTimeout(function () {
                    $('.conn-ref').focus();
                }, 2);
                /////////////////////

            })
            //////////////////////////////////
           
            $scope.CalcTotal = function () {

                //$scope.dgGridAddPaymentsEnter.data(s1);
                //var d = $scope.dgGridAddPaymentsEnter.data();

                var totRec = 0;
                var totalAmt = 0;

                angular.forEach($scope.dgGridAddPaymentsEnter.data(), function (row) {
                    totalAmt = (Number(row.Amount) + Number(totalAmt)).toFixed(2);                                    
                    totRec++;
                });

                $scope.RandomBill.totalAmt = totalAmt;
                $scope.RandomBill.totRec = totRec;

                setTimeout(function () {
                    var index = 0;
                    $('.dd').eq(index).focus();

                }, 2); 

                
            }

            //////////////////////////////////
        }]
    }

}]);



'use strict';

angular.module('DialogBilling')
  .directive('addPaymentsNew', function (toaster) {
      return {
          restrict: 'E',
          replace: true,
          scope: { 
              callback: "&"
          },

          templateUrl: './Views/Common/addPaymentsNew.html',
          link: function (scope, element) {
              var table = element.find('table');
              var templateTr = table.find('#template');
              var cumilaltiveTr = element.find('#cumilaltive'),
                totalNoOfRecordsInput = cumilaltiveTr.find('input')[0],
                totalAmountInput = cumilaltiveTr.find('input')[1];
              var rowItems = [];
              var totRecords = 0;
              var totAmount = 0;
              var rowElements = [];
              var proCategory = JSON.parse(localStorage.getItem("CurrentProductCategory"));
              var inputConRefMinLength = proCategory == 2 && 0 || 8;
              var inputConRefMaxLength = proCategory == 2 && 20 || 9;
              scope.aa = function () {
                  alert();
              }

              scope.submitData = function () {
                  var correctItemsList = [];
                  
                  if (window.paymentsDirectiveCb) {
                      for (var i = 0; i < rowItems.length; i++) {
                          if ((rowItems[i].ConnectionReference == '' || rowItems[i].ConnectionReference == null) &&
                               (rowItems[i].ContractNumber == '' || rowItems[i].ContractNumber == null) ||
                               (rowItems[i].Amount == '' || rowItems[i].Amount <= 0 || rowItems[i].Amount == null)) {

                              if ((rowItems[i].ConnectionReference == '') && (rowItems[i].ContractNumber == '') && (rowItems[i].Amount == 0) && (rowItems[i].ReferenceNumber == '')) {
                                  continue;
                              }

                              if (rowItems[i].ConnectionReference == undefined) {
                                  continue;
                              }

                              toaster.error({ type: 'error', title: 'Error', body: 'Amount should be entered with Connection Reference or Contract Number!', showCloseButton: true });
                              return;

                          } else {
                                  correctItemsList.push(rowItems[i]);
                          }
                      }

                      setTimeout(function () {
                          console.log(new Date().toLocaleString());
                          window.paymentsDirectiveCb(totRecords, totAmount, correctItemsList);
                          $("#AddPaymentsForm").find("tr:not(:first)").remove();
                          totalNoOfRecordsInput.value = 0;
                          rowItems = [];
                          totRecords = 0;
                          addNewRow();
                      },1000);
                      $("#myAddPaymentsNew").modal('hide');
                  } 
              };

              scope.changeAddPaymentPageState = function ()
              {
                  $("#AddPaymentsForm").find("tr:not(:first)").remove();
                  totalNoOfRecordsInput.value = 0;
                  rowItems = [];
                  totRecords = 0;
                  addNewRow();
              };

              var debouncedCalcTotal = debounce(function () {
                  
                  var sum = 0;
                  var correctRecCount = 0;
                  rowItems.forEach(function (item) {

                      if ((item.ConnectionReference == '' || item.ConnectionReference == null) &&
                               (item.ContractNumber == '' || item.ContractNumber == null) ||
                               (item.Amount == '' || item.Amount <= 0 || item.Amount == null)) {
                          
                          
                      } else {
                          sum += item.Amount;
                          correctRecCount += 1;
                      }
                  });

                  totalAmountInput.value = sum.toFixed(2);
                  totAmount = sum.toFixed(2);

                  totalNoOfRecordsInput.value = correctRecCount;
                  totRecords = correctRecCount;

              }, 600);

              addNewRow();

              debouncedCalcTotal();

              function bindEvents(tr, rowItem, rowElement) {
                  var inputs = tr.find('input');
                  var inputConRef = inputs[0],
                    inputConNo = inputs[1],
                    inputAmount = inputs[2],
                    inputRefNo = inputs[3];
                  rowElement.inputConRef = inputConRef;
                  rowElement.inputConNo = inputConNo;
                  rowElement.inputAmount = inputAmount;
                  rowElement.inputRefNo = inputRefNo;

                  //inputConRef.focus();
                  $(inputRefNo).add(inputConRef).add(inputAmount).add(inputConNo).on('input', function () {
                      if (this === inputConRef && inputConRef.value) {
                          inputConNo.value = '';
                      } else if (this === inputConNo && inputConNo.value) {
                          inputConRef.value = '';
                      }
                      rowItem.ReferenceNumber = inputRefNo.value;
                      rowItem.ConnectionReference = inputConRef.value;
                      rowItem.ContractNumber = inputConNo.value;
                      rowItem.Amount = parseFloat(inputAmount.value) || 0;
                      debouncedCalcTotal();
                  });

                  onEnterKey(inputRefNo, function () {
                      if (isValidRow()) {
                        
                          if (inputConRef.value) {
                              if (inputConRef.value.length > 0 && (inputConRef.value.length < 8 || inputConRef.value.length > 9)) {

                                  scope.$apply(function () {
                                      toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between 8 and 9!', showCloseButton: true });
                                      return;

                                  })

                              } else {
                                  if (
                                     // proCategory == 2 &&
                                      inputConRef.value != null && inputConRef.value.length > 20) {

                                      scope.$apply(function () { 

                                          toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference Length should be 0 < length <= 20!', showCloseButton: true });
                                          return;

                                      })

                                  }
                                  else {}

                              }

                          }
                          else {
                              whenValidRow();
                              return;
                          }
                  
                      }
                      else {

                          if (inputConRef.value || inputConNo.value) {

                              scope.$apply(function () { 
                                  toaster.error({ type: 'error', title: 'Error', body: 'Amount should be entered with Connection Reference or Contract Number!', showCloseButton: true });
                              })

                              inputAmount.focus();
                          } else if (!inputConRef.value) {
                              inputConRef.focus();
                          } else if (!inputConNo.value) {
                              inputConNo.focus();
                          } else {
                              inputAmount.focus();
                          }

                        

                      }

                    
                  });

                  onEnterKey(inputConRef, function () {
                      

                      var conRefVal = inputConRef.value;
                      if (conRefVal == "") {
                          inputConNo.focus();
                      } else {

                          var proCategory = JSON.parse(localStorage.getItem("CurrentProductCategory"));
                          //inputConRefMinLength = proCategory == 2 && 0 || 8;
                          //inputConRefMaxLength = proCategory == 2 && 20 || 9;

                          if (proCategory==2) {
                              inputConRefMinLength = 0;
                          }
                              //added to sort an error
                          else if (proCategory == null) {
                              inputConRefMinLength = 0;
                          }
                          else {
                              inputConRefMinLength = 8;
                          }

                          if (proCategory==2) {
                              inputConRefMaxLength = 20;
                          }
                              //added to sort an error
                          else if (proCategory == null) {
                              inputConRefMaxLength = 20;
                          }
                          else {
                              inputConRefMaxLength = 9;
                          }

                          if (conRefVal) {

                                  if (conRefVal.length >= inputConRefMinLength) {

                                      if (conRefVal.length <= inputConRefMaxLength) {
                                          if (isValidRow()) {
                                              whenValidRow();
                                                 return;
                                          }
                                      } else {
                                          scope.$apply(function () {
                                              toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between ' + inputConRefMinLength + ' and ' + inputConRefMaxLength + '!', showCloseButton: true });
                                          });
                                      }
                                      
                                  } else {
                                      scope.$apply(function () {
                                          toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between ' + inputConRefMinLength + ' and ' + inputConRefMaxLength + '!', showCloseButton: true });
                                      });
                                  }
                              
                          } else {
                              scope.$apply(function () {
                                  toaster.error({ type: 'error', title: 'Error', body: 'Please enter connection ref or contract no', showCloseButton: true });
                              });
                          }

                          //if (!conRefVal || conRefVal.length < inputConRefMinLength || conRefVal.length > inputConRefMaxLength) {
                          //    scope.$apply(function () {
                          //        toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between 8 and 9!', showCloseButton: true });
                          //    });
                          //    return;
                          //} else if (isValidRow()) {
                          //    whenValidRow();
                          //    return;
                          //}



                          if (!inputConRef.value) {
                              inputConNo.focus();
                          } else {
                              inputAmount.focus();
                          }
                      }
                  });

                  onEnterKey(inputConNo, function () {
                      if (isValidRow()) {
                          whenValidRow();
                          return;
                      }
                      if (!inputConNo.value) {
                          inputConRef.focus();
                      } else {
                          inputAmount.focus();
                      }
                  });

                  onEnterKey(inputAmount, function () {
                      if (isValidRow()) {
                          whenValidRow();
                          focusLastRow();
                          return;
                      }
                      inputConRef.focus();
                  });

                  function onEnterKey(el, callBack) {
                      el.addEventListener('keypress', function (e) {
                          if (e.keyCode === 13 && callBack) {
                              callBack();
                          }
                      });
                  }

                  function whenValidRow() {
                      if (isLastRow()) {
                          addNewRow();
                      } else {
                          focusLastRow();
                      }
                  }

                  function isValidRow() { 
                      var conRefVal = inputConRef.value; 
                      if (conRefVal.length && (conRefVal.length < inputConRefMinLength || conRefVal.length > inputConRefMaxLength)) {
                          scope.$apply(function () {
                              toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between 8 and 9!', showCloseButton: true });
                          });
                          return false;
                      }
                      return inputAmount.value && (inputConNo.value || inputConRef.value);
                  }

                  function isLastRow() {
                      return rowElement === rowElements[rowElements.length - 1];
                  }

                  function focusLastRow() {
                      return rowElements[rowElements.length - 1].inputConRef.focus();
                  }
           
              }


              function addNewRow() {
                  var rowItem = {
                      Amount: 0
                  };
                  rowItems.push(rowItem);
                  var rowElement = {};
                  rowElements.push(rowElement);
                  bindEvents(templateTr.clone().removeAttr('id').css('display', 'table-row').appendTo(table), rowItem, rowElement);
                  debouncedCalcTotal();
              }

                
              ///////////////****** Auto focus input  when modal loads ******///////////////

              $('#myAddPaymentsNew').on('shown.bs.modal', function () {

                  setTimeout(function () {
                      $('.conn-reference').focus();
                  }, 2);
                  ///////////////////// 

              });
          }
      };
  });

  function debounce(func, wait, immediate) {
      var timeout;
      return function () {
          var context = this,
            args = arguments;
          var later = function () {
              timeout = null;
              if (!immediate) func.apply(context, args);
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) func.apply(context, args);
      };
  };

angular.module("DialogBilling").controller('AllowedPaymentModesController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "AllowedPaymentModesService", function ($scope, Page, $routeParams, $filter, toaster, AllowedPaymentModesService) {
    //Set Page Title
    Page.setTitle("Allowed Payment Modes");
    $scope.AllowedPaymentMode = {};
    var configAllowedPaymentModes = {};

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 15,
        pageSizes: [50, 75, 100]
    };

    var configAllowedPaymentModes = {
        columns: [
                    {
                        //field: "",
                        field: "IsSelected",
                        headerTemplate: '<input type="checkbox" title="Select" ng-click="toggleSelect($event)" ng-model="IsSelectedAll"/>',
                        template: '<input type="checkbox" ng-click="selectThis($event)" ng-model="dataItem.IsSelected" />',
                        width: "18px"
                    },
                    {
                        field: "PaymentMode",
                        title: 'Payment Modes',
                        width: "130px"
                    }
        ],

        pageable: false,
        navigatable: true,
        editable: "incell",
        scrollable: true
    };
    configAllowedPaymentModes.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            schema: {
                model: {
                    fields: {
                        'Id': { editable: false, type: "text" },
                        'IsSelected': { editable: false, type: "text" },
                        'PaymentMode': { editable: false, type: "text" }
                    }
                }
            },
        },
        pageSize: 15
    });

    $scope.dgGridAllowedPaymentModes = new DataGrid();
    $scope.dgGridAllowedPaymentModes.options(configAllowedPaymentModes);
    $scope.InitA = function (arg) {
        $scope.dgGridAllowedPaymentModes.Init(arg);
    };

    //#############################################################################

    // DAP Outlet Type dropdown
    $scope.DAPOutletTypeOption = [
      { text: " -- Select -- ", value: "" },
      { text: "Front-Line", value: "BOF" },
      { text: "Back Office", value: "BO" }
    ];

    $scope.GetAllowedPayModesByDapOutletData = function () {
        if ($scope.AllowedPaymentMode.PaymentType != null) {
            AllowedPaymentModesService.GetAllowedPayModesByDapOutletData($scope.AllowedPaymentMode.PaymentType).then(function (response) {
                if (response.data.Code == "0") {
                    $scope.dgGridAllowedPaymentModes.data(response.data.Result.dtGrid);
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        }
    };

    $scope.PostAllowedPaymentModes = function () {
        if ($scope.AllowedPaymentMode.PaymentType == "") {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Type not selected", showCloseButton: true });
            return;
        }

        var dataItems = $scope.dgGridAllowedPaymentModes.data();
        var allowedPay = [];
        for (var i = 0; i < dataItems.length; i++) {
            $scope.obj = {
                Id: $scope.AllowedPaymentMode.PaymentType,
                PaymentMode: dataItems[i].Id,
                IsSelected: dataItems[i].IsSelected
            };
            allowedPay.push($scope.obj);
        }

        AllowedPaymentModesService.PostAllowedPaymentModes(allowedPay).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    

}]);
angular.module("DialogBilling").controller('BatchProcessPaymentsController', ["$scope", "Page", "$cookies", "BatchProcessPaymentsService", "$filter", "toaster", "fileUploadService", "PrintService", "appConfig", function ($scope, Page, $cookieStore, BatchProcessPaymentsService, $filter, toaster, fileUploadService, PrintService, appConfig) {
    //Set Page Title
    Page.setTitle("Batch Process Payments");
    $scope.Batch = {};
    $scope.PaymentSourceCollection = [];
    $scope.uploadedData = [];
    $scope.Batch.totalAmount = "";
    $scope.Batch.records = "";
    $scope.Batch.transferToSuspense = "";
    $scope.Batch.transferToSuspenseAmount = "";
    $scope.GridData = [];
    $scope.IsGridDisable = false;
    $scope.ISaveBtnDisable = true;
    $scope.IsVerifyBtnDisable = true;
    $scope.outletType = "";
    $scope.attachmentRef = "";

    $scope.paymentModeCollections = [
        { "Id": "CA", "Description": "CASH" },
        { "Id": "CHE", "Description": "CHEQUES" },
    ];


    // Get Master data from API
    $scope.PageLoad = function () {

        $scope.outletType = $scope.userInfo().outletType;

        BatchProcessPaymentsService.GetBatchProcessData().then(function (response) {
            if (response.data.Code == "0") {
                $scope.PaymentTypeCollection = response.data.Result.paymentTypes;
                $scope.PaymentSourceCollection = response.data.Result.paymentSources;
                $scope.PaymentSources = $scope.PaymentSourceCollection;
                $scope.PaymentMethodCollection = response.data.Result.paymentMethods;
                $scope.SbuCollection = response.data.Result.sbus;
                $scope.ProductCatCollection = response.data.Result.ProdCategories;
                $scope.SuspenceAccounts = response.data.Result.SuspenceAccounts;

                if ($scope.outletType == 1) {
                    $scope.Batch.PaymentType = 1;
                } else {
                    $scope.Batch.PaymentType = 2;
                }

                $scope.Batch.Sbu = 3;
                $scope.Batch.PaymentMethod = 10;
                $scope.Batch.ProdCat = 1;
                $scope.Batch.PaymentMode = 'CA';
                $scope.GetPaymentSourceByPaymentType();

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }

    //var receiptSample = [
    //    { Correction: '002', ConnectionReference: '001', Amount: '002', LineStatus: '002', Remarks: '002' }
    //];

    // Sorting payment source by payment type.
    $scope.GetPaymentSourceByPaymentType = function () {

        var payType = 0;
        payType = $scope.Batch.PaymentType;
        if (payType != null) {
            $scope.tempPaymentSource = [];
            angular.forEach($scope.PaymentSourceCollection, function (item) {
                if (payType == 0) {
                    $scope.tempPaymentSource.push({ "Id": item.Id, "Description": item.Description });
                }
                else if (item.PaymentType == payType) {
                    $scope.tempPaymentSource.push({ "Id": item.Id, "Description": item.Description });
                }
            });

            $scope.PaymentSources = $scope.tempPaymentSource;
        }

    };


    $scope.ChangeToSuspence = function () {
        $scope.IsGridDisable = true;
        $scope.IsVerifyBtnDisable = true;
        var TransferToSuspenseAmount = 0;
        var sucObj = $filter('filter')($scope.SuspenceAccounts,
                                    {
                                        Sbu: $scope.Batch.Sbu,
                                        PaySource: $scope.Batch.PaymentSource,
                                        PayType: $scope.Batch.PaymentType
                                    });

        if (sucObj.length == 0) {
            toaster.error({ type: 'error', title: 'Error', body: 'Suspense Account not found! Contact administrator.', showCloseButton: true });
        }
        else {
            var SusAccount = sucObj[0].AccountNo;
            if ($scope.GridData.length > 0) {
                $scope.Batch.transferToSuspense = 0;
                $scope.Batch.transferToSuspenseAmount = Number(0).toFixed(2);


                $scope.request = {
                    BatchId: $scope.Batch.BatchId,
                    Sbu: $scope.Batch.Sbu,
                    ProdCat: $scope.Batch.ProdCat,
                    SusAccount: SusAccount,
                    Data: $scope.GridData,
                    NoOfTransfers: $scope.Batch.transferToSuspense,
                    TotalTransfers: $scope.Batch.transferToSuspenseAmount
                };

                BatchProcessPaymentsService.PostChangeToSuspence($scope.request).then(function (response) {
                    if (response.data.Code == "0") {

                        angular.forEach($scope.GridData, function (item) {
                            item.Remarks = item.ConnectionReference;
                            item.ConnectionReference = SusAccount;
                            item.LineStatus = 'SUCCESS';
                            TransferToSuspenseAmount = TransferToSuspenseAmount + parseFloat(item.Amount);
                        });

                        $scope.Batch.transferToSuspenseAmount = Number(TransferToSuspenseAmount).toFixed(2);
                        $scope.dgGridBatchProcess.dataSource.data($scope.GridData);
                        $scope.Batch.transferToSuspense = $scope.GridData.length;
                        $scope.ISaveBtnDisable = false;


                        toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
                    } else {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        $scope.IsGridDisable = false;
                        $scope.IsVerifyBtnDisable = false;
                    }
                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });


            }
        }

    };

    $scope.ReVerify = function () {
        $scope.IsVerifyBtnDisable = true;
        if ($scope.GridData.length > 0) {
            var BatchId = $scope.Batch.BatchId;

            BatchProcessPaymentsService.ReVerify(BatchId).then(function (response) {
                if (response.data.Code == "0") {
                    $scope.GetBatchProcessDetails();
                    toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    $scope.IsVerifyBtnDisable = false;
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });


        }

    };

    // ------------------------ Grid --------------------

    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };


    var configBatchProcess = {};
    var configBatchProcess = {
        columns: [
                     {
                         field: "Correction",
                         headerTemplate: 'Correction',
                         headerAttributes: {
                             "class": "table-header",
                         },
                         template: '<button ng-click="CheckConnectionReference(this)" ng-disabled="IsGridDisable" class="btn btn-primary" type="button">Apply</button>',
                         width: "30px"
                     },
                     {
                         field: "ConnectionReference",
                         headerTemplate: 'Connection Reference',
                         template: '<input type ="text" ng-model="dataItem.ConnectionReference" ng-disabled="IsGridDisable" class="k-fill text-right conn-ref2 kk" />',
                         width: "50px"
                     },
                     { field: "Amount", title: "Amount", width: "30px" },
                     { field: "LineStatus", title: "Status", width: "50px" },
                     { field: "Remarks", title: "Remarks", width: "50px" }
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: false,
        scrollable: true
    };

    configBatchProcess.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'Correction': { editable: false, type: "string" },
                    'ConnectionReference': { editable: true, type: "string" },
                    'Amount': { editable: false, type: "string" },
                    'LineStatus': { editable: false, type: "string" },
                    'Remarks': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 10

    });

    $scope.dgGridBatchProcess = new DataGrid();
    $scope.dgGridBatchProcess.options(configBatchProcess);

    $scope.InitA = function (arg) {
        $scope.dgGridBatchProcess.Init(arg);
    };

    // -------------------------------------------------------------

    $scope.CheckConnectionReference = function (e) {
        if (e.dataItem == undefined) {
            toaster.error({ type: 'error', title: 'Error', body: "Invalid Connection Reference", showCloseButton: true });
            return;
        }

        if (e.dataItem.ConnectionReference) {
            $scope.request = {
                Id: e.dataItem.Id,
                Sbu: $scope.Batch.Sbu,
                ProdCat: $scope.Batch.ProdCat,
                ConnectionReference: e.dataItem.ConnectionReference
            };

            BatchProcessPaymentsService.CheckConnectionReference($scope.request).then(function (response) {
                if (response.data.Code == "0") {

                    //var index = $scope.GridData.findIndex(x => x.Id === $scope.request.Id);
                    //$scope.GridData.splice(index, 1);
                    //$scope.dgGridBatchProcess.dataSource.data($scope.GridData);

                    //if($scope.GridData.length = 0)
                    //{
                    //    $scope.ISaveBtnDisable = false;
                    //}
                    $scope.GetBatchProcessDetails();
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    $scope.GetBatchProcessDetails();
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        }

    }

    // --------------------------- Attachemnt ----------------------

    $scope.IsAttach = "NO";

    $scope.GenerateGuid = function () {
        var timestamp = +new Date;

        var ts = timestamp.toString();
        var parts = ts.split("").reverse();
        var id = "";

        for (var i = 0; i < 5; ++i) {
            var index = $scope.GenGuid(0, parts.length - 1);
            id += parts[index];
        }

        $scope.attachmentRef = id;
        return id;

    }

    $scope.GenGuid = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }


    $scope.$watch("referenceParams.TransactionId", function (newValue) {
        $scope.referenceParams = {
            moduleId: "BILLING-BATCH-PAYMENT-001",
            TransactionId: ($scope.Batch.BatchId == null || $scope.Batch.BatchId == "") ? $scope.tempRef : $scope.Batch.BatchId,
            isAttachedDoc: true,
            IsDisabled: true
        };
    });

    $scope.TransRef = [];
    $scope.referenceCallback = function (data) {
        console.log(data, 'call back');
        $scope.TransRef = data.TransactionReference;
        $scope.IsAttach = "YES";

    };

    // -------------------------------------------------------------------

    // -----------------------------------payment mode -----------------

    //Existing Reference Details
    $scope.findExistingRef = {
        title: "Existing Reference Finder",
        info: {
            appId: "ZBC-DCPOS",
            uiId: "POS-SRF-RBE-ER",
            mapId: "SRF-RBE-ER",
            modalId: "findExistingRef", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.Batch.ExistingReference = data.selectedItem.ReferenceNo;
        },
        open: function () {
            window._focuse(this.info.modalId);
            objTemp = [];
            objTemp.push($scope.userInfo().userId);
            objTemp.push("");
            objTemp.push($scope.Batch.PaymentMode);
            objTemp.push($scope.userInfo().outletCode);
            this.params = objTemp;


            this.info.onLoad = true;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //Payment Mode set
    $scope.SetPaymentMode = function () {
        var objTemp = new PaymentModeOptions();

        objTemp.Params = {};

        if (angular.isUndefined($scope.Batch.PaymentMode)) {
            return;
        }
        if ($scope.Batch.PaymentMode == PaymentModesTypes.Cash) {
            $scope.formdata = {
                PaymentMode: PaymentModesTypes.Cash,
                AppliedAmount: $scope.Batch.Amount,
                PaymentModeDescription: "Cash"
            };
            $scope.paymentModeCallBack($scope.formdata);
        }
        else {
            $scope.SelectedPaymentMode = $scope.Batch.PaymentMode;
            objTemp.PaymentMode = $scope.SelectedPaymentMode;
            objTemp.Callback = $scope.paymentModeCallBack;
            objTemp.Amount = $scope.Batch.Amount;

            $scope.Options = objTemp;
            $scope.alertMessagePaymode = new Message(MessageTypes.Empty);
        }

    };

    //Payment model call back
    $scope.paymentModeCallBack = function (data) {
        if ($scope.Batch.PaymentMode == PaymentModesTypes.eZCash) {
            $scope.Batch.ExistingReference = data.Request.EzcReference;
        } else {
            $scope.Batch.ExistingReference = data.ReferenceNo;
        }

        var objTemp = new PaymentModeOptions();

        $scope.SelectedPaymentMode = "50";
        objTemp.PaymentMode = "50";
        objTemp.MobileNo = new Date().getTime().toString();
        objTemp.Callback = $scope.paymentModeCallBack;

        $scope.Options = objTemp;

    }

    //------------------------------------------------------------------

    // -------------------------- File load ---------------------------

    $scope.uploadDocuments = function () {

        if (angular.element("input[type='file']").val() == "") {
            toaster.error({ type: 'error', title: 'Error', body: "Please select the upload file", showCloseButton: true });
            return;
        }

        $scope.uploadedData = [];
        var TotalAmount = 0;
        $scope.Batch.totalAmount = 0;
        $scope.Batch.records = 0;

        if ($scope.myFile != undefined) {
            if (fileUploadService.validateFile($scope.myFile.name)) {
                fileUploadService.BillingBatchProcessUpload($scope.myFile).then(function (response) {
                    $scope.uploadedData = response.data.Result;

                    angular.forEach(response.data.Result, function (item) {
                        TotalAmount = TotalAmount + parseFloat(item.Amount);
                    });

                    $scope.Batch.totalAmount = Number(TotalAmount).toFixed(2);;;
                    $scope.Batch.records = $scope.uploadedData.length;

                },
                    function (response) {
                        $scope.alertMessage = new Message(response.data.Code, response.data.Message);
                    });
            }
            else {
                toaster.error({ type: 'error', title: 'Error', body: "Invalide document type", showCloseButton: true });
            }



        } else {
            toaster.error({ type: 'error', title: 'Error', body: "Please select the upload file", showCloseButton: true });
        }

    };

    // ----------------------------------------------------------------

    // ---------------- Update and Verify ---------------------------


    $scope.PostUploadAndVerify = function () {

        if ($scope.Batch.PaymentMode == 'CHE') {
            if (!$scope.Batch.ExistingReference) {
                toaster.error({ type: 'error', title: 'Error', body: "Payment mode data not found please try again!", showCloseButton: true });
                return;
            }
        }


        $scope.request = {
            BatchId: $scope.Batch.BatchId,
            PaymentType: $scope.Batch.PaymentType,
            PaymentSource: $scope.Batch.PaymentSource,
            PaymentMethod: $scope.Batch.PaymentMethod,
            Sbu: $scope.Batch.Sbu,
            ProdCat: $scope.Batch.ProdCat,
            NoOfRecords: $scope.Batch.records,
            TotalAmount: $scope.Batch.totalAmount,
            Remarks: $scope.Batch.remarks,
            PaymentModeRef: $scope.Batch.ExistingReference,
            PaymentMode: $scope.Batch.PaymentMode,
            Data: $scope.uploadedData,
            AttachmentRef: $scope.attachmentRef
        };

        BatchProcessPaymentsService.PostUploadAndVerify($scope.request).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                $scope.Batch.BatchId = response.data.Result;
                $scope.GetBatchProcessDetails();
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });

            } else {

                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }

        }, function (response) {
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };


    // --------------------------------------------------------------


    $scope.saveBatchProcess = function () {

        $scope.request = {
            BatchId: $scope.Batch.BatchId,
        };

        BatchProcessPaymentsService.saveBatchProcess($scope.request).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                $scope.GetBatchProcessDetails();
                toaster.success({ type: 'success', title: 'Success', body: "Success, Receipt will generate and post sequentially.", showCloseButton: true });
                $scope.ISaveBtnDisable = true;
            } else {

                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }

        }, function (response) {
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    // ------------------------ Batch Details ------------------------
    $scope.finderBatchProcessPayments = {
        title: "Batch Finder",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BATCH-PROCESS",
            mapId: "BATCH-PROCESS-01",
            modalId: "finderBatchProcessPayments", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.Batch.BatchId = data.selectedItem.BatchId;
            $scope.GetBatchProcessDetails();
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };


    $scope.GetBatchProcessDetails = function () {
        var batchId = $scope.Batch.BatchId;

        if (batchId == undefined || batchId == "") {
            toaster.error({ type: 'error', title: 'Error', body: "Please enter batchId...!", showCloseButton: true });
            return;
        }

        BatchProcessPaymentsService.GetBatchProcessDetails(batchId).success(function (response) {
            $scope.changePageState('NEW');
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            } else {
                var result = response.Result;
                $scope.Batch.BatchId = result.BatchId;
                $scope.Batch.PaymentType = result.PaymentType;
                $scope.GetPaymentSourceByPaymentType()
                $scope.Batch.PaymentSource = result.PaymentSource;
                $scope.Batch.PaymentMethod = result.PaymentMethod;
                $scope.Batch.Sbu = result.Sbu;
                $scope.Batch.ProdCat = result.ProdCat;
                $scope.Batch.records = result.NoOfRecords;
                $scope.Batch.verifiedCount = result.VerifiedCount;
                $scope.Batch.totalAmount = Number(result.TotalAmount).toFixed(2);
                $scope.Batch.remarks = result.Remarks;
                $scope.Batch.PaymentMode = result.PaymentMode;
                $scope.Batch.uploadedDate = result.UploadedDate;
                $scope.Batch.uploadedUser = result.UploadedUser;
                $scope.Batch.savedDate = result.SavedDate;
                $scope.Batch.savedUser = result.SavedUser;
                $scope.Batch.status = result.Status;
                $scope.Batch.ExistingReference = result.PaymentModeRef;

                $scope.IsAttach = result.isAttach;
                if ($scope.IsAttach == "YES") {
                    $scope.referenceParams.TransactionId = result.BatchId;
                }

                $scope.Batch.transferToSuspense = result.NoOfTransfers;
                $scope.Batch.transferToSuspenseAmount = Number(result.TotalTransfers).toFixed(2);

                $scope.Batch.statusDes = ($scope.Batch.status == 1) ? "In-progress" : ($scope.Batch.status == 2) ? "Verified" : ($scope.Batch.status == 3) ? "Completed" : "";

                if ($scope.Batch.status != 1) {
                    $scope.GridData = response.Result.Data;
                    if ($scope.GridData != null && $scope.GridData.length > 0) {
                        $scope.dgGridBatchProcess.dataSource.data($scope.GridData);
                    }
                    else {
                        $scope.ISaveBtnDisable = false;
                    }
                }

                var dGrid = $scope.dgGridBatchProcess.dataSource.data();

                angular.forEach(dGrid, function (row) {
                    if (row.IsVerified == 3) {
                        $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //blue
                    }
                });

            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });

    }

    $scope.getVerifiedCount = function () {

        var batchId = $scope.Batch.BatchId;

        if (batchId == undefined || batchId == "") {
            toaster.error({ type: 'error', title: 'Error', body: "Please enter batchId...!", showCloseButton: true });
            return;
        }

        BatchProcessPaymentsService.GetVerifiedCount(batchId).success(function (response) {
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            } else {
                var result = response.Result;
                $scope.Batch.verifiedCount = result;
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });
    };


    $scope.changePageState = function (state) {
        debugger;
        if (state == "SEARCH") {

        }
        else if (state == "NEW") {
            console.log("new")
            $scope.dgGridBatchProcess.dataSource.data([]);
            $scope.Batch = {};
            $scope.uploadedData = [];
            $scope.Batch.totalAmount = "";
            $scope.Batch.records = "";
            $scope.Batch.transferToSuspense = "";
            $scope.Batch.transferToSuspenseAmount = "";
            $scope.Batch.ExistingReference = "";

            if ($scope.outletType == 1) {
                $scope.Batch.PaymentType = 1;
            } else {
                $scope.Batch.PaymentType = 2;
            }

            $scope.Batch.Sbu = 3;
            $scope.Batch.PaymentMethod = 10;
            $scope.Batch.ProdCat = 1;
            $scope.GetPaymentSourceByPaymentType();

            $scope.GridData = [];
            $scope.IsGridDisable = false;
            debugger;
            $scope.IsVerifyBtnDisable = false;
            $scope.ISaveBtnDisable = true;
            $scope.tempRef = $scope.GenerateGuid();

            $scope.Batch.PaymentMode = 'CA';
            var objTemp = new PaymentModeOptions();
            $scope.Options = objTemp;
            $scope.IsAttach = "NO";
            $scope.referenceParams.TransactionId = '';

            angular.element("input[type='file']").val(null);
        }
    };

    $scope.downloadSuspense = function () {
        var BatchId = $scope.Batch.BatchId;
        BatchProcessPaymentsService.GetSuspenseDetails(BatchId).then(function (response) {
            if (response.data.Code == "0") {
                debugger;
                if (response.data.Result > 0) {
                    if (appConfig.IsPostpaidCloud == 1) {
                        window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingSuspenseReport/" + BatchId, "_blank", '');
                    }
                    else {
                    PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { type: "BillingSuspenseReport", batchId: BatchId, Token: $scope.userInfo().token }, '_blank');
                    }


                } else {
                    toaster.success({ type: 'success', title: 'Success', body: "No Suspence Records to print", showCloseButton: true });

                }
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                $scope.IsVerifyBtnDisable = false;
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };
    
    

    // ------------------------------------------------------------


    $scope.PageLoad();
    $scope.tempRef = $scope.GenerateGuid();

}]);

angular.module("DialogBilling").controller('BillInvoiceCancellationController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "BillInvoiceCancellationService", function ($scope, Page, $routeParams, $filter, toaster, BillInvoiceCancellationService) {

    //Set Page Title
    Page.setTitle("Bill Invoice Cancellation"); 
    $scope.BillInvoiceCancellation = {}; 

    //============================
    // Mistake Done By dropdown
    $scope.OptionsMistakeDoneBy = [
      { text: "Customer", value: "1" },
      { text: "Cashier", value: "2" },
      { text: "Other", value: "3" }
    ];

    //===================================================================
    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations

    //////////====================== Bill Invoice Cancellation   ===================

    var configBillInvoiceCancellation = {};
    var configBillInvoiceCancellation = {
        columns: [
                   
                  
                    { field: "ReceiptStatus", title: "Receipt Status", width: "80px" },
                    { field: "ReceiptDate", title: "Receipt Date", width: "100px" },
                    { field: "ReceiptNumber", title: "Receipt Number", width: "150px" },
                    { field: "AccountNo", title: "Reference No", width: "100px" },
                    {
                        field: "CustomerName",
                        title: 'Customer Name',
                        width: "110px"
                    }, {
                        field: "BillInvoiceNo",
                        title: 'Bill Invoice No',
                        width: "110px"
                    },
                    {
                        field: "Amount", title: "Amount", width: "100px"
                    },
                    { field: "ReceiptGeneratedUser", title: "Receipt Generated User", width: "130px" }
                 
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configBillInvoiceCancellation.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'ReceiptStatus': { editable: false, type: "string" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptNumber': { editable: false, type: "number" },
                    'AccountNo': { editable: false, type: "number" },
                    'CustomerName': { editable: false, type: "string" },
                    'BillInvoiceNo': { editable: false, type: "boolean" },
                    'Amount': { editable: false, type: "boolean" },
                    'ReceiptGeneratedUser': { editable: false, type: "string" }
                    
                }
            }
        },
        pageSize: 10

    });

    $scope.dgGridBillInvoiceCancellation = new DataGrid();
    $scope.dgGridBillInvoiceCancellation.options(configBillInvoiceCancellation);

    $scope.InitA = function (arg) {
        $scope.dgGridBillInvoiceCancellation.Init(arg);
    };

    //======================   Bill Invoice Cancellation Finder      =====================

    $scope.BillInvoiceCancellationBatchID =
    {

        title: "Search by Bill Invoice Cancellation Batch ID",
        info: {
            appId: "ZBC-DCPOS",
            uiId: "POS-FLOAT-FLOATMSTER",
            mapId: "FLOAT-TRANSFER-FLOATMSTER",
            modalId: "BillInvoiceCancellationBatchID",
            onLoad: false

        },
        params: [],
        callback: function (data) {


        },
        open: function () {
            this.info.onLoad = true;

            //$scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };

    //============================================== 


}]);
angular.module("DialogBilling").controller('BillInvoicePaymentController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "BillInvoicePaymentService", "PrintService", "appConfig", "BulkPaymentService", "AuthService", function ($scope, Page, $routeParams, $filter, toaster, BillInvoicePaymentService, PrintService, appConfig, BulkPaymentService, AuthService) {
    Page.setTitle("Bill Invoice Payments");

    $scope.init = function () {
        $scope.BillInvoicePayment = {
            BatchID: "",
            ReceiptNo: "",
            AccountNo: "",
            ConnectionReference: "",
            CustName: "",
            invoiceDetailList: {},
            BatchDateandTime: "",
            TotalAmount: 0,
            ReceiptStatus: "",
            Remarks: "",
            TotalUnsettledAmount: 0,
            AdditionalAmount: 0,
            TotalPayAmount: 0,
            CustomerPayingAmount: 0,
            Balance: 0,
            PaymentMode: 0,
            sbu: 0,
            ProductCategory: 0,
            ExistingReference: "",
            ContractID: "",
            AccountType: "",
            ProductType: ""
        };
        $scope.disabled = {
            CancelButton: true,
            PrintButton: true,
            SaveButton: true,
            disableActiveFields: false,
            keyEnterFields: false
        };
        $scope._ReceiptStatus = {
            1: "Valid",
            2: "Pending",
            4: "Cancelled"
        }
    }
    $scope.init();

    $scope.changePageState = function (InterfaceState) {
        if (InterfaceState == 'NEW') {
            $scope.init();
            $scope.ResetPaymantModeDerective();
            $scope.dgGridBillInvoicePayment.data([]);
            toaster.clear();
        }
    }

    $scope.PageLoad = function () {
        BillInvoicePaymentService.GetBIPaymentModes().then(function (response) {
            _PaymentModeCollection = response.data.Result.BillingPaymentMode;
            var index = _PaymentModeCollection.indexOf(_PaymentModeCollection[0]);
            _PaymentModeCollection.splice(index, 1);

            $scope.PaymentModeCollection = _PaymentModeCollection;
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    }

    $scope.PageLoad();

    $scope.GetAccountNo = function (keyEvent) {
        
        if (keyEvent.which === 13) {
            BillInvoicePaymentService.PostForGetCxInvoiceDetails({ queryType: "CONTRACT", queryValue: $scope.BillInvoicePayment.AccountNo, isSettledUnsettled: "UNSETTLED" })
                .success(function (response) {
                    if (response.Result.invoiceDetailList.length == 0) {
                        toaster.error({ type: 'error', title: 'Error', body: "CCBS API Error:" + response.Result.errorCode + " " + response.Result.errorDesc, showCloseButton: true });
                        return;
                    }

                    if (response.Code != MessageTypes.Success) {
                        toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                        return;
                    } else {
                        $scope.changePageState('NEW');

                        $scope.disabled = {
                            keyEnterFields: true,
                            CancelButton: true,
                            PrintButton: true,
                            SaveButton: false
                        }

                        $scope.dgGridBillInvoicePayment.data(response.Result.invoiceDetailList);
                        $scope.BillInvoicePayment.AccountNo = response.Result.accountNo;
                        $scope.BillInvoicePayment.CustName = response.Result.custName;
                        $scope.BillInvoicePayment.AccountNo = response.Result.accountNo;
                        $scope.BillInvoicePayment.ProductCategory = response.Result.productCategory;
                        $scope.BillInvoicePayment.sbu = response.Result.sbu;
                        $scope.BillInvoicePayment.AccountType = response.Result.accountType;
                        $scope.BillInvoicePayment.ProductType = response.Result.productType;
                        $scope.BillInvoicePayment.ContractID = response.Result.contractID;
                    }

                }).error(function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.errorDesc, showCloseButton: true }); return;
                });
        }
    }

    $scope.GetConnectionReference = function (keyEvent) {
        var ConnectionReference_ = $scope.BillInvoicePayment.ConnectionReference;

        if (keyEvent.which === 13) {
            BillInvoicePaymentService.PostForGetCxInvoiceDetails({ queryType: "CONN_REF", queryValue: $scope.BillInvoicePayment.ConnectionReference, isSettledUnsettled: "UNSETTLED" }).success(function (response) {

                if (response.Result.invoiceDetailList.length == 0) {
                    toaster.error({ type: 'error', title: 'Error', body: "API Error:" + response.Result.errorCode +" "+ response.Result.errorDesc, showCloseButton: true });
                    return;
                }

                if (response.Code != MessageTypes.Success) {
                    toaster.error({ type: 'error', title: 'Error', body: response.errorDesc, showCloseButton: true });
                    return;
                } else {
                    $scope.changePageState('NEW');

                    $scope.disabled = {
                        keyEnterFields: true,
                        CancelButton: true,
                        PrintButton: true,
                        SaveButton: false
                    }

                    $scope.dgGridBillInvoicePayment.data(response.Result.invoiceDetailList);
                    $scope.BillInvoicePayment.AccountNo = response.Result.accountNo;
                    $scope.BillInvoicePayment.CustName = response.Result.custName;
                    $scope.BillInvoicePayment.AccountNo = response.Result.accountNo;
                    $scope.BillInvoicePayment.ProductCategory = response.Result.productCategory;
                    $scope.BillInvoicePayment.sbu = response.Result.sbu;
                    $scope.BillInvoicePayment.ContractID = response.Result.contractID;
                    $scope.BillInvoicePayment.AccountType = response.Result.accountType;
                    $scope.BillInvoicePayment.ProductType = response.Result.productType;
                    $scope.BillInvoicePayment.ConnectionReference = ConnectionReference_;
                }
            }).error(function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
            });
        }


    }

    //  #####################       Payment mode        ##################################
    var objTemp = new Array();
    $scope.ResetPaymantModeDerective = function () {
        $scope.BillInvoicePayment.PaymentMode = "CA";
        $scope.SelectedPaymentMode = $scope.BillInvoicePayment.PaymentMode;
        objTemp.PaymentMode = $scope.SelectedPaymentMode;
        objTemp.MobileNo = "";
        objTemp.Callback = $scope.paymentModeCallBack;
        objTemp.CustomerRef = "";
        objTemp.Amount = $scope.BillInvoicePayment.TotalPayAmount;
        objTemp.ItemSbu = "";
        $scope.Options = objTemp;
    }
    $scope.ResetPaymantModeDerective();

    $scope.paymentModeCallBack = function (data) {
        if (data.ReferenceNo == undefined) {
            if (data[0].GVValue >= $scope.BillInvoicePayment.TotalPayAmount) {
                $scope.BillInvoicePayment.ExistingReference = data[0].ReferenceNo;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: "", showCloseButton: true });
            }
        } else {
            $scope.BillInvoicePayment.ExistingReference = data.ReferenceNo;
        }
    }


    $scope.SetPaymentMode = function () {
        $scope.Options = {
            Amount: $scope.BillInvoicePayment.TotalPayAmount,
            CustomerRef: "",
            ItemSbu: $scope.BillInvoicePayment.sbu,
            MobileNo: "",
            Params: { InvoiceNo: "" },
            PaymentDetailsRefCollection: null,
            Callback: $scope.paymentModeCallBack,
            PaymentMode: $scope.BillInvoicePayment.PaymentMode,
        }
    }
    //  #####################       Payment mode        ##################################

    $scope.selectThis = function (event) {
        $scope.disabled.SaveButton = false;
        if ($scope.BillInvoicePayment.AdditionalAmount < 0) {
            $scope.BillInvoicePayment.AdditionalAmount = 0;
        }

        var selectedCount = 0;
        var list = $scope.dgGridBillInvoicePayment.data();
        for (var i = 0; i < list.length; i++) {
            if (list[i].isSelected) {
                selectedCount += 1;
            }
        }

        if (selectedCount > 3) {
            toaster.error({ type: 'error', title: 'Error', body: "Maximum no of records can be selected is 3", showCloseButton: true });
            $scope.disabled.SaveButton = true;
            return;
        }

        $scope.BillInvoicePayment.TotalUnsettledAmount = 0;
        for (var i = 0; i < list.length; i++) {
            if (list[i].isSelected) {
                $scope.BillInvoicePayment.TotalUnsettledAmount += list[i].unsettledAmount;
            }
        }
        $scope.CalculateAdditionalAmount();

        //set default values
        $scope.BillInvoicePayment.Balance = 0;
    }

    $scope.IsTotalPayAmountIncorrect = false;
    $scope.CalculateAdditionalAmount = function () {
        $scope.BillInvoicePayment.AdditionalAmount = 0

        if ($scope.BillInvoicePayment.TotalPayAmount - $scope.BillInvoicePayment.TotalUnsettledAmount > 0) {
            $scope.BillInvoicePayment.AdditionalAmount = $scope.BillInvoicePayment.TotalPayAmount - $scope.BillInvoicePayment.TotalUnsettledAmount;
            $scope.IsTotalPayAmountIncorrect = false;
        } else {
            $scope.IsTotalPayAmountIncorrect = true;
        }

        $scope.CalculateBalance();
    }

    $scope.CalculateBalance = function () {
        if ($scope.BillInvoicePayment.CustomerPayingAmount - $scope.BillInvoicePayment.TotalPayAmount > 0) {
            $scope.BillInvoicePayment.Balance = $scope.BillInvoicePayment.CustomerPayingAmount - $scope.BillInvoicePayment.TotalPayAmount;
        } else {
            $scope.BillInvoicePayment.Balance = 0;
        }
    }


    $scope.PostBillData = function () {
        $scope.disabled.SaveButton = true;

        if ($scope.IsTotalPayAmountIncorrect) {
            toaster.error({ type: 'error', title: 'Error', body: "Total Amount should be equal or greater than the Total Pay Amount", showCloseButton: true });
            $scope.disabled.SaveButton = false;
            return;
        }

        if ($scope.BillInvoicePayment.TotalPayAmount == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Please Enter Total Pay Amount", showCloseButton: true });
            $scope.disabled.SaveButton = false;
            return;
        }
        
        if ($scope.BillInvoicePayment.PaymentMode != "CA") {
            if ($scope.BillInvoicePayment.ExistingReference=="") {
                toaster.error({ type: 'error', title: 'Error', body: "Please Select Payment Reference Details", showCloseButton: true });
                $scope.disabled.SaveButton = false;
                return;
            }
        }       
        
        if ($scope.BillInvoicePayment.AccountType != "2") {
            toaster.error({ type: 'error', title: 'Error', body: "API Error: wrong account type", showCloseButton: true });
            $scope.disabled.SaveButton = false;
            return;
        }        

        var OutletCode = $scope.userInfo().outletCode;
        var AddedUser = $scope.userInfo().userId;

        var invoiceNumberList = [];
        var invoiceList = [];

        for (var i = 0; i < $scope.dgGridBillInvoicePayment.data().length; i++) {
            if ($scope.dgGridBillInvoicePayment.data()[i].isSelected) {
                invoiceNumberList.push($scope.dgGridBillInvoicePayment.data()[i].invoiceNumber);
                invoiceList.push({
                    invoiceNumber: $scope.dgGridBillInvoicePayment.data()[i].invoiceNumber,
                    billDate: $scope.dgGridBillInvoicePayment.data()[i].billDate,
                    fomatedBillDate: $scope.dgGridBillInvoicePayment.data()[i].billDate,
                    billSequence: $scope.dgGridBillInvoicePayment.data()[i].billSequence,
                    invoiceAmount: $scope.dgGridBillInvoicePayment.data()[i].invoiceAmount,
                    settledAmount: $scope.dgGridBillInvoicePayment.data()[i].settledAmount,
                    unsettledAmount: $scope.dgGridBillInvoicePayment.data()[i].unsettledAmount,
                });
            }
        }

        var _BatchRec = [{
            "AccountNo": $scope.BillInvoicePayment.AccountNo,
            "AddedUser": AddedUser,
            "Amount": $scope.BillInvoicePayment.TotalPayAmount,
            "BalanceAmt": null,
            "ConnectionRef": $scope.BillInvoicePayment.ConnectionReference,
            "ConnectionType": null,
            "ContactNo": null,
            "ContractEmail": null,
            "ContractId": $scope.BillInvoicePayment.ContractID,
            "CustAddress": null,
            "CustName": $scope.BillInvoicePayment.CustName,
            "CustomerIDNumber": null,
            "CustRef": null,
            "IsSuspense": null,
            "OldNIC": null,
            "OutletCode": OutletCode,
            "PaymentMethod": "10",
            "PaymentMode": $scope.BillInvoicePayment.PaymentMode,
            "PaymentModeRef": $scope.BillInvoicePayment.ExistingReference,
            "prEmail": null,
            "PrePostType": $scope.BillInvoicePayment.AccountType,
            "ProdType": $scope.BillInvoicePayment.ProductType,
            "ReceiptStatus": "1",
            "ReconFee": null,
            "RefNo": null,
            "Remarks": $scope.BillInvoicePayment.Remarks,
            "SbuCode": $scope.BillInvoicePayment.sbu,
            "TotalOutstanding": null,
            "TransferBatchId": null,
            "Transferred": 2,
            "transferredMode": null,
            "transferredNo": null,
            "TransferredType": null,
            "CustomerIDType": null
        }];

        var postingObj = {
            OutletCode: OutletCode,
            PaymentType: null,
            PaymentSource: null,
            BatchTotal: $scope.BillInvoicePayment.TotalPayAmount,
            Remarks: $scope.BillInvoicePayment.Remarks,
            AttachmentRef: null,
            AddedUser: AddedUser,
            ProdCat: $scope.BillInvoicePayment.ProductCategory,
            usertype: null,
            sourceip: null,
            tempattachmentref: null,
            transferbatchid: null,
            cancelledbatchid: null,
            SbuCode: $scope.BillInvoicePayment.sbu,
            BatchRec: _BatchRec,
            IsBillingRec: false,
            invoiceNumberList: invoiceNumberList.join(),
            invoiceList: JSON.stringify(invoiceList)
        }

        BillInvoicePaymentService.PostBatchDetails(postingObj).success(function (response) {
            $scope.disabled.disableActiveFields = true;
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
                $scope.disabled.SaveButton = false;
                $scope.disabled.disableActiveFields = false;
                return;
            } else {
                toaster.success({ type: 'Success', title: 'Success', body: response.Message, showCloseButton: true });
                $scope.disabled = {
                    CancelButton: false,
                    PrintButton: false,
                    SaveButton: true
                }

                $scope.BillInvoicePayment.BatchID = response.Result.BatchID;
                $scope.BillInvoicePayment.BatchDateandTime = response.Result.Date;
                $scope.BillInvoicePayment.ReceiptStatus = $scope._ReceiptStatus[1];
                $scope.BillInvoicePayment.TotalAmount = $scope.BillInvoicePayment.TotalPayAmount;

                BulkPaymentService.GetBatchDetails($scope.BillInvoicePayment.BatchID).then(function (response) {
                    $scope.BillInvoicePayment.ReceiptNo = response.data.Result.BatchReceipt[0].ReceiptNo;
                }, function (response) {
                    $scope.disabled.SaveButton = false;
                    $scope.disabled.disableActiveFields = false;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            }
        }).error(function (response) {

            $scope.disabled.SaveButton = false;
            $scope.disabled.disableActiveFields = false;
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });
    }

    $scope.clearConRef = function () {
        $scope.BillInvoicePayment.ConnectionReference = '';
    }

    //===================================================================
    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations
    var d1 = {};
    var configBillInvoicePayment = {};
    var configBillInvoicePayment = {
        columns: [
            {
                field: "isSelected",
                headerTemplate: '',
                template: '<input type="checkbox" ng-disabled="disabled.disableActiveFields" ng-click="selectThis($event)" ng-model="dataItem.isSelected" ng-disabled="dataItem.row"/>',
                width: "32px"
            },
            {
                field: "invoiceNumber",
                title: "Invoice No",
                width: "100px"
            },
            {
                field: "fomatedBillDate",
                title: "Invoice Date",
                width: "100px"
            },

            {
                field: "billSequence",
                title: 'Bill Sequence',
                width: "110px"
            }, {
                field: "invoiceAmount",
                title: 'Invoice Amount',
                width: "110px"
            },
            {
                field: "settledAmount", title: "Settled Amount", width: "100px"
            },
            {
                field: "unsettledAmount", title: "Unsettled Amount", width: "100px"
            },
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configBillInvoicePayment.dataSource = new kendo.data.DataSource({
        data: [d1],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'isSelected': { editable: false, type: "boolean" },
                    'invoiceNumber': { editable: false, type: "number" },
                    'billDate': { editable: false, type: "date" },
                    'billSequence': { editable: false, type: "string" },
                    'invoiceAmount': { editable: false, type: "number" },
                    'settledAmount': { editable: false, type: "number" },
                    'unsettledAmount': { editable: false, type: "number" },
                    'fomatedBillDate': { editable: false, type: "date" }
                }
            }
        },
        pageSize: 10

    }); 

    $scope.dgGridBillInvoicePayment = new DataGrid();
    $scope.dgGridBillInvoicePayment.options(configBillInvoicePayment);

    $scope.InitA = function (arg) { 
        $scope.dgGridBillInvoicePayment.Init(arg);
    };
    //================================================================================

    //======================   Bill Invoice Batch ID Finder      =====================
    $scope.BillInvoiceBatchID = {
        title: "Bill Invoice Payments Finder",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILL-INVOICE-PAYMENT-001",
            mapId: "BILL-INVOICE-PAYMENT-001",
            modalId: "findBillInvoiceBatch", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],
        callback: function (data) {
            BillInvoicePaymentService.GetBatchDetailsById(data.selectedItem.BatchId).then(function (response) {
                $scope.BillInvoicePayment = {
                    BatchID: response.data.Result.BatchId,
                    ReceiptNo: response.data.Result.BatchReceipt[0].ReceiptNo,
                    AccountNo: response.data.Result.BatchReceipt[0].accountNo,
                    ConnectionReference: response.data.Result.BatchReceipt[0].ConnectionReference,
                    CustName: response.data.Result.BatchReceipt[0].CustomerName,
                    invoiceDetailList: {},
                    BatchDateandTime: response.data.Result.BatchDate,
                    TotalAmount: response.data.Result.TotalAmount,
                    ReceiptStatus: $scope._ReceiptStatus[response.data.Result.BatchReceipt[0].Cancel],
                    Remarks: response.data.Result.Remarks,
                    TotalUnsettledAmount: 0,
                    AdditionalAmount: 0,
                    TotalPayAmount: response.data.Result.TotalAmount,
                    CustomerPayingAmount: 0,
                    Balance: 0,
                    PaymentMode: response.data.Result.BatchReceipt[0].PaymentMode,
                    sbu: 0,
                    ProductCategory: 0,
                    ExistingReference: "",
                    ContractID: "",
                    AccountType: "",
                    ProductType: ""
                };


                var invoiceArray = JSON.parse(response.data.Result.BillRecNos);
                if (invoiceArray != undefined) {
                    $scope.dgGridBillInvoicePayment.data(invoiceArray);
                } else {
                    $scope.dgGridBillInvoicePayment.data([]);
                }
                $scope.disabled.disableActiveFields = true;
                $scope.disabled.PrintButton = false;
                $scope.disabled.SaveButton = true;
                if($scope.BillInvoicePayment.ReceiptStatus == "Valid")
                {
                    $scope.disabled.CancelButton = false;
                } else {
                    $scope.disabled.CancelButton = true;
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        },
        open: function () {
            window._focuse(this.info.modalId);
            objTemp = [];
            objTemp.push($scope.userInfo().userId);
            objTemp.push("");
            objTemp.push($scope.BillInvoicePayment.PaymentMode);
            objTemp.push($scope.userInfo().outletCode);
            this.params = objTemp;
            this.info.onLoad = true;
            $("#" + this.info.modalId).modal('show');
        }
    };



    $scope.printReceipt = function (obj) {
        PrintService.OpenPrint('POST',
            appConfig.REPORT_URL + 'ReportViewer.aspx',
            {
                PrintType: "2",
                Outlet: $scope.userInfo().outletCode,
                type: "BillInvoicePayment",
                batchId: $scope.BillInvoicePayment.BatchID,
                userId: $scope.userInfo().userId,
                WithSerial: false,
                Token: $scope.userInfo().token
            }, '_blank');
    };

    $scope.CancelSingleReceipt = function (e) {
        var permissionCodes = AuthService.getProfile().permission;
        if (permissionCodes.indexOf("50104") == -1) {
            toaster.error({ type: 'error', title: 'Error', body: 'You have not enough permission to continue.!', showCloseButton: true });
            return;
        }

        $scope.recObj = {
            'BatchId': $scope.BillInvoicePayment.BatchID,
            'BatchDate': $scope.BillInvoicePayment.BatchDateandTime,
            'TotalAmt': $scope.BillInvoicePayment.TotalAmount,
            'RecCollection': [{
                Amount: $scope.BillInvoicePayment.TotalAmount,
                ContractNo: $scope.BillInvoicePayment.ContractID,
                ConnectionReference: $scope.BillInvoicePayment.ConnectionReference,
                IsSelected: true,
                PaymentMethod: "Payment Received",
                PaymentMethodId: 10,
                PaymentMode: $scope.BillInvoicePayment.PaymentMode,
                PaymentModeId: $scope.BillInvoicePayment.PaymentMode,
                PrePost: "Post",
                ProductType: $scope.BillInvoicePayment.ProductType,
                ReceiptDate: $scope.BillInvoicePayment.BatchDateandTime,
                ReceiptGeneratedUser: $scope.userInfo().userId,
                ReceiptNumber: $scope.BillInvoicePayment.ReceiptNo,
                ReceiptStatus: $scope.BillInvoicePayment.ReceiptStatus,
                ReferenceNo: null,
                SBU: "send SBU code and get SBU name",
                SbuCode: $scope.BillInvoicePayment.sbu,

                PaymentSource: "",
                PaymentSourceId: "",
                PaymentType: "",
                PaymentTypeId: ""
            }]
        };
        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentCancellation";
    }



    $scope.findExistingRef = {
        title: "Existing Reference Finder",
        info: {
            appId: "ZBC-DCPOS",
            uiId: "POS-SRF-RBE-ER",
            mapId: "SRF-RBE-ER",
            modalId: "findExistingRef", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.BillInvoicePayment.TotalPayAmount = data.selectedItem.Amount;
            $scope.BillInvoicePayment.ExistingReference = data.selectedItem.ReferenceNo;
            $scope.NewExistingReference = data.selectedItem.ReferenceNo;
            $scope.paymentModeCallBack({ 'ReferenceNo': data.selectedItem.ReferenceNo });
        },
        open: function () {
            window._focuse(this.info.modalId);
            objTemp = [];
            objTemp.push($scope.userInfo().userId);
            objTemp.push("");
            objTemp.push($scope.BillInvoicePayment.PaymentMode);
            objTemp.push($scope.userInfo().outletCode);
            this.params = objTemp;

            this.info.onLoad = true;
            $("#" + this.info.modalId).modal('show');
        }
    };

}]);
/*
Bulk Excel Verification Modal Directive

*/

angular.module("DialogBilling").directive("bulkExcelVerification", ["bulkExcelVerificationService", "fileUploadService", "$filter", "$cookies", function (bulkExcelVerificationService, fileUploadService, $filter, $cookieStore) {
    return {
        restrict: "E",
        replace: true, 
        scope: {
            params: "=",
            callback: "&",
            data: "@",
            title: "@"
        },
        templateUrl: "./Views/Common/bulkExcelVerification.html",
        controller: ["$scope", "$attrs", "toaster", "AuthService", function ($scope, $attrs, toaster, AuthService) {

            var permissionCodes = AuthService.getProfile().permission;
            if (permissionCodes.indexOf("41001") == -1) {
                $scope.IsBackOfficeUser = false;
            } else {
                $scope.IsBackOfficeUser = true;
            }

            //Init
            $scope.RowsId = 1;
            $scope.isSendRequest = false;
            $scope.UploadSumarry = {};
            $scope.UploadSumarry.NoOfTotalRec=0;
            $scope.UploadSumarry.SuspenseCount = 0;
            $scope.UploadSumarry.TotalValiedAmt1 = Number(0).toFixed(2);
            $scope.UploadSumarry.SuspenseAmt = Number(0).toFixed(2);

            $scope.SelectedPaymentSource = "";
            $scope.SelectedPaymentType = "";
            $scope.suspenseAccId = "";
            $scope.bulkExcel = {};
            $scope.SubmitToBulkPaymentButtonDisabled = true;
            $scope.ChangeToSuspenseBtnDisabled = true;
            $scope.VerifyButtonDisabled = true;
            //watch params and initiate directives
            $scope.$watchCollection("params", function (_val) {
                console.log("params", _val);
                $scope.dgGridInvalidPayments.data([]);
                $scope.dgGridAllPayments.data([]);

                if ($scope.params.onLoad) {
                    init();
                }

                $scope.RowsId = 1;
                $scope.isSendRequest = false;
                $scope.UploadSumarry = {};
                $scope.UploadSumarry.NoOfTotalRec = 0;
                $scope.UploadSumarry.SuspenseCount = 0;
                $scope.UploadSumarry.TotalValiedAmt1 = Number(0).toFixed(2);
                $scope.UploadSumarry.SuspenseAmt = Number(0).toFixed(2);

                var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                if (defaultDataCookieObj != null) {
                    {
                        if (_val.BulkExcelPaymentObjectCollection == undefined) {
                            return;
                        }
                        $scope.bulkExcel.PaymentType = defaultDataCookieObj.BillingPaymentType.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentType, { Id: _val.BulkExcelPaymentObjectCollection.PaymentType })[0].Description : "";
                        $scope.bulkExcel.Sbu = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: _val.BulkExcelPaymentObjectCollection.Sbu })[0].Description : "";
                        $scope.bulkExcel.PaymentSource = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: _val.BulkExcelPaymentObjectCollection.PaymentSource })[0].Description : "";
                        $scope.SelectedPaymentSource = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: _val.BulkExcelPaymentObjectCollection.PaymentSource })[0].Id : "";
                       
                        $scope.bulkExcel.PaymentMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Id: _val.BulkExcelPaymentObjectCollection.PaymentMethod })[0].Description : "";
                        $scope.bulkExcel.ProductCat = defaultDataCookieObj.BillingProdCat.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingProdCat, { Id: _val.BulkExcelPaymentObjectCollection.ProductCat })[0].Description : "";
                        $scope.AccountTypeCollection = defaultDataCookieObj.BillingSusAcc;

                    }
                }
            });

            $scope.$watchCollection("data", function (_val) {
                $scope.dgGridAllPayments.data();
                $scope.dgGridInvalidPayments.data();

            });

            ///////////////////

            //@@@@@@@@@@@@@@@@@@@@@@@@@@


            //-> Grid Sample data for demo purposes

            var bulkExcelVerificationSample = [
                { IsSelected: 'a', ID: '002', ConnectionReference: '001', ContractNumber: '001', PayAmount: '002', Reference: '002', Remarks: '002' }

            ];

            var bulkExcelVerificationSample2 = [
               { IsSelected: 'a', ID: '002', ApplyCorrection: '002', ConnectionReference: '001', ContractNumber: '001', PayAmount: '002', Reference: '002', Remarks: '002' }

            ];


            //@@@@@@@@@@@@@@@@@@@@@@@@@@

            //-> Grid Start
            var commonGridConfig = {
                input: true,
                numeric: false,
                pageSize: 10,
                pageSizes: [15, 50, 75, 100]
            };

            var configAllPayments = {};
            var configAllPayments = {
                columns: [
                    //{
                    //    field: "IsSelected", headerTemplate: '<input type="checkbox" title="Select all" ng-click="toggleSelect($event)" ng-model="IsSelectedAll"/>', template: '<input type="checkbox" ng-click="selectThis($event)" ng-model="dataItem.IsSelected" />', width: "32px"
                    //},
                    //{ field: "ID", title: "No", width: "32px" },
                    { field: "ConnectionReference", title: "Connection Reference", width: "80px" },
                    { field: "ContractNumber", title: "Contract Number", width: "80px" },
                    { field: "PrePostDesc", title: "Pre/Post", width: "40px" },
                    { field: "Amount", template: "{{dataItem.Amount|number:2}}", attributes: { style: "text-align:right;" }, title: "Pay Amount", width: "60px" },
                    { field: "ReferenceNumber", title: "Reference", width: "80px" },
                    { field: "Remarks", title: "Remarks", width: "120px" }

                ],


                pageable: commonGridConfig,
                navigatable: true,
                editable: "inline", sortable: true,
                scrollable: true



            };

            configAllPayments.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        id: "ID",
                        fields: {
                            'IsSelected': { editable: false, type: "boolean" },
                            'RowId': { editable: false, type: "number" },
                            'SBU': { editable: false, type: "number" },
                            'PrePost': { editable: false, type: "string" },
                            'Hybrid': { editable: false, type: "string" },
                            'ConnectionReference': { editable: false, type: "number" },
                            'ContractNumber': { editable: false, type: "number" },//ContractNumber
                            'CustomerName': { editable: false, type: "string" },//CustomerName
                            'CustomerIDType': { editable: false, type: "string" },
                            'DisconnectedCode': { editable: false, type: "string" },
                            'SwitchStatus': { editable: false, type: "string" },                            
                            'DisconnectedReason': { editable: false, type: "string" },
                            'BillingCycle': { editable: false, type: "string" },
                            'PRCode': { editable: false, type: "string" },
                            'PREmail': { editable: false, type: "string" },
                            'ContractEmail': { editable: false, type: "string" },
                            'CustomerIDNumber': { editable: false, type: "string" },
                            'OldNIC': { editable: false, type: "string" },
                            'AccountNo': { editable: false, type: "string" },
                            'Amount': { editable: false, type: "number" },
                            'Remarks': { editable: false, type: "number" },
                            'IsSuspend': { editable: false, type: "boolean" },
                            'PrePostDesc':{ editable: false, type: "string" },
                            'SBUDesc': { editable: false, type: "string" },
                            'ContactNo': { editable: false, type: "string" },
                            'ProductType': { editable: false, type: "string" },
                            'ReferenceNumber': { editable: false, type: "string" },

                            'ProductTypeDesc': { editable: false, type: "string" },
                            'PaymentMethod': { editable: false, type: "string" },
                            'SwitchStatusDesc': { editable: false, type: "string" },
                        }
                    }
                },
                pageSize: 10
            });

            var configInvalidPayments = {};
            var configInvalidPayments = {
                columns: [
                    //{
                    //    field: "IsSelected",
                    //    headerTemplate: '<input type="checkbox" title="Select all"   />',
                    //    template: '<input type="checkbox"   />',
                    //    width: "32px"

                    //},
                    //{ field: "ID", title: "No", width: "32px" },
                    {
                        field: "ApplyCorrection",
                        headerTemplate: 'Apply Correction',
                        template: '<button class="btn btn-xs btn-info"  ng-disabled="dataItem.bulkExcelDisabled"  ng-click="ExcelVerifycationSingle(this)"><i class="glyphicon glyphicon-ok"></i></button>',
                        width: "100px"
                    },
                    {
                        field: "ConnectionReference",
                        headerTemplate: 'Connection Reference',
                        template: '<input type ="text"  ng-disabled="dataItem.bulkExcelDisabled" ng-model="dataItem.ConnectionReference" next-focus class="k-fill text-right"/>',
                        width: "130px"
                    },
                   {
                       field: "ContractNumber", title: "Contract Number",
                       headerTemplate: 'Contract Number',
                       template: '<input type ="text" ng-disabled="dataItem.bulkExcelDisabled" ng-model="dataItem.ContractNumber" next-focus class="k-fill text-right" />',
                       width: "130px"
                   },
                    //{ field: "Amount", template: "{{dataItem.Amount|number:2}}", attributes: { style: "text-align:right;" }, title: "Pay Amount", width: "80px" },
                    {
                        field: "Amount", title: "Pay Amount",
                        headerTemplate: 'Pay Amount',
                        template: '<input type ="text"  ng-disabled="dataItem.bulkExcelDisabled" ng-model="dataItem.Amount" kendo-numeric-text-box next-focus class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                        width: "130px"
                    },
                    {
                        field: "ReferenceNumber",
                        headerTemplate: 'Reference Number',
                        template: '<input type ="text" ng-disabled="dataItem.bulkExcelDisabled"  ng-model="dataItem.ReferenceNumber" text-box next-focus class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                        width: "120px"
                    },
                    {
                        field: "Remarks",
                        headerTemplate: 'Remarks',
                        template: '<input type ="text"  ng-disabled="dataItem.bulkExcelDisabled" ng-model="dataItem.Remarks" next-focus class="k-fill text-right"    />',
                        width: "100px"
                    }
                ],

                pageable: commonGridConfig,
                navigatable: true,
                editable: "inline",
                scrollable: true


            };

            configInvalidPayments.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        id: "ID",
                        fields: {
                            'IsSelected': { editable: false, type: "boolean" },
                            'RowId': { editable: false, type: "number" },
                            'ApplyCorrection': { editable: false, type: "string" },
                            'SBU': { editable: false, type: "number" },
                            'PrePost': { editable: false, type: "string" },
                            'Hybrid': { editable: false, type: "string" },
                            'ConnectionReference': { editable: false, type: "number" },
                            'ContractNumber': { editable: false, type: "number" },//ContractNumber
                            'CustomerName': { editable: false, type: "string" },//CustomerName
                            'CustomerIDType': { editable: false, type: "string" },
                            'DisconnectedCode': { editable: false, type: "string" },
                            'SwitchStatus': { editable: false, type: "string" },
                            'DisconnectedReason': { editable: false, type: "string" },
                            'BillingCycle': { editable: false, type: "string" },
                            'PRCode': { editable: false, type: "string" },
                            'PREmail': { editable: false, type: "string" },
                            'ContractEmail': { editable: false, type: "string" },
                            'CustomerIDNumber': { editable: false, type: "string" },
                            'OldNIC': { editable: false, type: "string" },
                            'AccountNo': { editable: false, type: "string" },
                            'Amount': { editable: false, type: "number" },
                            'Remarks': { editable: false, type: "number" },
                            'IsSuspend': { editable: false, type: "boolean" },
                            'PrePostDesc': { editable: false, type: "string" },
                            'SBUDesc': { editable: false, type: "string" },
                            'ContactNo': { editable: false, type: "string" },
                            'ProductType': { editable: false, type: "string" },
                            'ReferenceNumber': { editable: false, type: "string" },

                            'ProductTypeDesc': { editable: false, type: "string" },
                            'PaymentMethod': { editable: false, type: "string" },
                            'SwitchStatusDesc': { editable: false, type: "string" },
                        }
                    }
                },
                pageSize: 10

            });

            ///////
            $scope.dgGridAllPayments = new DataGrid();
            $scope.dgGridAllPayments.options(configAllPayments);

            $scope.dgGridInvalidPayments = new DataGrid();
            $scope.dgGridInvalidPayments.options(configInvalidPayments);

            $scope.InitA = function (arg) {
                $scope.dgGridAllPayments.Init(arg);
            };
            $scope.InitB = function (arg) {
                $scope.dgGridInvalidPayments.Init(arg);
            };

            $scope.GridTitle = 'All Payments';
            $scope.gridShowValue = false; 

            //$scope.UploadSumarry.SuspenseAmt
            //$scope.UploadSumarry.TotalValiedAmt1
            $scope.toggleSelect = function (e) {
                var dataItems = $scope.dgGridAllPayments.data();
                $scope.totAmount = 0;
                for (var i = 0; i < dataItems.length; i++) {
                    dataItems[i].IsSelected = e.target.checked;
                    if (e.target.checked == true) {
                        $scope.totAmount = $scope.totAmount + dataItems[i].Amount;
                    }
                }
                $scope.UploadSumarry.TotalValiedAmt1 = $scope.totAmount > 0 ? Number($scope.totAmount).toFixed(2) : Number(0).toFixed(2);
                $scope.selectThis();
            };

            $scope.selectThis = function (e) {
                $scope.selectedRow = e;
                $scope.totAmount = 0;
                var isSelected = true;
                var dataItems = $scope.dgGridAllPayments.data();
                for (var i = 0; i < dataItems.length; i++) {
                    var sss = dataItems[i].IsSelected;
                    if (!dataItems[i].IsSelected) {
                        isSelected = false;
                    } else {
                        var f = $scope.totAmount;
                        var g = dataItems[i].Amount;
                        if (g != null) {
                            //$scope.totAmount = $scope.totAmount + Number(dataItems[i].Amount).toFixed(2);
                            $scope.totAmount = (Number($scope.totAmount) + Number(dataItems[i].Amount)).toFixed(2);
                        }

                    }
                }
                $scope.UploadSumarry.TotalValiedAmt1 = $scope.totAmount > 0 ? Number($scope.totAmount).toFixed(2) : Number(0).toFixed(2)
                $scope.IsSelectedAll = isSelected;
            };







            $scope.RequestStatusChange = function () {
                if ($scope.isSendRequest) {
                    toaster.error({ type: 'error', title: 'Error', body: 'Procedding...!', showCloseButton: true });
                    return true;
                } else {
                    return false;
                }
            }

          

            $scope.uploadDocuments = function () {

                if ($scope.RequestStatusChange()) {
                    return;
                }

                $scope.UploadSumarry.NoOfTotalRec = 0;
                $scope.UploadSumarry.TotalValiedAmt1 = Number(0).toFixed(2);
                $scope.UploadSumarry.SuspenseCount = 0;
                $scope.UploadSumarry.SuspenseAmt = Number(0).toFixed(2);

                console.log($scope.myFile, "$scope.myFile");
                if ($scope.myFile != undefined) {

                    //$scope.alertMessagePopup = new Message(1, "Success!");
                    var objAttached = {
                        form: $scope.Reference,
                        file: $scope.myFile,
                        ModuleId: '1',
                        TransactionId: '12'
                    };

                    fileUploadService.UploadExcelFiles(objAttached).then(
                        function (result) {
                            if (result.data.Code == 0 && result.data.Result.length > 0) {
                                $scope.dgGridAllPayments.data(result.data.Result);

                                $scope.SubmitToBulkPaymentButtonDisabled = true;
                                $scope.ChangeToSuspenseBtnDisabled = true;
                                $scope.VerifyButtonDisabled = false;

                                $scope.UploadSumarry.NoOfTotalRec = result.data.Result.length;
                                var totAmt = 0;
                                angular.forEach(result.data.Result, function (row) {
                                    totAmt = (Number(row.Amount) + Number(totAmt)).toFixed(2); //Number(totAmt).toFixed(2) + Number(row.Amount).toFixed(2);
                                });
                                $scope.UploadSumarry.TotalValiedAmt1 = totAmt > 0 ? Number(totAmt).toFixed(2) : Number(0).toFixed(2);

                                //$scope.alertMessagePopup = new Message(result.data.Code, "Success");
                                toaster.success({ type: 'Success', title: 'Success', body: 'Excel data successfully added!', showCloseButton: true });
                            } else {
                                $scope.SubmitToBulkPaymentButtonDisabled = true;
                                $scope.ChangeToSuspenseBtnDisabled = true;
                                $scope.VerifyButtonDisabled = true;

                                //$scope.alertMessagePopup = new Message(result.data.Code, result.data.Message);
                                toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
                            }

                          

                            $scope.isSendRequest = false;
                        }, function (result) {
                            $scope.SubmitToBulkPaymentButtonDisabled = true;
                            $scope.ChangeToSuspenseBtnDisabled = true;
                            $scope.VerifyButtonDisabled = true;

                            toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
                            $scope.isSendRequest = false;
                        });
                } else {
                    $scope.SubmitToBulkPaymentButtonDisabled = true;
                    $scope.ChangeToSuspenseBtnDisabled = true;
                    $scope.VerifyButtonDisabled = true;
                    //$scope.alertMessagePopup = new Message("0", "");
                    toaster.error({ type: 'error', title: 'Error', body: 'Please select the upload file!', showCloseButton: true });
                    $scope.isSendRequest = false;
                }
            };

            $scope.IsSuspenseGrid = false;

            //gridId == 1 ? dgGridAllPayments : dgGridInvalidPayments;
            $scope.ExcelVerifycationBulk = function (gridId) {
                debugger;
                $scope.GridTitle = 'Valid Payments';
                $scope.gridShowValue = true;

                if ($scope.RequestStatusChange()) {
                    $scope.isSendRequest = true;
                    return;
                }
                var s = [];
                if (gridId == 1) {
                    s = $scope.dgGridAllPayments.data();
                } else {
                    s = $scope.dgGridInvalidPayments.data();
                }
                $scope.ItemCollection = [];
                $scope.VerifyButtonDisabled = true;
                var objAccountList = [];

                if (gridId == 1) {
                    angular.forEach(s, function (row) {
                        objAccountList.push({ 'connRef': row.ConnectionReference, 'contractNo': row.ContractNumber });
                    });
                } else {
                    objAccountList.push({ 'connRef': $scope.suspenseAccId, 'contractNo': '' });
                }

                var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                $scope.ProductCatId = defaultDataCookieObj.BillingProdCat.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingProdCat, { Description: $scope.bulkExcel.ProductCat })[0].Id : "";
                $scope.SbuId = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Description: $scope.bulkExcel.Sbu })[0].Id : "";
                //$scope.SelectedPaymentSource = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { Description: $scope.bulkExcel.PaySource })[0].Id : "";
                $scope.SelectedPaymentType = defaultDataCookieObj.BillingPaymentType.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentType, { Description: $scope.bulkExcel.PaymentType })[0].Id : "";
               
                

                var obj = {
                    "custRef": "",
                    "OldCustRef": "",
                    "CustRefType": "",
                    "productCategory": $scope.ProductCatId,
                    "sbu": $scope.SbuId,
                    "billInvoiceNo": "",
                    "reqType": 1,
                    "accounts": objAccountList,
                    "accessToken": $cookieStore.get('accessToken')
                }

                bulkExcelVerificationService.ExcelVerifycation(obj).success(function (response) {
                    if (response.Result.isNewAccessToken) {
                        $cookieStore.put("accessToken", response.Result.accessToken);
                    }
                    if (response.Code == MessageTypes.Success) {
                        $scope.gridShowValue = true;

                        $scope.valiedDataGrid = [];
                        $scope.inValiedDataGrid = [];

                        $scope.TotalValiedAmt = 0;

                        if (gridId == 1) {
                            s = $scope.dgGridAllPayments.data();
                        } else {
                            s = $scope.dgGridInvalidPayments.data();
                        }
                       
                       

                        angular.forEach(s, function (gridObj) {
                            var isValidated = false;
                            if (response.Result.profiles.length < 1) {
                                toaster.error({ type: 'error', title: 'Error', body: 'CRM error : Profile data not found!.', showCloseButton: true });
                                return;
                            }
                            angular.forEach(response.Result.profiles, function (resHeader) {
                                if (resHeader.accounts.length < 1) {
                                    toaster.error({ type: 'error', title: 'Error', body: 'CRM error : Accounts data not found!.', showCloseButton: true });
                                    return;
                                }
                                angular.forEach(resHeader.accounts, function (res) {
                                    if (gridObj.ConnectionReference == res.connRef || gridObj.ContractNumber == res.contractNo || (($scope.suspenseAccId == res.connRef || gridObj.ContractNumber == res.contractNo) && gridId != 1)) {
                                        defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                                        //$scope.ConRef = ;

                                        if (gridId == 1) {

                                        } else {
                                            gridObj.Remarks = gridObj.Remarks + " / " + gridObj.ConnectionReference;
                                            res.connRef = $scope.suspenseAccId;
                                            gridObj.ReferenceNumber = gridObj.Remarks;//gridObj.Remarks + " / " + gridObj.ConnectionReference;
                                        }

                                        var valiedObj = {
                                            'RowId': $scope.RowsId,
                                            'IsValiedAccount': true,
                                            'IsRetrivedCrmDetails': false,
                                            'PrePost': res.accountType,
                                            'Hybrid': res.hybridFlag == 1 ? "Y" : "N",
                                            'ConnectionReference': res.connRef,
                                            'ContractNumber': res.contractNo,
                                            'CustomerName': resHeader.custName,
                                            'CustomerIDType': resHeader.custRefType,
                                            'DisconnectedCode': res.disconReasonCode,
                                            'SwitchStatus': res.conStatus,
                                            'DisconnectedReason': res.disconReason,
                                            'BillingCycle': res.billCycle,
                                            'PRCode': res.prCode,
                                            'PREmail': res.prEmail,
                                            'ContractEmail': res.contractEmail,
                                            'CustomerIDNumber': resHeader.custRef,
                                            'OldNIC': resHeader.oldCustRef,
                                            'AccountNo': res.accountNo,
                                            'SBU': res.Sbu,
                                            'IsSuspend': false,
                                            'IsValiedAccount': true,
                                            'ProductType': res.productType,
                                            'ProductTypeDesc': res.productType == ProductTypes.Other ? 'Other' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                            'ContactNo':res.ContactNo,
                                            'PrePostDesc': res.accountType == 1 ? "Pre" : "Post",
                                            'SBUDesc': defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "",
                                            'Amount': gridObj.Amount,
                                            'Remarks': gridObj.Remarks,
                                            'IsSelected':true,
                                            'ConnectionReferenceGridDisabled': true,
                                            'ContractNumberGridDisabled': true,
                                            'AmountGridDisabled': true,
                                            'ReferenceNumberGridDisabled': true,
                                            'RemarksGridDisabled': true,
                                            'ReferenceNumber':gridObj.ReferenceNumber,
                                            'SwitchStatusDesc': res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense',
                                            'PaymentMethod': $scope.bulkExcel.PaymentMethod,

                                        }
                                        $scope.valiedDataGrid.push(valiedObj),
                                        isValidated = true;
                                        //$scope.UploadSumarry.TotalValiedAmt1 = (Number($scope.UploadSumarry.TotalValiedAmt1) + Number(gridObj.Amount)).toFixed(2);
                                        $scope.RowsId = $scope.RowsId + 1;
                                    }
                                });
                            });
                            if (!isValidated) {

                                var valiedObj = {
                                    'RowId': $scope.RowsId,
                                    'IsValiedAccount': false,
                                    'IsRetrivedCrmDetails': false,
                                    'PrePost': '',//res.accountType,
                                    'Hybrid': 'N',//res.hybridFlag == 1 ? "Y" : "N",
                                    'ConnectionReference': gridObj.ConnectionReference,//res.connRef,
                                    'ContractNumber': gridObj.ContractNumber,//res.contractNo,
                                    'CustomerName': '',//resHeader.custName,
                                    'CustomerIDType': '',//resHeader.custRefType,
                                    'DisconnectedCode': '',//res.disconReasonCode,
                                    'SwitchStatus': '',//res.conStatus,
                                    'DisconnectedReason': '',//res.disconReason,
                                    'BillingCycle': '',//res.billCycle,
                                    'PRCode': '',//res.prCode,
                                    'PREmail': '',//res.prEmail,
                                    'ContractEmail': '',//res.contractEmail,
                                    'CustomerIDNumber': '',//resHeader.custRef,
                                    'OldNIC': '',//resHeader.oldCustRef,
                                    'AccountNo': '',//res.accountNo,
                                    'SBU': gridObj.SBU,// res.Sbu,
                                    'IsSuspend': true,
                                    'IsValiedAccount': false,
                                    'ProductType': '',//gridObj.,//res.productType,
                                    'ProductTypeDesc': '',//res.productType == ProductTypes.Other ? 'Other' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : 'LTE',
                                    'ContactNo': '',// res.ContactNo,
                                    'PrePostDesc':  '',//res.accountType == 1 ? "Pre" : "Post",
                                    'SBUDesc': defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: gridObj.SBU })[0].Description : "",
                                    'Amount': gridObj.Amount,
                                    'Remarks': gridObj.Remarks,
                                    'IsSelected': true,
                                    'ConnectionReferenceGridDisabled': true,
                                    'ContractNumberGridDisabled': true,
                                    'AmountGridDisabled': true,
                                    'ReferenceNumberGridDisabled': true,
                                    'RemarksGridDisabled': '',//true,
                                    'ReferenceNumber': gridObj.ReferenceNumber,
                                    'SwitchStatusDesc': '',//res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense',
                                    'PaymentMethod': '',//$scope.bulkExcel.PaymentMethod,
                                }
                                $scope.inValiedDataGrid.push(valiedObj);
                                //$scope.UploadSumarry.TotalValiedAmt1 = (Number($scope.UploadSumarry.TotalValiedAmt1) + Number(gridObj.Amount)).toFixed(2);
                                $scope.UploadSumarry.SuspenseAmt = (Number($scope.UploadSumarry.SuspenseAmt) + Number(gridObj.Amount)).toFixed(2);
                            }
                        });
                        

                        if (gridId == 1) {
                            s = $scope.dgGridAllPayments.data();
                            $scope.UploadSumarry.TotalValiedAmt1 = Number(0).toFixed(2);
                            angular.forEach(s, function (gridObj) {
                                $scope.UploadSumarry.TotalValiedAmt1 = (Number($scope.UploadSumarry.TotalValiedAmt1) + Number(gridObj.Amount)).toFixed(2);
                            });
                        } else {
                            $scope.dgGridInvalidPayments.data([]);
                            $scope.dgGridInvalidPayments.data($scope.valiedDataGrid);

                                s = $scope.dgGridInvalidPayments.data();
                                $scope.ToSuspenseData = $scope.dgGridInvalidPayments.data();
                                $scope.UploadSumarry.SuspenseCount = $scope.dgGridInvalidPayments.data().length;


                                var sbu = $scope.bulkExcel.Sbu;
                                var payMethod = $scope.bulkExcel.PaymentMethod;
                                var payType = $scope.bulkExcel.PaymentType;
                                $scope.UploadSumarry.SuspenseAmt = 0;
                                //var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                                
                                angular.forEach(s, function (res) {
                                    if (gridId == 1) {
                                        $scope.UploadSumarry.TotalValiedAmt1 = (Number($scope.UploadSumarry.TotalValiedAmt1) + Number(res.Amount)).toFixed(2);
                                    } else {
                                        $scope.UploadSumarry.SuspenseAmt = (Number($scope.UploadSumarry.SuspenseAmt) + Number(res.Amount)).toFixed(2);
                                        //$scope.UploadSumarry.TotalValiedAmt1 = (Number($scope.UploadSumarry.TotalValiedAmt1) + Number(res.Amount)).toFixed(2);
                                    }
                                //angular.forEach($scope.ToSuspenseData, function (res) {
                                    res.SBU = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Description: sbu })[0].Id : "",
                                    res.SBUDesc = sbu;
                                    res.IsSuspend = true;
                                    res.bulkExcelDisabled = true;
                                    //res.Remarks = res.Remarks + " / " + res.ConnectionReference;
                                    //res.ConnectionReference = $scope.suspenseAccId;//response.Result.SuspenseAcc;
                                    //$scope.UploadSumarry.SuspenseAmt = (Number($scope.UploadSumarry.SuspenseAmt) + Number(res.Amount)).toFixed(2);

                                    res.IsValiedAccount=true;
                                    res.IsSelected=true;
                                    res.ConnectionReferenceGridDisabled=true;
                                    res.ContractNumberGridDisabled= true;
                                    res.AmountGridDisabled= true;
                                    res.ReferenceNumberGridDisabled= true;
                                    res.RemarksGridDisabled = true;
                                //});
                                


                                });
                                $scope.SubmitToBulkPaymentButtonDisabled = false;
                                $scope.ChangeToSuspenseBtnDisabled = true;
                        }

                        if ($scope.inValiedDataGrid.length > 0) {
                            //var sus = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: $scope.SelectedPaymentSource })[0].Id : "";

                            var sucObj = $filter('filter')(defaultDataCookieObj.BillingSusAcc,
                            {
                                Sbu: $scope.SbuId,
                                PaySource: $scope.SelectedPaymentSource,  //Needed payment sourse
                                PayType: $scope.SelectedPaymentType
                            });

                            if (sucObj.length == 0) {
                                if ($scope.IsBackOfficeUser == true) {
                                    toaster.error({ type: 'error', title: 'Error', body: 'Suspense Account not found! Contact administrator.', showCloseButton: true });
                                    return;
                                } else {
                                    toaster.error({ type: 'error', title: 'Error', body: 'Invalid data exists in uploaded document!', showCloseButton: true });
                                }
                                
                            } else {
                                $scope.suspenseAccId = sucObj[0].AccountNo;
                            }

                        }

                        if (gridId == 1) {
                            $scope.dgGridAllPayments.data([]);
                            $scope.dgGridAllPayments.data($scope.valiedDataGrid);
                            $scope.dgGridInvalidPayments.data($scope.inValiedDataGrid);

                            $scope.UploadSumarry.SuspenseCount = $scope.dgGridInvalidPayments.data().length;

                            $scope.SubmitToBulkPaymentButtonDisabled = true;
                            $scope.ChangeToSuspenseBtnDisabled = true;
                            $scope.VerifyButtonDisabled = true;

                            if ($scope.dgGridInvalidPayments.data().length > 0) {
                                $scope.ChangeToSuspenseBtnDisabled = false;
                                $scope.SubmitToBulkPaymentButtonDisabled = true;
                            } else {
                                $scope.ChangeToSuspenseBtnDisabled = true;
                                $scope.SubmitToBulkPaymentButtonDisabled = false;
                            }
                        } else {
                            
                        }
                        
                        toaster.success({ type: 'Success', title: 'Success', body: 'Excel data successfully verified!', showCloseButton: true });
                    } else {
                        $scope.VerifyButtonDisabled = false;
                        //$scope.alertMessage = new Message(MessageTypes.Empty);
                        toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                    }

                    $scope.isSendRequest = false;

                }).error(function (response) {
                    if (response.Result.isNewAccessToken) {
                        $cookieStore.put("accessToken", response.Result.accessToken);
                    }
                    $scope.VerifyButtonDisabled = false;
                    //                    $scope.alertMessage = new Message(response.Code, response.Message);
                    toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                    $scope.isSendRequest = false;
                    return;
                });
            }

            $scope.ExcelVerifycationSingle = function (row) {

                if ($scope.RequestStatusChange()) {
                    return;
                }


                var row = row.dataItem;
                if ((angular.isUndefined(row.ConnectionReference) || row.ConnectionReference == "") && (angular.isUndefined(row.ContractNumber) || row.ContractNumber == "")) {
                    $scope.isSendRequest = false;
                    return;
                }
                var objAccountList = [];
                objAccountList.push({ 'connRef': row.ConnectionReference, 'contractNo': row.ContractNumber });

                $scope.ItemCollection = [];

                var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                $scope.ProductCatId = defaultDataCookieObj.BillingProdCat.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingProdCat, { Description: $scope.bulkExcel.ProductCat })[0].Id : "";
                $scope.SbuId = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Description: $scope.bulkExcel.Sbu })[0].Id : "";
                //$scope.SelectedPaymentSource = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Description: $scope.bulkExcel.PaymentMethod })[0].Id : "";
                $scope.SelectedPaymentType = defaultDataCookieObj.BillingPaymentType.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentType, { Description: $scope.bulkExcel.PaymentType })[0].Id : "";

                //$scope.suspenseAccId = defaultDataCookieObj.BillingSusAcc.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSusAcc, { Sbu: $scope.SbuId, PayMethod: $scope.SelectedPaymentSource, PayType: $scope.SelectedPaymentType })[0].AccountNo : "";
                //var sus = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: $scope.SelectedPaymentSource })[0].Id : "";

                var sucObj = $filter('filter')(defaultDataCookieObj.BillingSusAcc,
                            {
                                Sbu: $scope.SbuId,
                                PaySource: $scope.SelectedPaymentSource,  //Needed payment sourse
                                PayType: $scope.SelectedPaymentType
                            });

                if (sucObj.length == 0) {
                    toaster.error({ type: 'error', title: 'Error', body: 'Suspense Account not found!', showCloseButton: true });
                    return;
                } else {
                    $scope.suspenseAccId = sucObj[0].AccountNo;
                }

                var obj = {
                    "custRef": "",
                    "OldCustRef": "",
                    "CustRefType": "",
                    "productCategory": $scope.ProductCatId,
                    "sbu": $scope.SbuId,
                    "billInvoiceNo": "",
                    "reqType": 1,
                    "accounts": objAccountList,
                    "accessToken": $cookieStore.get('accessToken')
                }

                //$scope.ItemCollection.push(obj);

                bulkExcelVerificationService.ExcelVerifycation(obj).success(function (response) {
                    if (response.Result.isNewAccessToken) {
                        $cookieStore.put("accessToken", response.Result.accessToken);
                    }
                    if (response.Code == MessageTypes.Success) {
                        $scope.gridShowValue = true;

                        $scope.valiedDataGrid = $scope.dgGridAllPayments.data();
                        $scope.inValiedDataGrid = [];

                        $scope.TotalValiedAmt = 0;
                        angular.forEach($scope.dgGridInvalidPayments.data(), function (gridObj) {
                            var isValidated = false;
                            angular.forEach(response.Result.profiles, function (resHeader) {
                                angular.forEach(resHeader.accounts, function (res) {
                                    if (gridObj.ConnectionReference == res.connRef || gridObj.ContractNumber == res.contractNo) {
                                        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));

                                        var valiedObj = {
                                            'RowId': $scope.RowsId,
                                            'PrePost': res.accountType,
                                            'Hybrid': res.hybridFlag == 1 ? "Y" : "N",
                                            'ConnectionReference': res.connRef,
                                            'ContractNumber': res.contractNo,
                                            'CustomerName': resHeader.custName,
                                            'CustomerIDType': resHeader.custRefType,
                                            'DisconnectedCode': res.disconReasonCode,
                                            'SwitchStatus': res.conStatus,
                                            'DisconnectedReason': res.disconReason,
                                            'BillingCycle': res.billCycle,
                                            'PRCode': res.prCode,
                                            'PREmail': res.prEmail,
                                            'ContractEmail': res.contractEmail,
                                            'CustomerIDNumber': resHeader.custRef,
                                            'OldNIC': resHeader.oldCustRef,
                                            'AccountNo': res.accountNo,
                                            'SBU': res.Sbu,
                                            'ProductType': res.productType,
                                            'ProductTypeDesc': res.productType == ProductTypes.Other ? 'Other' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                            'ContactNo': res.ContactNo,
                                            'PrePostDesc': res.accountType == 1 ? "Pre" : "Post",
                                            'SBUDesc': defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "",
                                            'IsSelected': true,
                                            'IsValiedAccount': true,
                                            'Amount': gridObj.Amount,
                                            'SwitchStatusDesc': res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : 'Suspense',
                                            'PaymentMethod': $scope.bulkExcel.PaymentMethod,
                                            'ReferenceNumber': gridObj.ReferenceNumber,
                                            'ConnectionReferenceGridDisabled': true,
                                            'ContractNumberGridDisabled': true,
                                            'AmountGridDisabled': true,
                                            'ReferenceNumberGridDisabled': true,
                                            'RemarksGridDisabled': true,
                                        }

                                        //$scope.valiedDataGrid.push(valiedObj);
                                        $scope.dgGridAllPayments.data().push(valiedObj);
                                        isValidated = true;
                                        $scope.UploadSumarry.TotalValiedAmt1 = $scope.UploadSumarry.TotalValiedAmt1 + gridObj.Amount;
                                        $scope.RowsId = $scope.RowsId + 1;
                                    }
                                });

                            });
                            if (!isValidated) {
                                $scope.inValiedDataGrid.push(gridObj);
                                $scope.UploadSumarry.SuspenseAmt += gridObj.Amount;

                            }
                        });
                        if ($scope.inValiedDataGrid.length > 0) {
                            $scope.SubmitToBulkPaymentButtonDisabled = true;
                            $scope.ChangeToSuspenseBtnDisabled = false;
                            $scope.dgGridInvalidPayments.data($scope.inValiedDataGrid);
                        } else {
                            $scope.dgGridInvalidPayments.data([]);
                            $scope.SubmitToBulkPaymentButtonDisabled = false;
                            $scope.gridShowValue = false;
                            $scope.ChangeToSuspenseBtnDisabled = true;
                        }
                        
                        //$scope.dgGridAllPayments.data($scope.valiedDataGrid);
                        $scope.UploadSumarry.SuspenseCount = $scope.dgGridInvalidPayments.data().length;

                        toaster.success({ type: 'Success', title: 'Success', body: 'Excel data successfully verified!', showCloseButton: true });
                    } else {
                        $scope.SubmitToBulkPaymentButtonDisabled = true;
                        //$scope.alertMessage = new Message(MessageTypes.Empty);
                        toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
                    }
                    $scope.isSendRequest = false;
                }).error(function (response) {
                    if (response.Result.isNewAccessToken) {
                        $cookieStore.put("accessToken", response.Result.accessToken);
                    }
                    $scope.SubmitToBulkPaymentButtonDisabled = true;
                    toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
                    $scope.isSendRequest = false;
                    return;
                });

            }

            $scope.ChangeToSuspense = function () {
                //try {
                debugger;
                //    if ($scope.RequestStatusChange()) {
                //        return;
                //    }

                //    $scope.ToSuspenseData = $scope.dgGridInvalidPayments.data();
                //    $scope.UploadSumarry.SuspenseCount = $scope.dgGridInvalidPayments.data().length;

                //    var sbu = $scope.bulkExcel.Sbu;
                //    var payMethod = $scope.bulkExcel.PaymentMethod;
                //    var payType = $scope.bulkExcel.PaymentType;
                //    var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                //    angular.forEach($scope.ToSuspenseData, function (res) {
                //        res.SBU = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Description: sbu })[0].Id : "",
                //        res.SBUDesc = sbu;
                //        res.IsSuspend = true;
                //        res.bulkExcelDisabled = true;
                //        res.Remarks = res.Remarks + " / " + res.ConnectionReference;
                //        res.ConnectionReference = $scope.suspenseAccId;//response.Result.SuspenseAcc;
                //        //$scope.UploadSumarry.SuspenseAmt = (Number($scope.UploadSumarry.SuspenseAmt) + Number(res.Amount)).toFixed(2);

                //        res.IsValiedAccount=true;
                //        res.IsSelected=true;
                //        res.ConnectionReferenceGridDisabled=true;
                //        res.ContractNumberGridDisabled= true;
                //        res.AmountGridDisabled= true;
                //        res.ReferenceNumberGridDisabled= true;
                //        res.RemarksGridDisabled = true;
                //    });
                //    $scope.SubmitToBulkPaymentButtonDisabled = false;
                //    $scope.ChangeToSuspenseBtnDisabled = true;
                //    $scope.isSendRequest = false;

                    $scope.ExcelVerifycationBulk(2);
                //} catch (e) {
                //    $scope.SubmitToBulkPaymentButtonDisabled = true;
                //    $scope.ChangeToSuspenseBtnDisabled = false;
                //    $scope.isSendRequest = false;
                //}

            }

            $scope.changeAddPaymentPageState = function (status) {
                $scope.UploadSumarry.NoOfTotalRec = 0;
                $scope.UploadSumarry.TotalValiedAmt1 = Number(0).toFixed(2);
                $scope.UploadSumarry.SuspenseCount = 0;
                $scope.UploadSumarry.SuspenseAmt = Number(0).toFixed(2);
            }


            $scope.SubmitToBulkPayment = function () {
                if ($scope.RequestStatusChange()) {
                    return;
                }
                var data = $scope.dgGridAllPayments.data();
                var suspenseData = $scope.dgGridInvalidPayments.data();
                var fun = $scope.callback();
                                
                var isSuspendNotExist = true;
                angular.forEach(suspenseData, function (res) {
                    if (!res.IsSuspend) {
                        isSuspendNotExist = false;
                    }
                    else {
                        res.PaymentMethod = "Suspense";
                        res.SwitchStatusDesc = 'Suspense',
                        data.push(res)
                    }
                });

                angular.forEach(suspenseData, function (res) {
                    
                    res.RowId = $scope.RowsId;
                    $scope.RowsId = $scope.RowsId + 1;
                });

                if (isSuspendNotExist) {
                    $scope.isSendRequest = false;
                    fun($scope.bulkExcel.AccountType, data);
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: "Please transfer invalied data to suspense account!", showCloseButton: true });
                    $scope.isSendRequest = false;
                    return;
                }
                
            }


        }]
    }

}]);


angular.module("DialogBilling").controller('BulkPaymentController', ["$scope", '$interval', "Page", "$cookies", "BulkPaymentService", "$routeParams", "$filter", "toaster", "AuthService", "PrintService", 'appConfig', '$window', 'ReceiptPrintingService', 'DirectPrintService', '$timeout', 'appPrintingConfig', function ($scope, $interval, Page, $cookieStore, BulkPaymentService, $routeParams, $filter, toaster, AuthService, PrintService, appConfig, $window, ReceiptPrintingService, DirectPrintService, $timeout, appPrintingConfig) {
    //Set Page Title
    Page.setTitle("Bulk Payment");

    //$scope.message = 'Displays the Bulk Payment forms here.';

    //@@@@@@@@@@@@@@@@@@@@@@@@@@


    //-> Grid Sample data for demo purposes
    $scope.BulkPayment = {};
    $scope.RandomBillPaymentObjectCollection = [];
    $scope.BulkExcelPaymentObjectCollection = [];
    $scope.AccountType = "";
    $scope.IsRetrivedCrmDetails = true;
    $scope.IsRetrivedCrmDetailsBulk = true;
    $scope.IsLoadingAtFirstTime = true;
    $scope.ReceiptList = [];
    $scope.PaymentMethodDrop = false;
    $scope.PaymentTypeDrop = false;
    $scope.PaymentSourceDrop = false;
    $scope.PaymentBu = false;
    $scope.PaymentProdCatDrop = false;
    $scope.PaymentGridSelectAll = false;
    $scope.IsSIMDisabled = false;

    $scope.disabled = {};
    //$scope.BulkPayment.UploadBtn = false;
    $scope.TransRef = "";
    $scope.result = {};
    $scope.LastRetrivedBatchId = "";
    var objTemp = new Array();
    $scope.RowsId = 0;
    var a = 0;
    var RandomBillPaymentObject = function () {
        this.ConnectionReference = '',
        this.ContractNumber = '',
        this.Amount = '',
        this.ReferenceNumber = ''
    }

    var billingData = function () {
        this.IsSelected = '';
        this.SBU = '';
        this.SBUId = '';
        this.PrePost = '';
        this.Hybrid = '';
        this.ProductType = '';
        this.ContactNo = '';
        this.ConnectionReference = '';
        this.ContractNumber = '';
        this.CustomerName = '';
        this.CustomerIDType = '';
        this.Amount = '';
        this.DisconnectedCode = '';
        this.SwitchStatus = false;
        this.OCSStatus = false;
        this.TotalOutstanding = 0;
        this.BalanceAsAt = '';
        this.LastMonthBillAmount = '';
        this.MinReconFee = '';
        this.DTVReconFee = '';
        this.DisconnectedReason = '';
        this.ReferenceNumber = '';
        this.Remarks = '';
        this.PaymentMethod = '';
        this.BillingCycle = '';
        this.PRCode = '';
        this.PREmail = '';
        this.ContractEmail = '';
        this.CustomerIDNumber = '';
        this.OldNIC = '';
        this.IsValiedAccount = '';
        this.AccountNo = '';
        this.IsSuspend = '';
        this.IsCancel = false;
        this.IsTransfer = false;
        this.IsValiedAccount = false;
        this.IsRetrivedCrmDetails = true;
        this.IsEmailExists = false;
    }
    var permissionCodes = AuthService.getProfile().permission;
    if (permissionCodes.indexOf("41001") == -1) {
        $scope.IsBackOfficeUser = false;
    } else {
        $scope.IsBackOfficeUser = true;
    }

    var receiptSample = [
      // { ID: '002', ReceiptNo: '001', CustomerName: '002', CustomerIDType: '002', CustomerIDNumber: '002', SBU: '002', Amount: '002', PreviewPrint: '002', Email: '002', ReceiptStatus: '001', PostingStatus: 'yes' }

    ];

    var bulkEntrySample = [
       {
           row: true
           //ID: '002', IsSelected: 'a', BillInvoiceNumber: '001', SBU: '001', AccountType: '002', ConnectionReference: '002', ContractNumber: '002', CustomerName: '002', Amount: '002', CustomerIDType: '002', DisconnectedCode: '002', DisconnectedReason: 'yes',
           //DisconnectedReason: 'yes', DisconnectedReason: 'yes', DisconnectedReason: 'yes', SwitchStatus: 'yes', OCSStatus: 'yes',
           //TotalOutstanding: 'yes', BalanceAsAt: 'yes', LastMonthBillAmount: 'yes',
           //ReconFee: 'yes', DTVReconFee: 'yes', ReferenceNumber: 'yes',
           //ReferenceNumber: 'yes', Remarks: 'yes', PRCode: 'yes',
           //PREmail: 'yes', ContractEmail: 'yes', PaymentMethod: 'yes',
           //PaymentMode: 'yes', RBM: 'yes', OCS: 'yes', CRM: 'yes', ADFRemarks: 'yes'
       }
    ];

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations
    var configReceiptDetails = {};
    var configReceiptDetails = {
        columns: [
                    { field: "ID", title: "No", width: "32px" },
                    {
                        field: "IsSelected", headerTemplate: '<input type="checkbox"  ng-disabled = "IsSelectedTempDisabled" title="Select all" ng-click="toggleSelect1($event)" ng-model="IsSelectedAll"/>', template: '<input type="checkbox" ng-click="selectThis1($event)" ng-model="dataItem.IsSelected" ng-disabled = "dataItem.IsSelectedRowDisabled"/>', width: "32px"
                    },
                      {
                          field: "PostingStatus",
                          headerTemplate: 'Posting Status',
                          template: '<button class="btn btn-warning btn-sm" type="button" ng-click="OpenPostingStatus(this)"><i class="glyphicon glyphicon-check"></i></button>',
                          width: "80px"
                      },
                      //permission-code="550104" 
                    {
                        field: "Cancel",
                        headerTemplate: 'Cancel',
                        template: '<button  class="btn btn-danger btn-sm" type="button" ng-disabled = "dataItem.IsCancel" ng-click="CancelSingleReceipt(this)"><i class="glyphicon glyphicon-remove"></i></button>',
                        width: "60px"
                    },
                    //permission-code=\'"550105\'" 
                    {
                        field: "Transfer",
                        headerTemplate: 'Transfer',
                        template: '<button class="btn btn-info btn-sm" type="button"  ng-disabled = "dataItem.IsTransfer" ng-click="Transfer(this)"><i class="glyphicon glyphicon-arrow-right"></i></button>',
                        width: "60px"
                    },
                    {
                        field: "PreviewPrint",
                        headerTemplate: 'Print',
                        template: '<button  class="btn btn-primary btn-sm" type="button"  ng-click="PrintReceipts(this,2)"><i class="icon icon_printer"></i></button>',
                        width: "60px"
                    },
                    {
                        field: "Email",
                        headerTemplate: 'Email',
                        template: '<button class="btn btn-success btn-sm" type="button"  ng-disabled="!dataItem.IsEmailExists"  ng-click="PrintReceipts(this,1)" ><i class="icon icon_mail"></i></button>',
                        width: "60px"
                    },
                    //{ field: "BatchId", title: "Batch Id" },
                    { field: "ReceiptNo", title: "Receipt No", width: "140px" },
                    { field: "ConnectionReference", title: "Connection Reference", width: "100px" },
                    { field: "ContactNo", title: "Contact No", width: "100px" },
                    { field: "PrePostDesc", title: "Pre/Post", width: "100px" },
                    { field: "SBUDesc", title: "BU", width: "90px" },
                    { field: "CustomerName", title: "Customer Name", width: "120px" },
                    { field: "Amount", title: "Paid Amount", template: "{{dataItem.Amount|currency:''}}", width: "80px" },
                    { field: "TotalOutstanding", title: "Tot Outs", width: "100px" },
                    { field: "BalanceAsAt", title: "Balance As At", width: "100px" },
                    { field: "ReconFee", title: "Min Recon Fee", width: "100px" },
                    { field: "ReceiptStatus", title: "Receipt Status", width: "100px" },
                    { field: "ReferenceNumber", title: "Reference Number", width: "100px" }
                    
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: false,
        scrollable: true

    };

    configReceiptDetails.dataSource = new kendo.data.DataSource({
        data: [receiptSample],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'ID': { editable: false, type: "string" },
                    'IsSelected': { editable: false, type: "boolean" },
                    'ReceiptNo': { editable: false, type: "string" },
                    'ReferenceNumber': { editable: false, type: "string" },
                    'ConnectionReference': { editable: false, type: "string" },
                    'ContactNo': { editable: false, type: "string" },
                    'PrePostDesc': { editable: false, type: "string" },
                    'SBUDesc': { editable: false, type: "string" },
                    'CustomerName': { editable: false, type: "string" },
                    'Amount': { editable: false, type: "number" },
                    'TotalOutstanding': { editable: false, type: "number" },
                    'BalanceAsAt': { editable: false, type: "string" },
                    'ReconFee': { editable: false, type: "string" },
                    'ReceiptStatus': { editable: false, type: "boolean" },
                    'SBU': { editable: false, type: "number" },
                    'PrePost': { editable: false, type: "string" },
                    'PREmail': { editable: false, type: "string" },
                    'ContractEmail': { editable: false, type: "string" },
                    'PaymentMethod': { editable: false, type: "number" },
                    'Cancel': { editable: false, type: "number" },
                    'ProductType': { editable: false, type: "number" },
                    'CustomerIDType': { editable: false, type: "string" },
                    'CustRef': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 10

    });


    var configBulkPayment = {};
    var configBulkPayment = {
         columns: [
                    { field: "RowId", title: "No", width: "32px" },
                    {
                        field: "IsSelected", headerTemplate: '<input type="checkbox" ng-disabled="PaymentGridSelectAll" title="Select all" ng-click="toggleSelect($event)" ng-model="IsSelectedAll"/>', template: '<input type="checkbox" ng-click="selectThis($event)" ng-model="dataItem.IsSelected" ng-disabled="dataItem.row"/>', width: "32px"
                    },
                    
                      {
                          field: "Other",
                          headerTemplate: '',
                          headerAttributes: {
                              "class": "table-header",
                          },
                          template: '<button ng-click="CreatePEObjectToValidateSingle(this)" ng-disabled="dataItem.IsRetrivedCrmDetails" class="btn btn-warning btn-sm" type="button">Other</button>',
                          width: "65px"
                      },
                    {
                        field: "RBM",
                        headerTemplate: '',
                        headerAttributes: {
                            "class": "table-header",
                        },
                        template: '<button ng-click="CreateRBMObjectToValidateSingle(this)" ng-disabled="dataItem.IsRetrivedCrmDetails" class="btn btn-danger btn-sm" type="button">RBM</button>',
                        width: "65px"
                    },
                    {
                        field: "OCS",
                        headerTemplate: '',
                        headerAttributes: {
                            "class": "table-header",
                        },
                        template: '<button ng-click="CreateOCSObjectToValidateSingle(this)" ng-disabled="dataItem.IsRetrivedCrmDetails" class="btn btn-success btn-sm" type="button">OCS</button>',
                        width: "65px"
                    },
                    {
                        field: "SBUDesc",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "BU", width: "90px"
                    },
                    {
                        field: "ProductTypeDesc",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Product Type", width: "80px"
                    },
                    {
                        field: "PrePostDesc",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Pre/Post", width: "90px"
                    },
                    {
                        field: "Hybrid",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Hybrid (Y/N)", width: "50px"
                    },
                    {
                        field: "ConnectionReference",
                        headerTemplate: 'Conn Ref',
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        template: '<input type ="text"  ng-keydown="KK(this,$event)" ng-disabled="dataItem.ConnectionReferenceGridDisabled"  ng-change="dataItem.ContractNumber = null" ng-model="dataItem.ConnectionReference" class="k-fill text-right conn-ref2 kk" ng-disabled="dataItem.row"/>',
                        width: "100px"
                    },
                    {
                        field: "ContractNumber", title: "Contract Number",
                        headerTemplate: 'Contract No',
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        template: '<input type ="text"  ng-keydown="KK(this,$event)" ng-disabled="dataItem.ContractNumberGridDisabled"  ng-change="dataItem.ConnectionReference = null"  ng-model="dataItem.ContractNumber"class="k-fill text-right format-number contract-no kk" ng-disabled="dataItem.row"/>',
                        width: "100px"
                    },
                    {
                        field: "CustomerName",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Customer Name", width: "150px"
                    },
                    {
                        field: "CustomerIDType",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Cust ID Type", width: "60px"
                    },
                    {
                        field: "Amount", title: "Pay Amount",
                        headerTemplate: 'Pay Amount',
                        headerAttributes: {
                            "class": "table-header",
                        },
                        template: '<input type ="text"  ng-keydown="KK(this,$event)" kendo-numeric-text-box ng-change="EditPaymentValue(this,$event)" ng-disabled="dataItem.AmountGridDisabled || dataItem.row" ng-model="dataItem.Amount" class="k-fill text-right amount kk"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                        width: "130px"
                    },
                    {
                        field: "DisconnectedCode",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Discon Code", width: "100px"
                    },
                    {
                        field: "SwitchStatusDesc",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Switch Status", width: "100px"
                    },
                    {
                        field: "OCSStatusDesc",
                        headerAttributes: {
                            "class": "table-header-OCS",
                        },
                        title: "OCS Status", width: "100px"
                    }, 
                    {
                        field: "TotalOutstanding",
                        headerAttributes: {
                            "class": "table-header-RBM",
                        },
                        title: "Total O/S", width: "100px",
                        template: "{{dataItem.TotalOutstanding|currency:''}}"
                    },
                    {
                        field: "BalanceAsAt",
                        headerAttributes: {
                            "class": "table-header-PE",
                        },
                        title: "Balance As At", width: "100px",
                        template: "{{dataItem.BalanceAsAt|currency:''}}"
                    },
                    {
                        field: "LastMonthBillAmount",
                        headerAttributes: {
                            "class": "table-header-RBM",
                        },
                        title: "Last Mon Bill Amt", width: "100px",
                        template: "{{dataItem.LastMonthBillAmount|currency:''}}"
                    },
                    {
                        field: "MinReconFee",
                        headerAttributes: {
                            "class": "table-header-PE", 
                        },
                        title: "Min Recon Fee", width: "100px"
                    },
                    {
                        field: "DTVReconFee",
                        headerAttributes: {
                            "class": "table-header-PE",
                        },
                        title: "DTV Recon Fee", width: "100px" 
                    },  
                    { 
                        field: "DisconnectedReason",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Disconnected Reason", width: "100px"  
                    },

                    {
                        field: "ReferenceNumber",
                        headerAttributes: {
                            "class": "table-header",
                        },
                        headerTemplate: 'Reference Number',
                        template: '<input type ="text" ng-keydown="KK(this,$event)" ng-model="dataItem.ReferenceNumber" ng-disabled="dataItem.ReferenceNumberGridDisabled" class="k-fill text-right ref-no kk"/>',
                        width: "120px"
                    },
                    {
                        field: "Remarks",
                        headerAttributes: {
                            "class": "table-header",
                        },
                        headerTemplate: 'Remarks',
                        template: '<input type ="text"  ng-keydown="KK(this,$event)" ng-model="dataItem.Remarks" ng-disabled="dataItem.RemarksGridDisabled" class="k-fill text-right remarks kk"/>',
                        width: "100px"
                    },
                    {
                        field: "PaymentMethod",
                        headerAttributes: {
                            "class": "table-header",
                        },
                        title: "Payment Method", width: "100px"
                    },
                    {
                        field: "BillingCycle",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Billing Cycle", width: "100px"
                    },
                    
                    {
                        field: "PRCode",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "PR Code", width: "100px"
                    },
                    {
                        field: "PREmail",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "PR Email", width: "100px"
                    },
                    {
                        field: "ContractEmail",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Contract Email", width: "100px"
                    },
                    {
                        field: "CustomerIDNumber",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Customer ID Number", width: "100px"
                    },
                    {
                        field: "OldNIC",
                        headerAttributes: {
                            "class": "table-header-CRM",
                        },
                        title: "Old NIC", width: "80px"
                    },
                    {
                        field: "CRM",
                        headerTemplate: '',
                        headerAttributes: {
                            "class": "table-header",
                        },
                        template: '<button ng-click="CreateCRMObjectToValidateSingle(this)" class="btn btn-info btn-sm" type="button">CRM</button>',
                        width: "65px"
                    },
                    {
                        field: "ADFRemarks",
                        headerTemplate: '',
                        headerAttributes: {
                            "class": "table-header",
                        },
                        template: '<button ng-click=" CreateADFObjectToValidateSingle(this) " class="btn btn-danger btn-sm" ng-disabled="dataItem.IsRetrivedCrmDetails" type="button" >ADF Remarks</button>',
                        width: "110px"
                    },
                    {
                        field: "ContractSummary",
                        headerTemplate: '',
                        headerAttributes: {
                            "class": "table-header",
                        },
                        template: '<button ng-click="GoToContractSummary(this)" class="btn btn-danger btn-sm" ng-disabled="dataItem.IsRetrivedCrmDetails" type="button" >Contract Summary</button>',
                        width: "110px"
                    },
                     
        ],
        pageable: commonGridConfig, 
        navigatable: true,
        editable: false, sortable: true,
        scrollable: true,
        dataBound: function () {
 
            var dGrid = $scope.dgGridBulkPayment.data();


            angular.forEach(dGrid, function (row) {
                if (row.PrePost == 1) {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //red
                } else {
                    if (row.IsValiedAccount != true) {
                        $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                    }
                }
            });
        }

    };  

    configBulkPayment.dataSource = new kendo.data.DataSource({
        data: [bulkEntrySample],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'RowId': { editable: false, type: "number" },
                    'IsSelected': { editable: false, type: "boolean" },
                    'SBU': { editable: false, type: "number" },
                    'ProductTypeDesc': { editable: false, type: "number" },
                    'PrePost': { editable: false, type: "string" },
                    'Hybrid': { editable: false, type: "string" },
                    'ConnectionReference': { editable: true, type: "string" },
                    'ContractNumber': { editable: true, type: "number" },
                    'CustomerName': { editable: false, type: "string" },
                    'CustomerIDType': { editable: false, type: "number" },
                    'Amount': { editable: true, type: "number" },
                    'DisconnectedCode': { editable: false, type: "string" },
                    'SwitchStatus': { editable: false, type: "string" },
                    'OCSStatus': { editable: false, type: "string" },
                    'TotalOutstanding': { editable: false, type: "number" },
                    'BalanceAsAt': { editable: false, type: "string" },
                    'LastMonthBillAmount': { editable: false, type: "number" },
                    'MinReconFee': { editable: false, type: "number" },
                    'DTVReconFee': { editable: false, type: "number" },
                    'DisconnectedReason': { editable: false, type: "string" },
                    'ReferenceNumber': { editable: true, type: "number" },
                    'Remarks': { editable: true, type: "string" },
                    'PaymentMethod': { editable: false, type: "string" },
                    'BillingCycle': { editable: false, type: "number" },
                    'PRCode': { editable: false, type: "string" },
                    'PREmail': { editable: false, type: "string" },
                    'ContractEmail': { editable: false, type: "string" },
                    'CustomerIDNumber': { editable: false, type: "number" },
                    'OldNIC': { editable: false, type: "number" },
                    'IsValiedAccount': { editable: false, type: "boolean" },
                    'AccountNo': { editable: false, type: "number" },
                    'IsSuspend': { editable: false, type: "boolean" },

                    'ContactNo': { editable: false, type: "string" },
                    'SBUDesc': { editable: false, type: "string" },
                    'PrePostDesc': { editable: false, type: "string" },
                    'SwitchStatusDesc': { editable: false, type: "string" },
                    'OCSStatusDesc': { editable: false, type: "string" },
                    'ProductType': { editable: false, type: "number" },
                }
            }
        },
        pageSize: 10

    });



    $scope.dgGridBulkPayment = new DataGrid();
    $scope.dgGridBulkPayment.options(configBulkPayment);

    $scope.dgGridReceiptDetails = new DataGrid();
    $scope.dgGridReceiptDetails.options(configReceiptDetails);


    $scope.InitA = function (arg) {
        $scope.dgGridBulkPayment.Init(arg);
    };

    $scope.InitB = function (arg) {
        $scope.dgGridReceiptDetails.Init(arg);
    };


    $scope.PageLoad = function () {

        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        //if (defaultDataCookieObj == null)
        {
            var s = $scope.userInfo().outletType;
            console.log($scope.userInfo().outletType);

            BulkPaymentService.GetDefaultData($scope.userInfo().outletType, $scope.IsBackOfficeUser).then(function (response) {
                if (response.data.Code == "0") {


                    $scope.PaymentTypeCollection = response.data.Result.BillingPaymentType;
                    $scope.SbuCollection = response.data.Result.BillingSbu;
                    $scope.PaymentSourceCollection = response.data.Result.BillingPaymentSource;
                    $scope.PaymentMethodCollection = response.data.Result.BillingPaymentMethods;
                    $scope.PaymentModeCollection = response.data.Result.BillingPaymentMode;
                    $scope.ProductCatCollection = response.data.Result.BillingProdCat;
                    $scope.BillingSusAcc = response.data.Result.BillingSusAcc;
                    $scope.BulkPayment.Sbu = 0;
                    $scope.BulkPayment.PaymentMethod = PaymentMethod.Paymentreceived;
                    localStorage.setItem("BulkPaymentDefaultData", JSON.stringify(response.data.Result));
                    //var pof = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                    //console.log("Cookiefff1 : ", JSON.parse(localStorage.getItem("BulkPaymentDefaultData")));
                    $scope.changePageState('NEW');

                    $scope.as(1);
                    $scope.as(2);
                    $scope.as(3);
                    $scope.as(4);
                    $scope.as(5);
                    localStorage.setItem("CurrentProductCategory", $scope.BulkPayment.ProdCat);
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        }
        //else {
        //    $scope.BillingSusAcc = defaultDataCookieObj.BillingSusAcc;
        //    $scope.PaymentTypeCollection = defaultDataCookieObj.BillingPaymentType;
        //    $scope.SbuCollection = defaultDataCookieObj.BillingSbu;
        //    $scope.PaymentSourceCollection = defaultDataCookieObj.BillingPaymentSource;
        //    $scope.PaymentMethodCollection = defaultDataCookieObj.BillingPaymentMethods;
        //    $scope.PaymentModeCollection = defaultDataCookieObj.BillingPaymentMode;
        //    $scope.ProductCatCollection = defaultDataCookieObj.BillingProdCat;
        //}
    }

    $scope.PageLoad();

    //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    changePageState     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    $scope.changeBtnStatus = function (print, save, email, contractSum) {
        $scope.disabled.PrintAllButton = print;
        $scope.disabled.SaveButton = save;
        $scope.disabled.BulkEmailButton = email;
        $scope.disabled.ContractSummaryButton = contractSum;
    };

    $scope.CheckDataExistswhenNEw = function (status) {
        if ($scope.dgGridBulkPayment.data().length > 1) {
            $scope.yesNoMessageParams = {
                Id: 3
            };
            $scope.customMessage = {
                Title: 'Message',
                Message: 'You will lost all the data in the current batch!. Do you want to continue?',
                Id: 3
            };
            $scope.YesNoMessageOpen();
            return;
        } else {
            $scope.changePageState(status);
        }

    }
    $scope.changePageState = function (status) {

        $scope.PaymentModeReset();
        $scope.IsReadyForSubmit = true;
        $scope.BulkPayment.ExistingReference = "";
        $scope.disabled.Remarks = false;
        $scope.disabled.Attachment = false;
        $scope.IsRequestSent = false;
        $scope.PaymentGridSelectAll = false;
        $scope.IsAttach = "NO";
        

        if (status = "NEW") {
            $scope.PrintAllButton12 = true;
            $scope.PrintAllButton12 = true;
            $scope.disabled.SaveButton = false;
            $scope.BulkPayment = {};
            $scope.dgGridBulkPayment.data([bulkEntrySample]);
            $scope.dgGridReceiptDetails.data([]);
            $scope.IsRetrivedCrmDetailsBulk = false;
            $scope.BulkPayment.BillPaymentType = 1;
            $scope.IsLoadingAtFirstTime = true;
            $scope.IsSIMDisabled = false;
            $scope.IsSelectedAll4G = false;
            //$scope.BulkPayment.UploadBtn = true;
            angular.element("input[type='file'].btn").val(null); 
        } else {
            $scope.disabled.SaveButton = true;
            $scope.BulkPayment = {};
            $scope.dgGridBulkPayment.data([bulkEntrySample]);
            $scope.dgGridReceiptDetails.data([]);
            $scope.IsRetrivedCrmDetailsBulk = false;
            $scope.BulkPayment.BillPaymentType = 1;
            //$scope.BulkPayment.UploadBtn = true;
        }
        
        $scope.aa();

        $scope.disabled.BulkEmailButton = true;
        $scope.disabled.BulkCancelButton = true;
        $scope.BulkPayment.User = "";
        $scope.BulkPayment.DateTime = "";
        $scope.BulkPayment.PaymentSourceRec = "";
        $scope.AddPaymentRadioBtnIsDisabled = false;
        $scope.CustIdRadioBtnIsDisabled = false;
        $scope.BillInvRadioBtnIsDisabled = false;
        $scope.UploadRadioBtnIsDisabled = false;
        //$scope.BulkPayment.User = $scope.userInfo().userName;
        //console.log($scope.BulkPayment.User);
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        $scope.BillingSusAcc = defaultDataCookieObj.BillingSusAcc;
        $scope.PaymentTypeCollection = defaultDataCookieObj.BillingPaymentType;
        $scope.SbuCollection = defaultDataCookieObj.BillingSbu;
        $scope.PaymentSourceCollection = defaultDataCookieObj.BillingPaymentSource;
        $scope.PaymentMethodCollection = defaultDataCookieObj.BillingPaymentMethods;
        $scope.PaymentModeCollection = defaultDataCookieObj.BillingPaymentMode;
        $scope.ProductCatCollection = defaultDataCookieObj.BillingProdCat;
        $scope.BulkPayment.Sbu = 0;
        $scope.BulkPayment.PaymentMethod = 10;
        $scope.BulkPayment.IdType = "NIC";
        $scope.BulkPayment.TotalPayAmount = 0;
        $scope.BulkPayment.PaymentMode = "CA";//"CA";
        $scope.BulkPayment.ProdCat = 1;
        $scope.PaymentBu = false;
        $scope.PaymentProdCatDrop = false;
        $scope.IsRetrivedCrmDetails = false;
        $scope.IsRetrivedCrmDetailsBulk = true;
        $scope.PaymentTypeDrop = false;
        var objTemp = new PaymentModeOptions();

        $scope.SelectedPaymentMode = "50";
        objTemp.PaymentMode = "50";
        objTemp.MobileNo = new Date().getTime().toString();
        objTemp.Callback = $scope.paymentModeCallBack;

        $scope.Options = objTemp;  

        $scope.SetPermissionToDefault();
        $scope.GenerateGuid();
        //$scope.BulkPayment.PaymentSourceRec = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { Id: $scope.BulkPayment.PaymentSource })[0].Description : "";
    }
    //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    changePageState     $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

    $scope.CheckRowColor = function () {
        if (!$scope.IsLoadingAtFirstTime) {
            var dGrid = $scope.dgGridBulkPayment.data();

            angular.forEach(dGrid, function (row) {
                $('tr[data-uid="' + row.uid + '"] ').removeClass("bg-highlightBlue");
                $('tr[data-uid="' + row.uid + '"] ').removeClass("bg-highlightRed");
                if ((angular.isUndefined(row.ConnectionReference) || row.ConnectionReference == null) &&
                    (angular.isUndefined(row.ContractNumber) || row.ContractNumber == null)) {

                    
                } 
                else if (row.PrePost == 1) {
                  
                    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //blue
                }
                else {
                    if (row.IsValiedAccount != true) {
                        $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                    }
                }
            });
        }
    }

    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    //-> Modals

    //################      Finder      ###################
    $scope.finderBulkBillingBatchID = {
        title: "Batch Finder",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-BULK-PAYMENT-001",
            mapId: "BILLING-BULK-PAYMENT-001",
            modalId: "finderBulkBillingBatchID", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.BulkPayment.BatchId = data.selectedItem.BatchId;
            $scope.GetBatchDetails();
        },
        open: function () {
            if ($scope.dgGridBulkPayment.data().length > 1) {
                $scope.yesNoMessageParams = {
                    Id: 1
                };
                $scope.customMessage = {
                    Title: 'Message',
                    Message: 'You will lost all the data in the current batch!. Do you want to continue?',
                    Id: 1
                };
                $scope.YesNoMessageOpen();
                return;
            }
            
            $scope.GenerateGuid();
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };



    ///////////////Add Payments Modal//////////////
    var qty = 0;

    $scope.addPaymentsDirectiveParams = {
        title: "Add Payments",
        disable: {
           
        },
        params: {
            Qty: qty++
        },
        callback: function (recCount, totAmount, rBPOCollection) {
            
            console.log(new Date().toLocaleString());
            console.log(recCount, totAmount, rBPOCollection);
            //console.log("Call back : " + qty);
            $scope.RandomBillPaymentObjectCollection = rBPOCollection;
            $scope.BulkPayment.NoOfRecords = recCount;
            $scope.BulkPayment.BatchTotal = totAmount;
            var obj = [];
            var rowId = 1;
            $scope.OldPaymentData = [];

            if ($scope.dgGridBulkPayment.data().length > 1) {
                $scope.OldPaymentData = $scope.dgGridBulkPayment.data();
                rowId = $scope.OldPaymentData.length;
            }
            
            if (rBPOCollection.length < 1) {
                return;
            }
            angular.forEach(rBPOCollection, function (row) {
                $scope.OldPaymentData.push({ 'IsSelected': true, 'RowId': rowId, 'ConnectionReference': row.ConnectionReference, 'Amount': row.Amount, 'ContractNumber': row.ContractNumber, 'ReferenceNumber': row.ReferenceNumber });
                rowId = rowId + 1;
            });
            $scope.dgGridBulkPayment.data($scope.OldPaymentData);

            var totAmt = 0;
            var totCount = 0;
           
            //angular.forEach(obj, function (row) {
            //    //totAmt = (Number(row.Amount) + Number(totAmt)).toFixed(2); //Number(totAmt).toFixed(2) + Number(row.Amount).toFixed(2);
            //    if (row.PrePost == 1) {
            //        row.IsSelected = false;
            //        row.row = true;
            //    }

            //    if (row.PrePost == 2) {
            //        totAmt = (Number(row.Amount) + Number(totAmt)).toFixed(2); //Number(totAmt).toFixed(2) + Number(row.Amount).toFixed(2);
            //        totCount++;
            //    }


            //});
            $scope.BulkPayment.NoOfRecords = totCount;
            $scope.BulkPayment.TotalPayAmount = totAmt > 0 ? Number(totAmt).toFixed(2) : Number(0).toFixed(2);
            $scope.BulkPayment.TotalAmount = Number(totAmt).toFixed(2);
            console.log(new Date().toLocaleString());
            $scope.CreateCRMObjectToValidateBulk();
        },
        data: []
    };

   


    $scope.OpenAddPayments = function () {
        
        localStorage.setItem("CurrentProductCategory", $scope.BulkPayment.ProdCat);
        var _selectedData = [];//_serialNumberList[_selectedItem.InvoiceNo + "." + _selectedItem.ItemCode + "." + _selectedItem.LineNo];
        _selectedData.push({ 'ConnectionReference': '112', 'ContractNumber': '071', 'Amount': '100.00', 'ReferenceNumber': '111' });
        $scope.addPaymentsDirectiveParams.params.RandomBillPaymentObjectCollection = $scope.RandomBillPaymentObjectCollection ? $scope.RandomBillPaymentObjectCollection : [];
        $scope.addPaymentsDirectiveParams.data = _selectedData;//RandomBillPaymentObjectCollection ? RandomBillPaymentObjectCollection : [];

        //open popup
        window._focuse();
        //$scope.$digest();
        //$scope.addPaymentsDirectiveParams.data = _selectedData ? _selectedData.SerialNo : [];

        //open popup
        window._focuse();
        window.paymentsDirectiveCb = $scope.addPaymentsDirectiveParams.callback;


        $("#myAddPaymentsNew").modal({
            show: true,
            backdrop: 'static',
            keyboard: false
        });
        //$scope.infoMessage = new Message(MessageTypes.Empty);
       
       
    }; 

    /////////////////////////////////////////

    //##########################################################################################################################
   

    $scope.addBillInvoicePaymentsParams = {
        title: "Add Payments",
        disable: {

        },
        params: {
            Qty: qty++
        },
        callback: function (recCount, totAmount, rBPOCollection) {
            
            $scope.BulkPayment.NoOfRecords = recCount;
            $scope.BulkPayment.BatchTotal = totAmount;
            
            if (rBPOCollection.length < 1) {
                return;
            }
            
            $scope.dgGridBulkPayment.data(rBPOCollection);
            $scope.rowId = 0;
            angular.forEach($scope.dgGridBulkPayment.data(), function (row) {
                row.RowId = ++$scope.rowId;
            });

            $scope.BulkPayment.NoOfRecords = recCount;
            $scope.BulkPayment.TotalPayAmount = totAmount > 0 ? Number(totAmount).toFixed(2) : Number(0).toFixed(2);
            $scope.BulkPayment.TotalAmount = Number(totAmt).toFixed(2);
        },
        data: []
    };


    //--------------------------------------3gSIM Modal ----------------------------------------------------
    var config3GSIM = {};
    //TODO : toggleSelect
    var config3GSIM = {
        columns: [
                    { field: "IsSelected", headerTemplate: '<input type="checkbox" ng-disabled = "IsSIMDisabled" title="Select all" ng-click="toggleSelect4GSIM($event)" ng-model="IsSelectedAll4G"/>', template: '<input type="checkbox" ng-change="selectThis4GSIM($event)" ng-disabled="dataItem.IsRequested" ng-model="dataItem.IsSelected4GSIM" />', width: "2px" },
                    { field: "ConnectionRef", title: "Connection Reference", width: "10px" },
                    { field: "IsIssued", title: "Is Issued", width: "10px" },
        ],

        navigatable: true,
        editable: false,
        scrollable: true,
        dataBound: function () {
        }
    };

    config3GSIM.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'IsSelected': { editable: false, type: "boolean" },
                    'ConnectionRef': { editable: false, type: "string" },
                    'IsIssued': { editable: false, type: "string" },
                }
            }
        },
        pageSize: 10
    });

    $scope.dgGrid3GSIM = new DataGrid();
    $scope.dgGrid3GSIM.options(config3GSIM);

    $scope.Init3GSIM = function (arg) {
        $scope.dgGrid3GSIM.Init(arg);
    };

    $scope.Open3GSIM = function () {
        $scope.BulkPayment.SIMCount = "";
        //$scope.Get3GConnectionDetails();
        if ($scope.BulkPayment.BatchId == undefined || $scope.BulkPayment.BatchId == '') {
            toaster.error({ type: 'error', title: 'Error', body: "Please select Batch ID", showCloseButton: true });
            return;
        }
        else {
            $scope.Get3GConnectionDetailbyBatchID()

            $("#3GSIMModal").modal({
                show: true,
                backdrop: 'static',
                keyboard: false
            });
        }
        //$scope.Get3GConnectionDetails();
    };

    //Update 3G SIM details to 3GSIMConnections table
    $scope.Update3GSIMDetails = function () {
        var _3GConnections = [];
        angular.forEach($scope.dgGrid3GSIM.data(), function (row) {
            if (row.IsSelected4GSIM) {
                $scope.obj = {
                    BatchId: $scope.BulkPayment.BatchId,
                    ConnectionRef: row.ConnectionRef
                };
                _3GConnections.push($scope.obj);
                //$('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed");
            }
        });

        BulkPaymentService.Update3GSIMDetails(_3GConnections).success(function (response) {
            if (response.Code != MessageTypes.Success) {              
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
            } else {
                $("#3GSIMModal").modal('hide');
                toaster.success({ type: 'Success', title: 'Success', body: response.Message, showCloseButton: true });
                
            }
        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });
    };

    //Get the 3G connection details by Batch ID
    $scope.Get3GConnectionDetailbyBatchID = function () {
        var batchId = $scope.BulkPayment.BatchId;
        if (batchId == undefined || batchId == "") {
            toaster.error({ type: 'error', title: 'Error', body: "Please enter batchId...!", showCloseButton: true });
            return;
        }
        BulkPaymentService.Get3GConnectionDetailbyBatchID(batchId).success(function (response) {
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            } else {
                $scope.dgGrid3GSIM.data(response.Result);

                var dGrid = $scope.dgGrid3GSIM.data();
                //IsSIMDisabled
                angular.forEach(dGrid, function (row) {
                    if (row.IsRequested == true) {
                        $scope.IsSIMDisabled = true;  
                    }
                });
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });

    }

    $scope.toggleSelect4GSIM = function (e) {
        var dataItems4G = $scope.dgGrid3GSIM.data();
        for (var i = 0; i < dataItems4G.length; i++) {
            dataItems4G[i].IsSelected4GSIM = e.target.checked;
        }
        $scope.selectThis4GSIM();
    };

    $scope.selectThis4GSIM = function (e) {
        var dataItems4G = $scope.dgGrid3GSIM.data();
        var isSelected = true;
        var count = 0;
        for (var i = 0; i < dataItems4G.length; i++) {
            var sss = dataItems4G[i].IsSelected4GSIM;

            if (!dataItems4G[i].IsSelected4GSIM) {
                isSelected = false;
            } else {
                count = count + 1;
            }
        }
        $scope.IsSelectedAll4G = isSelected;
        $scope.BulkPayment.SIMCount = count;
    };

    //call the API and retrieve the details
    $scope.Get3GConnectionDetails = function () {
        var GData = $scope.dgGridBulkPayment.data();
        var objAccountList = [];

        angular.forEach(GData, function (row) {
            debugger;
            if (row.ConnectionReference != "" && !angular.isUndefined(row.ConnectionReference) && row.ConnectionReference != null
                || row.ContractNumber != "" && !angular.isUndefined(row.ContractNumber) && row.ContractNumber != null) {
                if (row.CustomerIDType != 'TIN' && row.SBUDesc == "Mobile" && $scope.BulkPayment.ProdCat == 1) {
                    objAccountList.push({ 'MSISDN': row.ConnectionReference });//, 'accountNo': row.AccountNo 
                }
            }
        });

        var obj = {
            "MSISDN": objAccountList,
            "BatchId": $scope.BulkPayment.BatchId
        }
        if (0 < objAccountList.length < 11) {
            BulkPaymentService.Get3GConnectionDetails(obj).success(function (response) {
                if (response.Code != MessageTypes.Success) {
                    $scope.alertMessage = new Message(response.Code, response.Message);
                    return;
                } else {
                    //$scope.alertMessage = new Message(response.Code, response.Message);
                    if (response.Result == true) {
                        $scope.Open3GSIM();
                    }
                    return;
                }
            }).error(function (response) {
                $scope.alertMessage = new Message(response.Code, response.Message); return;
            });
        }
    }

    //--------------------------------------------------------------------------------------------------------

    ///////////////Bulk Excel Verification Modal//////////////

    $scope.bulkExcelVerificationDirectiveParams = {
        title: "Bulk Upload",
        params: {
            //Qty: qty++
        },
        callback: function (accType, data) {
            $scope.IsLoadingAtFirstTime = false;
            $scope.BulkPayment.UploadBtnIsDisabled = true;
            $scope.dgGridBulkPayment.data(data);
            $scope.AccountType = accType;
            //$scope.GenerateTotalAmountToPay(true);
            $scope.IsRetrivedCrmDetailsBulk = false;
            $("#myBulkExcelVerification").hide();
            var totAmt = 0;
            var totCount = 0;
            var suspenseAmt = 0;
            var suspenseCount = 0;

            angular.forEach(data, function (row) {

                if (row.IsSuspend) {
                    suspenseAmt = (Number(suspenseAmt) + Number(row.Amount)).toFixed(2);
                    suspenseCount++;
                }
                if (row.PrePost == 1) {
                    row.IsSelected = false;
                    row.row = true;
                }

                if (row.PrePost == 2) {
                    totAmt = (Number(row.Amount) + Number(totAmt)).toFixed(2); //Number(totAmt).toFixed(2) + Number(row.Amount).toFixed(2);
                    totCount++;
                }

            });
            $scope.CheckRowColor();
            $scope.BulkPayment.NoOfRecords = totCount;
            $scope.BulkPayment.TotalAmount = Number(totAmt).toFixed(2);
            $scope.BulkPayment.TToSuspendcount = suspenseCount;
            $scope.BulkPayment.TTSuspendAmount = Number(suspenseAmt).toFixed(2);
            $scope.BulkPayment.TotalPayAmount = totAmt > 0 ? Number(totAmt).toFixed(2) : Number(0).toFixed(2);
           
        },
        data: []
    };



    $scope.OpenBulkExcelVerification = function () {
        if ($scope.BulkPayment.Sbu == undefined || $scope.BulkPayment.Sbu == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Please select single BU!", showCloseButton: true });
            return;
        }

        if ($scope.BulkPayment.BillPaymentType == 3) {

            var gridData = $scope.dgGridBulkPayment.data();
            

            var _selectedData = {
                'Sbu': $scope.BulkPayment.Sbu,
                'ProductCat': $scope.BulkPayment.ProdCat,
                'PaymentType': $scope.BulkPayment.PaymentType,
                'PaymentSource': $scope.BulkPayment.PaymentSource,
                'PaymentMethod': $scope.BulkPayment.PaymentMethod,
                'ExcelData': []
            };
            $scope.bulkExcelVerificationDirectiveParams.params.BulkExcelPaymentObjectCollection = _selectedData ? _selectedData : [];
            $scope.bulkExcelVerificationDirectiveParams.data = _selectedData;//RandomBillPaymentObjectCollection ? RandomBillPaymentObjectCollection : [];

            //open popup
            window._focuse();
            $("#myBulkExcelVerification").modal('show');

            $scope.PaymentMethodDrop = true;
            $scope.PaymentTypeDrop = true;
            $scope.PaymentSourceDrop = true;
            $scope.PaymentBu = true;
            $scope.PaymentProdCatDrop = true;

        }
  
        
        //$scope.infoMessage = new Message(MessageTypes.Empty);
  
        
    };

    /////////////////////////////////////////
    ///////////////Posting Status Modal//////////////


    $scope.postingStatusDirectiveParams = {
        title: "Posting Status",
        params: {


        },
        callback: function () {

        },
        data: []
    };


    
    $scope.finderInvoiceNo = {
        title: "Invoice Finder",
        info: {
            appId: "ZBC-DCPOS",
            uiId: "POS-SRF-GENERATE-RECEIPT-02",
            mapId: "SRF-GENERATE-RECEIPT-002",
            modalId: "finderInvoiceNo", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.receipt.InvoiceId = data.selectedItem.InvoiceNo;
            var entryType = $scope.receipt.etypeNew;
            if (entryType == EntryType.CB) {
                $scope.receipt.DepositeCode = data.selectedItem.ItemCode;
                if (!angular.isUndefined(data.selectedItem)) {
                    $scope.depositLineNo = data.selectedItem.LineA;
                } else {
                    $scope.depositLineNo = 1;
                }

            } else {
                $scope.receipt.DepositeCode = 0;
                $scope.depositLineNo = 1;
            }
            $scope.LoadInvoiceDetailsByInvoiceId("invoice");
        },
        open: function () {
            this.info.onLoad = true;
            var objTemp = new Array();
            

            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
            //$scope.LoadInvoicePopUp();
        }
    };
    //######################################################################################################################################################

    // Payment mode details

    var objTemp = new Array();

    var aMessage = "";
    var bMessage = "";
    var cMessage = "";
    var dMessage = "";
    var eMessage = "";

    $scope.PayType = 1;
    $scope.AccountNoCustRet = "";
    $scope.SinglePaymentModeExistingReference = "";
    $scope.SinglePaymentModeSubCat = "";

    $scope.isSuccessSavingValidation = true;




    $scope.isTaxablle = true;

    $scope.GetPaymentSourseById = function () {
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        //$scope.BulkPayment.PaymentSource =
        if (defaultDataCookieObj == null || defaultDataCookieObj == undefined) {
            return;
        }
        return defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { Id: $scope.BulkPayment.PaymentSource })[0].CcbsPaymentSource : "";
    }

    $scope.GetPaymentSourseByCcbsPaymentSource = function () {
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        //$scope.BulkPayment.PaymentSource =
        if (defaultDataCookieObj == null || defaultDataCookieObj == undefined) {
            return;
        }
        return defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: $scope.BulkPayment.PaymentSource })[0].Id : "";
    }

    //$scope.SetPaymentMode = function () {
    //    var objTemp = new PaymentModeOptions();


    //    $scope.SelectedPaymentMode = $scope.BulkPayment.PaymentMode;
    //    objTemp.PaymentMode = $scope.SelectedPaymentMode;
    //    objTemp.MobileNo = new Date().getTime().toString();
    //    objTemp.Callback = $scope.paymentModeCallBack;
    //    objTemp.Amount = Number(0).toFixed(2);
    //    objTemp.CustomerRef = "";
    //    var SbuId = '';
    //    var isMultipleSbuExists = false;



    //    $scope.Options = objTemp;

    //}


    //####################################      Finder Region Bulk Payment       #####################################################################


    $scope.BulkPayment = {};

    // Search By BatchNo


    $scope.BulkPaymentBatchID =
    {

        title: "Search by Batch ID",
        info: {
            // appId: "ZBC-DCPOS",
            // uiId: "POS-FLOAT-FLOATMSTER",
            //  mapId: "FLOAT-TRANSFER-FLOATMSTER",
            modalId: "BulkPaymentBatchID",
            onLoad: false

        },
        params: [],
        callback: function (data) {

            // $scope.BulkPayment.Code = data.selectedItem.BulkPaymentCode;
            // $scope.GetBulkPaymentDetail();
            // $scope.changePageState("SEARCH");
        },
        open: function () {
            this.info.onLoad = true;

            //$scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };


    //  ###################################################################################################################################

    //####################################      Finder Region Receipt Details       #########################################


    $scope.ReceiptDetails = {};

    // Search By BatchNo


    $scope.ReceiptDetailsBatchID =
    {

        title: "Search by Batch ID",
        info: {
            // appId: "ZBC-DCPOS",
            // uiId: "POS-FLOAT-FLOATMSTER",
            //  mapId: "FLOAT-TRANSFER-FLOATMSTER",
            modalId: "ReceiptDetailsBatchID",
            onLoad: false

        },
        params: [],
        callback: function (data) {

            // $scope.BulkPayment.Code = data.selectedItem.BulkPaymentCode;
            // $scope.GetBulkPaymentDetail();
            //  $scope.changePageState("SEARCH");
        },
        open: function () {
            this.info.onLoad = true;

            
            $("#" + this.info.modalId).modal('show');

        }
    };


    //  ###########################################################################################################################################################



    //  ###################

    // Customer ID Type dropdown
    $scope.CustomerIdTypeCollection = [{ Id: "NIC", Description: "NIC" }, { Id: "PP", Description: "PP" }, { Id: "OTHER", Description: "Other" }];//{ Id: "TIN", Description: "BR" }, 

    // print options dropdown
    $scope.OptionsPrintingOption = [
      { text: "Only one receipt per page", value: "1" },
      { text: "All receipts in one page", value: "2" }

    ];

    $scope.SetPermissionToDefault = function () {
        var permissionCodes = AuthService.getProfile().permission;

        if (permissionCodes.indexOf("41001") == -1) {
            $scope.PaymentSourceDrop = true;
            $scope.PaymentTypeDrop = true;
            $scope.PaymentMethodDrop = true;
            var d = $scope.userInfo();
            if ($scope.userInfo().outletType == 1) {
                $scope.BulkPayment.PaymentType = PaymentType.DAPOutlets;

            } else {
                $scope.BulkPayment.PaymentType = PaymentType.Franchises;
            }
        } else {
            $scope.PaymentSourceDrop = false;
            $scope.PaymentMethodDrop = false;

            if ($scope.userInfo().outletType == 1) {
                $scope.BulkPayment.PaymentType = PaymentType.DAPOutlets;

            } else {
                $scope.BulkPayment.PaymentType = PaymentType.Franchises;
            }
        }

        //if (permissionCodes.indexOf("41002") == -1) {
        //    $scope.PaymentSourceDrop = true;
        //}

        //if (permissionCodes.indexOf("41003") == -1) {
        //    $scope.PaymentMethodDrop = true;
        //}
    }
    
    $scope.SetPermissionToDefault();

    $scope.toggleSelect = function (e) {
        var dataItems = $scope.dgGridBulkPayment.data();
        $scope.totAmount = 0;
        for (var i = 0; i < dataItems.length; i++) {
            if (!dataItems[i].row) {
                dataItems[i].IsSelected = e.target.checked;
            } else {
                dataItems[i].IsSelected = false;
            }
            
            if (e.target.checked == true && !dataItems[i].row) {
                $scope.totAmount = $scope.totAmount + dataItems[i].Amount;
            }
        }
        $scope.BulkPayment.TotalPayAmount = $scope.totAmount > 0 ? Number($scope.totAmount).toFixed(2) : Number(0).toFixed(2);
        $scope.selectThis();

    };

    $scope.selectThis = function (e) {
        $scope.selectedRow = e;
        $scope.totAmount = 0;
        $scope.rowCount = 0;
        var isSelected = true;
        var dataItems = $scope.dgGridBulkPayment.data();
        for (var i = 0; i < dataItems.length; i++) {
            var sss = dataItems[i].IsSelected;
            if (!dataItems[i].IsSelected) {
                isSelected = false;
            } else {
                var f = $scope.totAmount;
                $scope.rowCount++;
                var g = dataItems[i].Amount;
                if (g != null) {
                    //$scope.totAmount = $scope.totAmount + Number(dataItems[i].Amount).toFixed(2);
                    $scope.totAmount = (Number($scope.totAmount) + Number(dataItems[i].Amount)).toFixed(2);
                }
                
            }
        }
        $scope.BulkPayment.NoOfRecords = $scope.rowCount;
        $scope.BulkPayment.TotalAmount = $scope.totAmount > 0 ? Number($scope.totAmount).toFixed(2) : Number(0).toFixed(2);
        $scope.BulkPayment.TotalPayAmount = $scope.totAmount > 0 ? Number($scope.totAmount).toFixed(2) : Number(0).toFixed(2);
        $scope.IsSelectedAll = isSelected;

    };


    $scope.toggleSelect1 = function (e) {

        var dataItems1 = $scope.dgGridReceiptDetails.data();
        $scope.totAmount = 0;
        for (var i = 0; i < dataItems1.length; i++) {
            dataItems1[i].IsSelected = e.target.checked;
            if (e.target.checked == true) {
                $scope.totAmount = $scope.totAmount + dataItems1[i].Amount;
            }
        }
        $scope.selectThis1();

    };

    $scope.selectThis1 = function (e) {
        
        var dataItems1 = $scope.dgGridReceiptDetails.data();
        var isSelected = true;
        for (var i = 0; i < dataItems1.length; i++) {
            var sss = dataItems1[i].IsSelected;
            if (!dataItems1[i].IsSelected) {
                isSelected = false;
            } else {
                var f = $scope.totAmount;
                var g = dataItems1[i].Amount;
                if (g != null) {
                    //$scope.totAmount = $scope.totAmount + Number(dataItems[i].Amount).toFixed(2);
                    $scope.totAmount = (Number($scope.totAmount) + Number(dataItems1[i].Amount)).toFixed(2);
                }

            }
        }
        $scope.IsSelectedAll = isSelected;

    };

    

    $scope.LoadPaymentSourseByPaymentType = function () { 
        debugger;
        var permissionCodes = AuthService.getProfile().permission;
        if ($scope.PaymentSourceDrop && $scope.PaymentTypeDrop) {
            var sou = [{ 'Description': $scope.userInfo().outletDescription, 'Id': $scope.userInfo().outletCode }];
            $scope.PaymentSourceCollection = sou;
            //$scope.PaymentSourceCollection = "";
            $scope.BulkPayment.PaymentMethod = PaymentMethod.Paymentreceived;
            return;
        }

        var payType = 0;
        if (permissionCodes.indexOf("41001") != -1) {
            payType = $scope.BulkPayment.PaymentType;
            if (payType == null) {
                return;
            }
        } else {
            //payType = $scope.userInfo().outletType;
            
        }

        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        
        //$scope.BulkPayment.PaymentSource = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: response.Result.OutletCode })[0].Id : "";
        $scope.PaymentSou = [];
        angular.forEach(defaultDataCookieObj.BillingPaymentSource, function (item) {
            if (payType == 0) {
                $scope.PaymentSou.push({ "Id": item.CcbsPaymentSource, "Description": item.Description });
            }
            else if (item.PaymentType == payType) {
                
                $scope.PaymentSou.push({ "Id": item.CcbsPaymentSource, "Description": item.Description });
            }
        });
        $scope.PaymentSourceCollection = $scope.PaymentSou;

        //BulkPaymentService.GetPaymentSource(payType).then(function (response) {
        //    if (response.data.Code == "0") {
        //        $scope.PaymentSourceCollection = response.data.Result;
        //    } else {
        //        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        //    }
        //}, function (response) {
        //    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        //});
    }



    $scope.GetCustomerDetailsByCustomerId = function () {
        BulkPaymentService.GetCustomerDetailsByCustomerId().then(function (response) {
            if (response.data.Code == "0") {

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }

    $scope.GetBillDetailsByCustomerId = function () {
        BulkPaymentService.GetBillDetailsByCustomerId().then(function (response) {
            if (response.data.Code == "0") {

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }

    $scope.GetBillDetailsByBullInvoiceId = function () {
        BulkPaymentService.GetBillDetailsByBullInvoiceId().then(function (response) {
            if (response.data.Code == "0") {

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }

    $scope.ValidateIdNumber = function (NicType) {
        if (NicType == 2) {
            var id = $scope.BulkPayment.OldNic;
            var regex = /^[0-9]\d*[V|v|x|X]$/;
            if (id.length != 10) {
                return false;
            }
            if (!regex.test(id)) {
                return false;
            } else {
                return true;
            }

        } else {
            var id = $scope.BulkPayment.NewNic;
            var regex = /^[0-9]\d*$/;
            if (id.length != 12) {
                return false;
            }
            if (!regex.test(id)) {
                return false;
            } else {
                return true;
            }
        }
    }

    $scope.FindCustomerByNIC = function (NicType) {
        if ($scope.BulkPayment.IsCustomerId) {
            var custId = "";
            if ($scope.BulkPayment.IdType == "NIC") {
                if (!$scope.ValidateIdNumber(NicType)) {
                    toaster.error({ type: 'error', title: 'Error', body: "NIC format is invalied!", showCloseButton: true });
                    return;
                }
                if (NicType == 1) {
                    custId = $scope.BulkPayment.NewNic
                } else {
                    custId = $scope.BulkPayment.OldNic
                }
            } else {
                custId = $scope.BulkPayment.NewNic
            }

            var obj = {
                "custRef": $scope.BulkPayment.NewNic,
                "OldCustRef": $scope.BulkPayment.OldNic,
                "CustRefType": $scope.BulkPayment.IdType,
                "productCategory": $scope.BulkPayment.ProdCat,
                "sbu": $scope.BulkPayment.Sbu,
                "billInvoiceNo": $scope.BulkPayment.BillInvoiceNo,
                "reqType": 1,
                "accounts": []
            }

            BulkPaymentService.FindCustomerByNIC(obj).then(function (response) {
                if (response.data.Code == "0") {
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
            });
        }


    }

    $scope.CustomerIdChange = function () {
        if ($scope.BulkPayment.IdType == "NIC") {
            $scope.labelNameCustomerId = 'Old NIC';
        } else {
            $scope.labelNameCustomerId = '';
        }
        
    }

    $scope.aa = function () {


        if ($scope.BulkPayment.BillPaymentType == 0) {
            $scope.BulkPayment.AddPaymentBtnIsDisabled = false;
            $scope.BulkPayment.CustIdIsDisabled = true;
            $scope.BulkPayment.BillInvIsDisabled = true;
            $scope.BulkPayment.UploadBtnIsDisabled = true;
            //$scope.BulkPayment.Sbu = 0;
            $scope.OpenAddPayments();
            //var GData = $scope.dgGridBulkPayment.data();
            //angular.forEach(GData, function (row) {
            //    gRow.ConnectionReferenceGridDisabled = false;
            //    gRow.ContractNumberGridDisabled = false;
            //});

        } else {

            if ($scope.BulkPayment.BillPaymentType == 1) {
                //$scope.BulkPayment.Sbu = 0;
                $scope.BulkPayment.AddPaymentBtnIsDisabled = true;
                $scope.BulkPayment.CustIdIsDisabled = false;
                $scope.BulkPayment.BillInvIsDisabled = true;
                $scope.BulkPayment.UploadBtnIsDisabled = true;
            } else if ($scope.BulkPayment.BillPaymentType == 2) {
                //$scope.BulkPayment.Sbu = 0;
                $scope.BulkPayment.AddPaymentBtnIsDisabled = true;
                $scope.BulkPayment.CustIdIsDisabled = true;
                $scope.BulkPayment.BillInvIsDisabled = false;
                $scope.BulkPayment.UploadBtnIsDisabled = true;
            } else if ($scope.BulkPayment.BillPaymentType == 3) {
                //$scope.BulkPayment.Sbu = 0;
                $scope.BulkPayment.AddPaymentBtnIsDisabled = true;
                $scope.BulkPayment.CustIdIsDisabled = true;
                $scope.BulkPayment.BillInvIsDisabled = true;
                $scope.BulkPayment.UploadBtnIsDisabled = false;
            }
            $scope.CustomerIdChange();
            //var GData = $scope.dgGridBulkPayment.data();
            //angular.forEach(GData, function (row) {
            //    gRow.ConnectionReferenceGridDisabled = true;
            //    gRow.ContractNumberGridDisabled = true;
            //});
        }

    }

    $scope.aa();
    

    // #########################        START Retrive CRM details  ##############################

    $scope.GenerateGRow = function (res, resHeader) {

        var gRow = new billingData();
        gRow.IsValiedAccount = true;
        gRow.IsRetrivedCrmDetails = false;
        gRow.PrePost = res.accountType;
        gRow.Hybrid = res.hybridFlag == 1 ? "Y" : "N";
        gRow.ProductType = res.productType;
        gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'GSM and DTV' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
        gRow.ContactNo = res.ContactNo;
        gRow.ConnectionReference = res.connRef;
        gRow.ContractNumber = res.contractNo;
        gRow.CustomerName = resHeader.custName;
        gRow.CustomerIDType = resHeader.custRefType;
        gRow.DisconnectedCode = res.disconReasonCode;
        gRow.SwitchStatus = res.conStatus;
        gRow.SwitchStatusDesc = res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense';
        gRow.DisconnectedReason = res.disconReason;
        gRow.BillingCycle = res.billCycle;
        gRow.PRCode = res.prCode;
        gRow.PREmail = res.prEmail;
        gRow.ContractEmail = res.contractEmail;
        gRow.CustomerIDNumber = resHeader.custRef;
        gRow.OldNIC = $scope.BulkPayment.IdType == "OTHER" ? "N/A" : resHeader.oldCustRef;
        gRow.AccountNo = res.accountNo;
        gRow.SBU = res.Sbu;
        gRow.ProductType = res.productType;
        gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'GSM and DTV' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
        gRow.IsSelected = true;
        gRow.ConnectionReferenceGridDisabled = false;
        gRow.ContractNumberGridDisabled = false;
        gRow.AmountGridDisabled = false;
        gRow.ReferenceNumberGridDisabled = true;
        gRow.RemarksGridDisabled = true;
        gRow.Remarks = $scope.BulkPayment.Remarks;

        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        if (defaultDataCookieObj != null) {
            gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";

        }
        gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";

        gRow.PaymentMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Id: $scope.BulkPayment.PaymentMethod })[0].Description : "";
        return gRow;
    }

    $scope.RequetCRMDetails = function (cRMAccList) {
        $scope.BulkPayment.ExistingReference = "";
        $scope.PaymentModeReset();
        $scope.BulkPayment.PaymentMode = "CA";
        if ($scope.BulkPayment.BillPaymentType == 1) {
            if (($scope.BulkPayment.NewNic == null && $scope.BulkPayment.OldNic == null) ||
                ($scope.BulkPayment.NewNic == undefined && $scope.BulkPayment.OldNic == undefined) ||
                $scope.BulkPayment.NewNic == "" && $scope.BulkPayment.OldNic == "") {
                return;
            }

        }

        $scope.IsLoadingAtFirstTime = false;
        $cookieStore.put("accessToken", "");
        var obj = {
            "custRef": $scope.BulkPayment.IdType == "NIC" ? $scope.BulkPayment.NewNic : $scope.BulkPayment.OldNic,
            "OldCustRef": $scope.BulkPayment.IdType == "NIC" ? $scope.BulkPayment.OldNic : "",
            "CustRefType": $scope.BulkPayment.IdType,
            "productCategory": $scope.BulkPayment.ProdCat,
            "sbu": $scope.BulkPayment.Sbu,
            "billInvoiceNo": $scope.BulkPayment.BillInvoiceNo,
            "reqType": 1,
            "accounts": cRMAccList,
            "accessToken": $cookieStore.get('accessToken')
        }

        console.log(new Date().toLocaleString());
        BulkPaymentService.ValidateRecordsFromCRM(obj).success(function (response) {
            console.log(new Date().toLocaleString());
            if (response.Result.isNewAccessToken) {
                $cookieStore.put("accessToken", response.Result.accessToken);
            }
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            } else {
                if ($scope.BulkPayment.BillPaymentType == 1 || $scope.BulkPayment.BillPaymentType == 2) {
                    var isCrmFail = true;
                    var gData = [];
                    if ($scope.BulkPayment.BillPaymentType == 1) {
                        if (response.Result.length < 1) {
                            toaster.error({ type: 'error', title: 'Error', body: "The NIC/PR/BR/PP number entered cannot be found in the CRM system!", showCloseButton: true });
                            return;
                        }
                    } else {
                        if (response.Result.length < 1) {
                            toaster.error({ type: 'error', title: 'Error', body: "The Bill Invoice number entered cannot be found in the CRM system!", showCloseButton: true });
                            return;
                        }
                    }

                    angular.forEach(response.Result.profiles, function (resHeader) {
                        $scope.PaymentProdCatDrop = true;
                        $scope.BulkPayment.NewNic = resHeader.custRef;
                        $scope.BulkPayment.IdType = resHeader.custRefType;
                        if (resHeader.accounts.length < 1) {
                            toaster.error({ type: 'error', title: 'Error', body: "Accounts not found for relevant Id!", showCloseButton: true });
                            return;
                        } else {
                            if (response.Result.length < 1) {
                                toaster.error({ type: 'error', title: 'Error', body: "Accounts not found for relevant Bill Invoice number!", showCloseButton: true });
                                return;
                            }
                        }
                        angular.forEach(resHeader.accounts, function (res) {
                            
                            if ($scope.BulkPayment.BillPaymentType == 0 && res.accountType == 1) {
                                isCrmFail = false;
                                gData.push($scope.GenerateGRow(res, resHeader));
                            }
                            else if (res.accountType == 2) {
                                isCrmFail = false;
                                gData.push($scope.GenerateGRow(res, resHeader));
                            } else {
                                
                            }
                            

                        });
                        
                    });


                    $scope.IsRetrivedCrmDetailsBulk = false;

                    if ($scope.BulkPayment.BillPaymentType == 1) {
                        
                        $scope.dgGridBulkPayment.data(gData);
                        $scope.rowId = 0;
                        angular.forEach($scope.dgGridBulkPayment.data(), function (gRow) {
                            gRow.ConnectionReferenceGridDisabled = true;
                            gRow.ContractNumberGridDisabled = true;
                            gRow.AmountGridDisabled = false;
                            gRow.ReferenceNumberGridDisabled = false;
                            gRow.RemarksGridDisabled = false;
                            gRow.RowId = ++$scope.rowId;
                        });
                    }

                    if ($scope.BulkPayment.BillPaymentType == 2) {
                        window._focuse();
                        window.paymentsDirectiveCb = $scope.addBillInvoicePaymentsParams.callback;
                        
                        $("#popAddBillInvoicePayments").modal({
                            show: true,
                            backdrop: 'static',
                            keyboard: false
                        });
                        
                        $scope.$broadcast('popAddBillInvoicePayments.CustomEvent', gData);
                    }

                } else {
                    var d = [];
                    var rowId = 0;
                    var GData = $scope.dgGridBulkPayment.data();
                    angular.forEach(GData, function (gRow) {
                        var isCrmFail = true;
                        rowId++;
                        gRow.RowId = rowId;

                        angular.forEach(response.Result.profiles, function (resHeader) {

                            if (resHeader.accounts.length < 1) {
                                toaster.error({ type: 'error', title: 'Error', body: "Accounts not found for relevant Id!", showCloseButton: true });
                                return;
                            } else {
                                if (response.Result.length < 1) {
                                    toaster.error({ type: 'error', title: 'Error', body: "Accounts not found for relevant Bill Invoice number!", showCloseButton: true });
                                    return;
                                }
                            }

                            $scope.PaymentProdCatDrop = true;

                            angular.forEach(resHeader.accounts, function (res) {
                                $scope.IsRetrivedCrmDetailsBulk = false;
                                if ($scope.BulkPayment.BillPaymentType == 0 && res.accountType == 1) {
                                    if (res.connRef != null && res.connRef == gRow.ConnectionReference) {
                                        gRow.IsValiedAccount = true;

                                        isCrmFail = false;
                                        gRow.IsRetrivedCrmDetails = false;
                                        gRow.PrePost = res.accountType;
                                        gRow.IsSelected = false;
                                        gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                        gRow.Hybrid = res.hybridFlag == 1 ? "Y" : "N";
                                        gRow.ConnectionReference = res.connRef;
                                        gRow.ContractNumber = res.contractNo;
                                        gRow.CustomerName = resHeader.custName;
                                        gRow.CustomerIDType = resHeader.custRefType;
                                        gRow.DisconnectedCode = res.disconReasonCode;
                                        gRow.SwitchStatus = res.conStatus;
                                        gRow.SwitchStatusDesc = res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense';
                                        gRow.DisconnectedReason = res.disconReason;
                                        gRow.BillingCycle = res.billCycle;
                                        gRow.PRCode = res.prCode;
                                        gRow.PREmail = res.prEmail;
                                        gRow.ContractEmail = res.contractEmail;
                                        gRow.CustomerIDNumber = resHeader.custRef;
                                        gRow.OldNIC = resHeader.oldCustRef;
                                        gRow.AccountNo = res.accountNo;
                                        gRow.SBU = res.Sbu;
                                        gRow.ProductType = res.productType;
                                        gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'GSM and DTV' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                        gRow.ContactNo = res.ContactNo;
                                        gRow.Remarks = $scope.BulkPayment.Remarks;

                                        if ($scope.BulkPayment.BillPaymentType != 3) {
                                            gRow.ConnectionReferenceGridDisabled = true;
                                            gRow.ContractNumberGridDisabled = true;
                                            gRow.AmountGridDisabled = false;
                                            gRow.ReferenceNumberGridDisabled = false;
                                            gRow.RemarksGridDisabled = false;
                                        } else {
                                            gRow.ConnectionReferenceGridDisabled = true;
                                            gRow.ContractNumberGridDisabled = true;
                                            gRow.AmountGridDisabled = true;
                                            gRow.ReferenceNumberGridDisabled = true;
                                            gRow.RemarksGridDisabled = true;
                                        }

                                        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                                        if (defaultDataCookieObj != null) {
                                            gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";

                                        }
                                        gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                        gRow.PaymentMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Id: $scope.BulkPayment.PaymentMethod })[0].Description : "";
                                        gRow.IsSelected = true;
                                    } else {
                                        if (res.contractNo != null && res.contractNo == gRow.ContractNumber) {
                                            gRow.IsValiedAccount = true;

                                            isCrmFail = false;
                                            gRow.IsRetrivedCrmDetails = false;
                                            gRow.PrePost = res.accountType;
                                            gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                            gRow.Hybrid = res.hybridFlag == 1 ? "Y" : "N";
                                            gRow.ConnectionReference = res.connRef;
                                            gRow.ContractNumber = res.contractNo;
                                            gRow.CustomerName = resHeader.custName;
                                            gRow.CustomerIDType = resHeader.custRefType;
                                            gRow.DisconnectedCode = res.disconReasonCode;
                                            gRow.SwitchStatus = res.conStatus;
                                            gRow.SwitchStatusDesc = res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense';
                                            gRow.DisconnectedReason = res.disconReason;
                                            gRow.BillingCycle = res.billCycle;
                                            gRow.PRCode = res.prCode;
                                            gRow.PREmail = res.prEmail;
                                            gRow.ContractEmail = res.contractEmail;
                                            gRow.CustomerIDNumber = resHeader.custRef;
                                            gRow.OldNIC = resHeader.oldCustRef;
                                            gRow.AccountNo = res.accountNo;
                                            gRow.SBU = res.Sbu;
                                            gRow.ProductType = res.productType;
                                            gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'GSM and DTV' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                            gRow.ContactNo = res.ContactNo;
                                            gRow.Remarks = $scope.BulkPayment.Remarks;

                                            if ($scope.BulkPayment.BillPaymentType != 3) {
                                                gRow.ConnectionReferenceGridDisabled = true;
                                                gRow.ContractNumberGridDisabled = true;
                                                gRow.AmountGridDisabled = false;
                                                gRow.ReferenceNumberGridDisabled = false;
                                                gRow.RemarksGridDisabled = false;
                                            } else {
                                                gRow.ConnectionReferenceGridDisabled = true;
                                                gRow.ContractNumberGridDisabled = true;
                                                gRow.AmountGridDisabled = true;
                                                gRow.ReferenceNumberGridDisabled = true;
                                                gRow.RemarksGridDisabled = true;
                                            }

                                            var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                                            if (defaultDataCookieObj != null) {
                                                gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";

                                            }
                                            gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                            gRow.PaymentMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Id: $scope.BulkPayment.PaymentMethod })[0].Description : "";
                                        }
                                    }
                                }
                                else if (res.accountType == 2) {
                                    if (res.connRef != null && res.connRef == gRow.ConnectionReference) {
                                        gRow.IsValiedAccount = true;

                                        isCrmFail = false;
                                        gRow.IsRetrivedCrmDetails = false;
                                        gRow.PrePost = res.accountType;
                                        gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                        gRow.Hybrid = res.hybridFlag == 1 ? "Y" : "N";
                                        gRow.ConnectionReference = res.connRef;
                                        gRow.ContractNumber = res.contractNo;
                                        gRow.CustomerName = resHeader.custName;
                                        gRow.CustomerIDType = resHeader.custRefType;
                                        gRow.DisconnectedCode = res.disconReasonCode;
                                        gRow.SwitchStatus = res.conStatus;
                                        gRow.SwitchStatusDesc = res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense';
                                        gRow.DisconnectedReason = res.disconReason;
                                        gRow.BillingCycle = res.billCycle;
                                        gRow.PRCode = res.prCode;
                                        gRow.PREmail = res.prEmail;
                                        gRow.ContractEmail = res.contractEmail;
                                        gRow.CustomerIDNumber = resHeader.custRef;
                                        gRow.OldNIC = resHeader.oldCustRef;
                                        gRow.AccountNo = res.accountNo;
                                        gRow.SBU = res.Sbu;
                                        gRow.ProductType = res.productType;
                                        gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'GSM and DTV' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                        gRow.ContactNo = res.ContactNo;
                                        gRow.Remarks = $scope.BulkPayment.Remarks;
                                        gRow.IsSelected = gRow.IsSelected;
                                        if ($scope.BulkPayment.BillPaymentType != 3) {
                                            gRow.ConnectionReferenceGridDisabled = true;
                                            gRow.ContractNumberGridDisabled = true;
                                            gRow.AmountGridDisabled = false;
                                            gRow.ReferenceNumberGridDisabled = false;
                                            gRow.RemarksGridDisabled = false;
                                        } else {
                                            gRow.ConnectionReferenceGridDisabled = true;
                                            gRow.ContractNumberGridDisabled = true;
                                            gRow.AmountGridDisabled = true;
                                            gRow.ReferenceNumberGridDisabled = true;
                                            gRow.RemarksGridDisabled = true;
                                        }

                                        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                                        if (defaultDataCookieObj != null) {
                                            gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";

                                        }
                                        gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                        gRow.PaymentMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Id: $scope.BulkPayment.PaymentMethod })[0].Description : "";
                                    }
                                    else if (res.contractNo != null && res.contractNo == gRow.ContractNumber) {
                                        gRow.IsValiedAccount = true;

                                            isCrmFail = false;
                                            gRow.IsRetrivedCrmDetails = false;
                                            gRow.PrePost = res.accountType;
                                            gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                            gRow.Hybrid = res.hybridFlag == 1 ? "Y" : "N";
                                            gRow.ConnectionReference = res.connRef;
                                            gRow.ContractNumber = res.contractNo;
                                            gRow.CustomerName = resHeader.custName;
                                            gRow.CustomerIDType = resHeader.custRefType;
                                            gRow.DisconnectedCode = res.disconReasonCode;
                                            gRow.SwitchStatus = res.conStatus;
                                            gRow.SwitchStatusDesc = res.conStatus == SwitchStatus.Connected ? 'Connected' : res.conStatus == SwitchStatus.Disconnected ? 'Disconnected' : res.conStatus == SwitchStatus.NotConnected ? 'Not Connected' : 'Suspense';
                                            gRow.DisconnectedReason = res.disconReason;
                                            gRow.BillingCycle = res.billCycle;
                                            gRow.PRCode = res.prCode;
                                            gRow.PREmail = res.prEmail;
                                            gRow.ContractEmail = res.contractEmail;
                                            gRow.CustomerIDNumber = resHeader.custRef;
                                            gRow.OldNIC = resHeader.oldCustRef;
                                            gRow.AccountNo = res.accountNo;
                                            gRow.SBU = res.Sbu;
                                            gRow.ProductType = res.productType;
                                        gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'GSM and DTV' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                            gRow.ContactNo = res.ContactNo;
                                            gRow.Remarks = $scope.BulkPayment.Remarks;
                                            gRow.IsSelected = gRow.IsSelected;
                                            if ($scope.BulkPayment.BillPaymentType != 3) {
                                                gRow.ConnectionReferenceGridDisabled = true;
                                                gRow.ContractNumberGridDisabled = true;
                                                gRow.AmountGridDisabled = false;
                                                gRow.ReferenceNumberGridDisabled = false;
                                                gRow.RemarksGridDisabled = false;
                                            } else {
                                                gRow.ConnectionReferenceGridDisabled = true;
                                                gRow.ContractNumberGridDisabled = true;
                                                gRow.AmountGridDisabled = true;
                                                gRow.ReferenceNumberGridDisabled = true;
                                                gRow.RemarksGridDisabled = true;
                                            }

                                            var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                                            if (defaultDataCookieObj != null) {
                                                gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";
                                            }
                                            gRow.PrePostDesc = res.accountType == 1 ? "Pre" : "Post";
                                            gRow.PaymentMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Id: $scope.BulkPayment.PaymentMethod })[0].Description : "";
                                    } else {
                                        gRow.IsSelected = gRow.IsSelected;
                                    }
                                    
                                }
                                
                            });
                        });

                        if (isCrmFail) {
                            gRow.IsRetrivedCrmDetails = true;
                        }
                        //gRow.IsSelected = true;

                        //Added by Ruwan
                        var totAmt = 0.00;
                        angular.forEach(GData, function (row) {
                            //$scope.TotAmt = (Number(row.Amount) + Number($scope.TotAmt)).toFixed(2);
                            totAmt = (parseFloat(row.Amount) + parseFloat(totAmt)).toFixed(2);
                        });
                        $scope.BulkPayment.TotalAmount = totAmt;

                    });
                }

                //if (response.Result.profiles.length > 0) {
                    //$scope.IsRetrivedCrmDetailsBulk = false;
                //}
                //var GData = $scope.dgGridBulkPayment.data();
            }

            $scope.CheckRowColor();
            var GData = $scope.dgGridBulkPayment.data();
            var totAmt = 0;
            var totCount = 0;
            angular.forEach(GData, function (gRow) {
                var isCrmFail = true;

                if (gRow.PrePost == 1) {
                    gRow.IsSelected = false;
                    gRow.row = true;
                }

                if (gRow.PrePost == 2) {
                    totAmt = (Number(gRow.Amount) + Number(totAmt)).toFixed(2); //Number(totAmt).toFixed(2) + Number(row.Amount).toFixed(2);
                    totCount++;
                }

                //IsValiedAccount
                angular.forEach(response.Result.ListofInValidNumbers, function (invList) {
                    if (invList.msisdn == gRow.ConnectionReference) {
                        gRow.IsValiedAccount = false;
                    }
                    else if (invList.contractNo == gRow.ContractNumber) {
                        gRow.IsValiedAccount = false;
                    }

                });
            });
            $scope.BulkPayment.NoOfRecords = totCount;
            $scope.BulkPayment.TotalPayAmount = totAmt > 0 ? Number(totAmt).toFixed(2) : Number(0).toFixed(2);
            $scope.BulkPayment.TotalAmount = Number(totAmt).toFixed(2);

        }).error(function (response) {
            if (response.Result.isNewAccessToken) {
                $cookieStore.put("accessToken", response.Result.accessToken);
            } toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
            return;
        });

    }

    $scope.CreateCRMObjectToValidateSingle = function (e) {
        var AccountList = [];
        if (e.dataItem != undefined) {
            if (e.dataItem.ConnectionReference != "" && !angular.isUndefined(e.dataItem.ConnectionReference)
            || e.dataItem.ContractNumber != "" && !angular.isUndefined(e.dataItem.ContractNumber)) {
                AccountList.push({
                    "connRef": e.dataItem.ConnectionReference,
                    //"accountNo": e.dataItem.AccountNo,
                    "contractNo": e.dataItem.ContractNumber
                });
                $scope.RequetCRMDetails(AccountList);
            } else {
                toaster.error({ type: 'error', title: 'Error', body: "One of the fields (MSISDN or ContractNumber) should provide!", showCloseButton: true });
            }
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "One of the fields (MSISDN or ContractNumber) should provide!", showCloseButton: true });
        }
        
    }

    $scope.CreateCRMObjectToValidateBulk = function () {
        var GData = $scope.dgGridBulkPayment.data();
        var objAccountList = [];
        
        angular.forEach(GData, function (row) {
            if (row.ConnectionReference != "" && !angular.isUndefined(row.ConnectionReference) && row.ConnectionReference != null
                || row.ContractNumber != "" && !angular.isUndefined(row.ContractNumber) && row.ContractNumber != null) {
                objAccountList.push({ 'connRef': row.ConnectionReference, 'contractNo': row.ContractNumber });//, 'accountNo': row.AccountNo 
            }
        });

        if (objAccountList.length > 0) {
            $scope.RequetCRMDetails(objAccountList);
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "One of the fields (MSISDN or ContractNumber) should provide!", showCloseButton: true });
            return;
        }
        
    }

    $scope.GetCRMDetailsByID = function (type) {

        if (type == 1) {
            if (angular.isUndefined($scope.BulkPayment.OldNic) || $scope.BulkPayment.OldNic == null) {
                return;
            } else if ($scope.BulkPayment.IdType == 'NIC') {
                if ($scope.BulkPayment.OldNic.length != 10) {
                    toaster.error({ type: 'error', title: 'Error', body: "Old NIC length should be limited to 10", showCloseButton: true });
                    return;
                }
                if ($scope.BulkPayment.OldNic == "") {
                    //toaster.error({ type: 'error', title: 'Error', body: "Old NIC length should be limited to 10", showCloseButton: true });
                    return;
                }
            } else if ($scope.BulkPayment.IdType == 'TIN' || $scope.BulkPayment.IdType == 'PP' || $scope.BulkPayment.IdType == 'Oth') {
                if ($scope.BulkPayment.OldNic.length > 25) {
                    toaster.error({ type: 'error', title: 'Error', body: "Old NIC length should be limited to 25", showCloseButton: true });
                    return;
                }
                if ($scope.BulkPayment.OldNic == 0) {
                    //toaster.error({ type: 'error', title: 'Error', body: "Old NIC length should be limited to 25", showCloseButton: true });
                    return;
                }
            }
            
        } else {
            if (angular.isUndefined($scope.BulkPayment.NewNic) || $scope.BulkPayment.NewNic == null) {
                return;
            }
            if ($scope.BulkPayment.NewNic == "") {
                //toaster.error({ type: 'error', title: 'Error', body: "Old NIC length should be limited to 10", showCloseButton: true });
                return;
            }
        }
        $scope.RequetCRMDetails();

    }
    // #########################        END Retrive CRM details  ##############################


    // #########################        START Retrive PE details  ##############################
    $scope.RequetPEDetails = function (pEAccList) {
        
        var obj = {
            "productCategory": $scope.BulkPayment.ProdCat,
            "accounts": pEAccList,
            "accessToken": $cookieStore.get('accessToken')
        }

        if (pEAccList.length == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Valied items not found!", showCloseButton: true });
            return;
        }

        BulkPaymentService.ValidateRecordsFromPE(obj).success(function (response) {
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: "PE - " + response.Message, showCloseButton: true });
                return;
            } else {
                var GData = $scope.dgGridBulkPayment.data();
                toaster.success({ type: 'Success', title: 'Success', body: "PE - " + response.Message, showCloseButton: true });

                angular.forEach(response.Result.accounts, function (res) {
                    angular.forEach(GData, function (gRow) {
                        if (res.connRef == gRow.ConnectionReference && res.contractNo == gRow.ContractNumber) {
                            //gRow.TotalOutstanding = res.totalOS;
                            gRow.BalanceAsAt = res.totalOS;
                            gRow.MinReconFee = res.minAmtToConnect;
                            gRow.DTVReconFee = res.reconFee;
                        }
                    });
                });
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });
    }

    $scope.CreatePEObjectToValidateSingle = function (e) {
        var obj = [];
        if (e.dataItem == undefined) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to PE!", showCloseButton: true });
            return;
        }

        $('tr[data-uid="' + e.dataItem.uid + '"] ').addClass("bg-highlightOrange");

        if (e.dataItem.IsSelected) {
            //if ((angular.isUndefined(e.dataItem.ConnectionReference) || e.dataItem.ConnectionReference == '') &&
            //    (angular.isUndefined(e.dataItem.ContractNumber) || e.dataItem.ContractNumber == '')) {
            if (e.dataItem.IsValiedAccount) {
                if (e.dataItem.PrePost != "" && !angular.isUndefined(e.dataItem.PrePost)) {
                    obj.push({ 'connRef': e.dataItem.ConnectionReference, 'sbu': e.dataItem.SBU, 'contractNo': e.dataItem.ContractNumber, 'accountType': e.dataItem.PrePost, 'productType': e.dataItem.ProductType });
                    $scope.RequetPEDetails(obj);
                }
                //else {
                //        toaster.error({ type: 'error', title: 'Error', body: "AccountType (Prepaid / Post-paid) should retrive from CRM!", showCloseButton: true });
                //    }
            } else {
                toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to PE!", showCloseButton: true });
            }//}
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "Please select item to get PE data!", showCloseButton: true });
        }
        
    }

    $scope.CreatePEObjectToValidateBulk = function () {
        var GData = $scope.dgGridBulkPayment.data();
        var obj = [];
        var isExistInValiedAccount = false;
        angular.forEach(GData, function (row) {

            if (row.IsSelected) {
                if ((!angular.isUndefined(row.ConnectionReference) && row.ConnectionReference != '') &&
                (!angular.isUndefined(row.ContractNumber) && row.ContractNumber != '')) {
                    if (row.IsValiedAccount) {
                        if (row.PrePost != "" && !angular.isUndefined(row.PrePost)) {
                            obj.push({ 'connRef': row.ConnectionReference, 'sbu': row.SBU, 'contractNo': row.ContractNumber, 'accountType': row.PrePost, 'productType': row.ProductType });
                        }
                    }
                    else {
                        isExistInValiedAccount = true;
                    }
                }
            }
            
        });

        if (isExistInValiedAccount) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to PE. Please deselect invalied items.", showCloseButton: true });
            return;
        }
        $scope.RequetPEDetails(obj);

    }
    // #########################        END Retrive PE details  ##############################


    // #########################        START Retrive RBM details  ##############################
    $scope.RequetRBMDetails = function (rBMAccList) {

        var obj = {
            "productCategory": $scope.BulkPayment.ProdCat,
            "accounts": rBMAccList,
            "accessToken": $cookieStore.get('accessToken')
        }

        if (rBMAccList.length == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Valied items not found!", showCloseButton: true });
            return;
        }

        BulkPaymentService.ValidateRecordsFromRBM(obj).success(function (response) {
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: "RBM - " + response.Message, showCloseButton: true });
                return;
            } else {
                var GData = $scope.dgGridBulkPayment.data();
                angular.forEach(response.Result.accounts, function (res) {
                    angular.forEach(GData, function (gRow) {
                        if (res.connRef == gRow.ConnectionReference && res.contractNo == gRow.ContractNumber) {
                            gRow.LastMonthBillAmount = res.lastBill;
                            gRow.TotalOutstanding = res.totalOust;
                        }
                    });
                });
                toaster.success({ type: 'Success', title: 'Success', body: "RBM - " + response.Message, showCloseButton: true });
                var GData = $scope.dgGridBulkPayment.data();
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });

    }

    $scope.CreateRBMObjectToValidateSingle = function (e) {
        var obj = [];
        if (e.dataItem == undefined) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to PE!", showCloseButton: true });
            return;
        }

        $('tr[data-uid="' + e.dataItem.uid + '"] ').addClass("bg-highlightOrange");

        if (e.dataItem.IsSelected) {
            //if ((!angular.isUndefined(e.dataItem.ConnectionReference) || e.dataItem.ConnectionReference != '') &&
            //    (!angular.isUndefined(e.dataItem.ContractNumber) || e.dataItem.ContractNumber != '')) {
                if (e.dataItem.IsValiedAccount) {
                    obj.push({ 'connRef': e.dataItem.ConnectionReference, 'sbu': e.dataItem.SBU, 'contractNo': e.dataItem.ContractNumber, 'productType': e.dataItem.ProductType, 'accountType': e.dataItem.PrePost });
                    $scope.RequetRBMDetails(obj);
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to RBM", showCloseButton: true });
                    return;
                }
            //}

        } else {
            toaster.error({ type: 'error', title: 'Error', body: "Please select item to get RBM data!", showCloseButton: true });
        }


    }

    $scope.CreateRBMObjectToValidateBulk = function () {
        var GData = $scope.dgGridBulkPayment.data();
        var obj = [];

        var isExistInValiedAccount = false;
        angular.forEach(GData, function (row) {
            if ((!angular.isUndefined(row.ConnectionReference) && row.ConnectionReference != '') &&
                (!angular.isUndefined(row.ContractNumber) && row.ContractNumber != '')) {
                if (row.IsSelected) {
                    if (row.IsValiedAccount) {
                        obj.push({ 'connRef': row.ConnectionReference, 'sbu': row.SBU, 'contractNo': row.ContractNumber, 'productType': row.ProductType, 'accountType': row.PrePost });
                    } else {
                        isExistInValiedAccount = true;
                    }
                }
            }
        });

        if (isExistInValiedAccount) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to RBM. Please deselect invalied items.", showCloseButton: true });
            return;
        }


        if (obj.length > 0) {
            $scope.RequetRBMDetails(obj);
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "Required details missing, Please retrieve the customer details again", showCloseButton: true });
            return;
        }
        
        
    }
    // #########################        Retrive RBM details  ##############################


    // #########################        Retrive OCS details  ##############################
    $scope.RequetOCSDetails = function (oCSAccList) {

        var obj = {
            "productCategory": $scope.BulkPayment.ProdCat,
            "accounts": oCSAccList,
            "accessToken": $cookieStore.get('accessToken')
        }

        if (oCSAccList.length == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Valied items not found!", showCloseButton: true });
            return;
        }

        BulkPaymentService.ValidateRecordsFromOCS(obj).success(function (response) {
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: "OCS - " + response.Message, showCloseButton: true });
            } else {
                //if (response.Result.accounts.length < 1 && response.Result.invalidAccounts.length > 1) {
                //    toaster.error({ type: 'error', title: 'Error', body: "OCS - " + " Invalied Accounts exists!", showCloseButton: true });
                //    return;
                //}

                var GData = $scope.dgGridBulkPayment.data();

                
                angular.forEach(response.Result.accounts, function (res) {
                    angular.forEach(GData, function (gRow) {
                        if (res.connRef == gRow.ConnectionReference && res.contractNo == gRow.ContractNumber) {
                            gRow.OCSStatus = res.creditStatus;
                            gRow.OCSStatusDesc = res.creditStatus == SwitchStatus.Connected ? 'Connected' : res.creditStatus == SwitchStatus.Disconnected ? 'Disconnected' : 'Suspense';
                        }
                    });
                });

                if (response.Result.invalidAccounts.length > 0) {
                    angular.forEach(response.Result.invalidAccounts, function (res) {
                        toaster.error({ type: 'error', title: 'Error', body: "Invalied account's exists ConnRef: " + res.connRef + " , " + "Contract No: " + res.contractNo + " | ", showCloseButton: true });
                        return;
                    });
                } else {
                    if (response.Result.accounts.length < 1) {
                        toaster.error({ type: 'error', title: 'Error', body: "OCS - " + " Account details not found in response!", showCloseButton: true }); return;
                        return;
                    }
                    toaster.success({ type: 'Success', title: 'Success', body: "OCS - " + response.Message, showCloseButton: true });
                }
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });

    }

    $scope.CreateOCSObjectToValidateSingle = function (e) {
        var obj = [];
        if (e.dataItem == undefined) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to OCS!", showCloseButton: true });
            return;
        }
        $('tr[data-uid="' + e.dataItem.uid + '"] ').addClass("bg-highlightOrange");

        var isExistInValiedAccount = false;
        //if ((angular.isUndefined(e.dataItem.ConnectionReference) || e.dataItem.ConnectionReference == '') &&
        //        (angular.isUndefined(e.dataItem.ContractNumber) || e.dataItem.ContractNumber == '')) {
        if (e.dataItem.IsSelected) {
            if (e.dataItem.IsValiedAccount) {
                obj.push({ 'connRef': e.dataItem.ConnectionReference, 'sbu': e.dataItem.SBU, 'contractNo': e.dataItem.ContractNumber, 'accountType': e.dataItem.PrePost, 'productType': e.dataItem.ProductType });
                $scope.RequetOCSDetails(obj);
            } else {
                toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to OCS", showCloseButton: true });
                return;
            }
        } else {
            if (e.dataItem.IsValiedAccount) {
                if (e.dataItem.ProductType == 1) // if WIFI
                {
                    toaster.error({ type: 'Error', title: 'Error', body: "Wifi number exists! ", showCloseButton: true });
                    return;
                }
            } else {
                isExistInValiedAccount = true;
                toaster.error({ type: 'Error', title: 'Error', body: "Account is Invalied! ", showCloseButton: true });
                return;
            }
        }
    }

    $scope.CreateOCSObjectToValidateBulk = function () {
        //$scope.alertMessage = new Message(1, "Success!");
        var GData = $scope.dgGridBulkPayment.data();
        var obj = [];

        var isExistInValiedAccount = false;

        var isExistWifi = "";

        angular.forEach(GData, function (row) {
            if ((!angular.isUndefined(row.ConnectionReference) && row.ConnectionReference != '') &&
                (!angular.isUndefined(row.ContractNumber) && row.ContractNumber != '')) {
                if (row.IsSelected) {
                    if (row.IsValiedAccount) {
                        if (row.ProductType == 1) // if WIFI
                        {
                            isExistWifi = isExistWifi + " Conn Ref: " + row.ConnectionReference + ", ";
                        }
                        else {
                            obj.push({ 'connRef': row.ConnectionReference, 'sbu': row.SBU, 'contractNo': row.ContractNumber, 'productType': row.ProductType, 'accountType': row.PrePost });
                        }
                    } else {
                        isExistInValiedAccount = true;
                    }

                    
                }
            }
            
        });

        if (isExistInValiedAccount) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to OCS. Please deselect invalied items.", showCloseButton: true });
            return;
        }
        if (isExistWifi != "") {
            if (obj.length < 1) {
                toaster.error({ type: 'error', title: 'Error', body: "Wifi numbers not supported to retrive OCS data!.", showCloseButton: true });
                return;
            } else {
                if ($scope.BulkPayment.ProdCat == 1) {
                    toaster.success({ type: 'Success', title: 'Success', body: "Wifi number exists and skiped! " + isExistWifi, showCloseButton: true });
                    //return;
                }
            }
            
        }
        $scope.RequetOCSDetails(obj);
    }
    // #########################        Retrive RBM details  ##############################

    // #########################        Retrive ADF remarks details  ##############################
    $scope.RequetADFDetails = function (aDFAccList) {

        var obj = {
            "productCategory": $scope.BulkPayment.ProdCat,
            "accounts": aDFAccList,
            "accessToken": $cookieStore.get('accessToken')
        }

        if (aDFAccList.length == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Valied items not found!", showCloseButton: true });
            return;
        }

        BulkPaymentService.ValidateRecordsFromADF(obj).success(function (response) {
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: "ADF - " + response.Message, showCloseButton: true });
                return;
            } else {
                var GData = $scope.dgGridBulkPayment.data();
                toaster.success({ type: 'Success', title: 'Success', body: "ADF - " + response.Message, showCloseButton: true });
                var remarksArray = [];
                angular.forEach(response.Result.accounts, function (res) {
                    angular.forEach(res.remarks, function (rem) {
                        remarksArray.push({
                            'notes': '', 'Remark': rem.remark, 'CreatedDate': rem.createdDate, 'CreatedUser': rem.createdUser
                        });
                    });
                });
                
                $scope.adfRemarksDirectiveParams.params = remarksArray ? remarksArray : [];
                //$scope.adfRemarksDirectiveParams.data = [{ Note: '457000', Remark: 'abc', CreatedDate: '2016/01/01', CreatedUser: '002' }];//remarksArray;//RandomBillPaymentObjectCollection ? RandomBillPaymentObjectCollection : [];

                $("#myADFRemarks").modal('show');
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });
    }

    $scope.CreateADFObjectToValidateSingle = function (e) {

        if (e.dataItem == undefined) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to PE!", showCloseButton: true });
            return;
        }

        var aDFAccList = [];
        if (e.dataItem.IsSelected) {
            if (e.dataItem.IsValiedAccount) {
                aDFAccList.push({ 'contractNo': e.dataItem.ContractNumber, 'sbu': e.dataItem.SBU, 'productType': e.dataItem.ProductType });
                $scope.RequetADFDetails(aDFAccList);

            } else {
                toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to ADF!", showCloseButton: true });
            }
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "Please select item to get ADF Remark data!", showCloseButton: true });
        }
        

    }


    $scope.CreateADFObjectToValidateBulk = function () {
        var GData = $scope.dgGridBulkPayment.data();
        var obj = [];
        var isExistInValiedAccount = false;
        angular.forEach(GData, function (row) {
            if (row.IsSelected) {
                if (row.IsValiedAccount) {
                    //obj.push({ 'contractNo': e.dataItem.ContractNumber, 'sbu': e.dataItem.SBU, 'productType': e.dataItem.ProductType });
                }
                else {
                    isExistInValiedAccount = true;
                }
            }
            
        });

        if (isExistInValiedAccount) {
            toaster.error({ type: 'error', title: 'Error', body: "Only CRM validated accounts send to ADF Remarks. Please deselect invalied items.", showCloseButton: true });
            return;
        }
        $scope.RequetADFDetails(obj);

    }


    ///////////////ADF Remarks Modal//////////////

    $scope.adfRemarksDirectiveParams = {
        title: "ADF Remarks",
        params: {


        },
        callback: function () {

        },
        data: []
    };

    // #########################        Retrive ADF remarks details  ##############################


    $scope.UpdateDateTime = function () {

        if ($scope.BulkPayment == null || $scope.BulkPayment.BatchId == undefined || $scope.BulkPayment.BatchId == '') {
            $scope.currentDate = new Date();
            //$scope.BulkPayment.DateTime = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm:ss');
        }
        if ($scope.dgGridBulkPayment.data().length > 1) {
            $scope.BulkPayment.AddPaymentRadioBtnIsDisabled = true;
            $scope.BulkPayment.CustIdRadioBtnIsDisabled = true;
            $scope.BulkPayment.BillInvRadioBtnIsDisabled = true;
            $scope.BulkPayment.UploadRadioBtnIsDisabled = true;
        }
    }

    $scope.IsReadyForSubmit = true;
    //  #####################       Payment mode        ##################################
    $scope.ValidateRecords = function () {
        var GData = $scope.dgGridBulkPayment.data();
        var isAllValidated = true;
        var selectedCount = 0;
        var noPayCount = 0;
        var isError = false;
        angular.forEach(GData, function (item) {
            if (item.IsValiedAccount != undefined) {
                if (!item.IsValiedAccount && item.IsSelected) {
                    isAllValidated = false;
                } else {
                    if (item.IsSelected) {
                        if (item.Amount == undefined || item.Amount == "" || item.Amount == 0) {
                            noPayCount++;
                        }
                        selectedCount++;
                    }

                }
            }
        });

        if (noPayCount > 0) {
            $scope.BulkPayment.PaymentMode = '0'
            return "Please select the payments you want to submit!";
        }

        if (selectedCount == 0) {
            $scope.BulkPayment.PaymentMode = '0'
            return "Please select the payments you want to submit!";
        }
        if (!isAllValidated) {
            $scope.BulkPayment.PaymentMode = '0'
            return "Some of the payments submitting has invalid numbers. Please correct those numbers or uncheck them before submitting!";
        }
        return "";
    }

    $scope.ResetPaymantModeDerective = function () {
        $scope.BulkPayment.PaymentMode = "CA";
        $scope.SelectedPaymentMode = $scope.BulkPayment.PaymentMode;
        objTemp.PaymentMode = $scope.SelectedPaymentMode;
        objTemp.MobileNo = "";
        objTemp.Callback = $scope.paymentModeCallBack;
        objTemp.CustomerRef = "";
        objTemp.Amount = $scope.BulkPayment.TotalPayAmount;
        objTemp.ItemSbu = currentSBU;
        $scope.Options = objTemp;
    }

    $scope.SetPaymentMode = function () {
          
        if ($scope.BulkPayment.PaymentMode == "GN") {
            var GenieCounterId = JSON.parse(localStorage.getItem('profile')).GenieCounterId;
            if (GenieCounterId == null || GenieCounterId == 0) {
                toaster.error({ type: 'error', title: 'Error', body: "Genie counter ID not defined. So cannot take a payment from Genie.", showCloseButton: true });
                $scope.BulkPayment.PaymentMode = "CA";
                return;
            }
        }

        if ($scope.IsLoadingAtFirstTime) {
            $scope.IsLoadingAtFirstTime = false;
            return;
        }
        $scope.errorDesc = $scope.ValidateRecords();
        if ($scope.errorDesc != "") {
            toaster.error({ type: 'error', title: 'Error', body: $scope.errorDesc, showCloseButton: true });
            $scope.BulkPayment.PaymentMode = "0";
            return;
        }

        $scope.NewExistingReference = "";
        $scope.BulkPayment.ExistingReference = "";
        $scope.disabled = { AppliedAmount: true };//, Save: true
        var objTemp = new PaymentModeOptions();

        var isAllValidatedError = false;
        var GData = $scope.dgGridBulkPayment.data();
        var isPrePaidExist = false;
        var isDisconnectedExists = false;
        var currentSBU = 10;
        var isAllReceiptInSameSBU = true;

        angular.forEach(GData, function (row) {
            if (row.IsSelected) {
                if (row.IsValiedAccount != true) {
                    if ((angular.isUndefined(row.ConnectionReference) || row.ConnectionReference == '') &&
                    (angular.isUndefined(row.ContractNumber) || row.ContractNumber == '') ||
                    (angular.isUndefined(row.Amount) || row.Amount == '')) {
                        isAllValidatedError = true;
                    } 
                } else if (row.SwitchStatus == SwitchStatus.Disconnected) {
                    isDisconnectedExists = true;
                }
                if (row.SBU != null) {
                    if (currentSBU == 10) {
                        currentSBU = row.SBU;
                    } else if (row.SBU != currentSBU) {
                        isAllReceiptInSameSBU = false;
                    }
                }
                
                if (row.PrePost == 1) {
                    isPrePaidExist = true;
                }
            }
        });

        if (isDisconnectedExists && $scope.BulkPayment.PaymentMode == PaymentModesTypes.Cheque) {
            $scope.customMessage = {
                Title: 'Message',
                Message: 'Disconnected number exists Do you want to continue!'
            };
            $scope.IsReadyForSubmit = false;
            $scope.yesNoMessageParams = {
                Id: 2
            };
            $scope.YesNoMessageOpen();
        }

        if (isPrePaidExist) {
            toaster.error({ type: 'error', title: 'Error', body: "Prepaid account/s exists! Please uncheck Prepaid account/s data.", showCloseButton: true });
            $scope.ResetPaymantModeDerective();
            return;
        }

        if (isAllValidatedError) {
            toaster.error({ type: 'error', title: 'Error', body: "Some of the payments submitting has invalid numbers. Please correct those numbers or uncheck them before submitting.", showCloseButton: true });
            $scope.ResetPaymantModeDerective();
            return;
        }
        
        
        $scope.IsReadyForSubmit = true;

        objTemp.Params = {};
        objTemp.Params.InvoiceNo = "";//$scope.receipt.InvoiceId; // Voucher payment mode

        if (angular.isUndefined($scope.BulkPayment.PaymentMode)) {
            $scope.disabled.AppliedAmount = true;
            //return;
        }
        if ($scope.BulkPayment.PaymentMode == '0') {
            $scope.disabled.AppliedAmount = true;//, Save: true
            //return;
        }

        $scope.disabled.AppliedAmount = false;

        if ($scope.BulkPayment.PaymentMode != PaymentModesTypes.StarPoints && $scope.BulkPayment.PaymentMode != PaymentModesTypes.SMSVoucher &&
        $scope.BulkPayment.PaymentMode != PaymentModesTypes.BTR && $scope.BulkPayment.PaymentMode != PaymentModesTypes.IBUY && $scope.BulkPayment.PaymentMode != PaymentModesTypes.GiftVoucher &&
        $scope.BulkPayment.PaymentMode != PaymentModesTypes.Miscellaneous && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Voucher &&
        $scope.BulkPayment.PaymentMode != PaymentModesTypes.eZCash && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Cheque && $scope.BulkPayment.PaymentMode != PaymentModesTypes.CreditCard
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.PreOrder && $scope.BulkPayment.PaymentMode != PaymentModesTypes.MS2
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.DDB
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Genie) {

            if ($scope.BulkPayment.PaymentMode == PaymentModesTypes.Cash) {
                angular.forEach(GData, function (row) {
                    row.row = false;
                });
                $scope.PaymentGridSelectAll = false;
            } else {
                angular.forEach(GData, function (row) {
                    row.row = true;
                });
                $scope.PaymentGridSelectAll = true;
            }

            $scope.formdata = {
                PaymentMode: $scope.BulkPayment.PaymentMode,
                AppliedAmount: $scope.BulkPayment.TotalPayAmount,
                PaymentModeDescription: $scope.BulkPayment.PaymentMode
            };
            $scope.paymentModeCallBack($scope.formdata);
        }
        else {
            
            
            if (!isAllReceiptInSameSBU && $scope.BulkPayment.PaymentMode == PaymentModesTypes.StarPoints) {
                toaster.error({ type: 'error', title: 'Error', body: "Payment for multiple SBUs cannot be paid from Star Point payment mode. Please select another payment mode .", showCloseButton: true });
                $scope.ResetPaymantModeDerective();
                return;
            }
            angular.forEach(GData, function (row) {
                row.row = true;
            });
            $scope.PaymentGridSelectAll = true;

            $scope.SelectedPaymentMode = $scope.BulkPayment.PaymentMode;
            objTemp.PaymentMode = $scope.SelectedPaymentMode;
            objTemp.MobileNo = "";
            objTemp.Callback = $scope.paymentModeCallBack;
            objTemp.CustomerRef = "";
            objTemp.Amount = $scope.BulkPayment.TotalPayAmount;
            objTemp.ItemSbu = currentSBU;
            $scope.Options = objTemp;
        }
        //ii++;
    };

    //  #####################       Payment mode        ##################################


    //  #######################       COMMON              ##################################
    $scope.GenerateTotalAmountToPay = function (isEditable) {
        $scope.TotalRecordsAmt = 0;
        var dGrid = $scope.dgGridBulkPayment.data();
        angular.forEach(dGrid, function (d) {
            d.ConnectionReferenceGridDisabled = isEditable;
            d.ContractNumberGridDisabled = isEditable;
            d.AmountGridDisabled = isEditable;
            d.ReferenceNumberGridDisabled = isEditable;
            d.RemarksGridDisabled = isEditable;
            $scope.TotalRecordsAmt += d.Amount;
        });
        $scope.BulkPayment.TotalPayAmount = $scope.TotalRecordsAmt > 0 ? Number($scope.TotalRecordsAmt).toFixed(2) : Number(0).toFixed(2);//$filter('number')($scope.TotalRecordsAmt, "2");
    }

    $scope.CustomerBalance = function () {

        Number($scope.BulkPayment.CustomerPayingAmount).toFixed(2);
        console.log(Number($scope.BulkPayment.CustomerPayingAmount));
        console.log(Number($scope.BulkPayment.TotalPayAmount));
        var s = (Number($scope.BulkPayment.CustomerPayingAmount) - Number($scope.BulkPayment.TotalPayAmount)).toFixed(2);
        if (s < 0) {
            $scope.BulkPayment.Balance = Number(0).toFixed(2);
        } else {
            $scope.BulkPayment.Balance = s;
        }
        
    }

    //#######################       COMMON              ####################################

    //#######################       Payment Mode Call Back  ################################

    var paymentModeInfoObj = function () {
        this.ReceiptNo = '';
        this.ReferenceNo = '';
        this.PaymentMode = '';
        this.PaidAmount = 0;
    };

    var BillingBatchRecCollection = function () {
        this.ReceiptNo = '';
        this.BatchId = '';
        this.OutletCode = '';
        this.SbuCode = 0;
        this.ReceiptDate = 0;
        this.CustName = '';
        this.CustAddress = '';
        this.PaymentMode = '';
        this.Amount = 0;
        this.Remarks = '';
        this.PaymentModeRef = '';
        this.CustRef = '';
        this.CustRefType = '';
        this.PrePostType = '';
        this.TotalOutstanding = 0;
        this.BalanceAmt = 0;
        this.ReconFee = 0;
        this.ReceiptStatus = false;
        this.AccountNo = '';
        this.ContractId = '';
        this.RefNo = '';
        this.ProdType = '';
        this.CustomerIDType = '';
        this.ConnectionType = '';
    }


    var BillingBatchObj = function () {
        this.BatchId = '';
        this.OutletCode = '';
        this.SbuCode = $scope.BulkPayment.Sbu;
        this.ProdCat = $scope.BulkPayment.ProdCat;
        this.PaymentType = $scope.BulkPayment.PaymentType;
        
        var permissionCodes = AuthService.getProfile().permission;

        if (permissionCodes.indexOf("41001") == -1) {
            this.PaymentSource = $scope.GetPaymentSourseByCcbsPaymentSource();
        } else {
            this.PaymentSource = $scope.GetPaymentSourseByCcbsPaymentSource();
        }

        //$scope.BulkPayment.PaymentSource =
        this.PaymentMethod = $scope.BulkPayment.PaymentMethod;
        this.PaymentMode = $scope.BulkPayment.PaymentMode;
        this.BatchTotal = $scope.BulkPayment.TotalPayAmount;
        this.AttachmentRef = '';
        this.Remarks = $scope.BulkPayment.Remarks;
        this.PaymentModeRef = '';///$scope.BulkPayment.PaymentModeRef;
        this.PaymentCriteria = $scope.BulkPayment.BillPaymentType;// 0 : Random bill, 1 : Customer id, 2 : Bill invoice, 3 : Bulk upload
        this.ProdCat = $scope.BulkPayment.ProdCat;
        this.AddedUser = '';
        this.BatchRec = [];
        this.PREmail = "";
        this.ContractEmail = "";
        this.ConnectionRef = "",
        this.CustomerIDNumber = ""
        this.OldNIC = ""
    }

    $scope.paymentModeCallBack = function (data) {
        if ($scope.IsLoadingAtFirstTime) {
            $scope.IsLoadingAtFirstTime = false;
            return;
        }
        batchObj = new BillingBatchObj();
        batchObj.PaymentModeRef = data.ReferenceNo;

        var isPaymentRefExists = true;

        if ($scope.BulkPayment.PaymentMode == PaymentModesTypes.GiftVoucher) {
            var payRef = '';
            angular.forEach(data, function (row) {

                var currentRefId = '';
                if (row.ReferenceNo != "" && row.ReferenceNo != undefined) {
                    currentRefId = row.ReferenceNo;
                } else if (row != "" && row != undefined) {
                    currentRefId = row;
                } else {
                    isPaymentRefExists = false;
                }

                if (payRef != '') {
                    payRef = currentRefId + ' , ' + row.ReferenceNo;

                } else {
                    payRef = currentRefId;
                }

            });
            if (isPaymentRefExists) {
                $scope.BulkPayment.ExistingReference = payRef;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: "Payment reference NO not exist's. Please try again. ", showCloseButton: true });
                return;
            }

        }
        else if ($scope.BulkPayment.PaymentMode == PaymentModesTypes.StarPoints) {
            $scope.BulkPayment.ExistingReference = data.Request.StpReference;
            batchObj.PaymentModeRef = data.Request.StpReference;

            if (data.Request.StpReference == "" || data.Request.StpReference == undefined) {
                isPaymentRefExists = false;
            }
        }
        else if ($scope.BulkPayment.PaymentMode != PaymentModesTypes.SMSVoucher &&
                $scope.BulkPayment.PaymentMode != PaymentModesTypes.BTR && $scope.BulkPayment.PaymentMode != PaymentModesTypes.IBUY &&
                $scope.BulkPayment.PaymentMode != PaymentModesTypes.Miscellaneous && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Voucher &&
                $scope.BulkPayment.PaymentMode != PaymentModesTypes.eZCash && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Cheque && $scope.BulkPayment.PaymentMode != PaymentModesTypes.CreditCard
                && $scope.BulkPayment.PaymentMode != PaymentModesTypes.PreOrder && $scope.BulkPayment.PaymentMode != PaymentModesTypes.MS2
                && $scope.BulkPayment.PaymentMode != PaymentModesTypes.DDB
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Genie) {

            isPaymentRefExists = true;

        }
        else {
            $scope.BulkPayment.ExistingReference = data.ReferenceNo;
            if (data.ReferenceNo == "" || data.ReferenceNo == undefined) {
                isPaymentRefExists = false;
            }
        }

        if (isPaymentRefExists == false) {
            $scope.PaymentModeReset();
            toaster.error({ type: 'error', title: 'Error', body: "Payment reference NO not exist's. Please try again. ", showCloseButton: true });
            return;
        }

        $scope.disabled.AppliedAmount = false;

        var d = $scope.dgGridBulkPayment.data();
        $scope.paiedAmt = 0;

        angular.forEach(d, function (row) {
            if (row.IsSelected) {
                if (row.IsValiedAccount == true) {
                    $scope.paiedAmt = (Number($scope.paiedAmt) + Number(row.Amount)).toFixed(2);
                }
            }

            if ($scope.BulkPayment.PaymentMode == PaymentModesTypes.Cash) {
                row.row = false;
            } else {
                row.row = true;
            }
        });

        if ($scope.BulkPayment.PaymentMode == PaymentModesTypes.Cash) {
            $scope.PaymentGridSelectAll = false;
        }
        $scope.BulkPayment.TotalPayAmount = $scope.paiedAmt > 0 ? $scope.paiedAmt : Number(0).toFixed(2);
         
        if ($scope.BulkPayment.PaymentMode != PaymentModesTypes.StarPoints && $scope.BulkPayment.PaymentMode != PaymentModesTypes.SMSVoucher &&
        $scope.BulkPayment.PaymentMode != PaymentModesTypes.BTR && $scope.BulkPayment.PaymentMode != PaymentModesTypes.IBUY && $scope.BulkPayment.PaymentMode != PaymentModesTypes.GiftVoucher &&
        $scope.BulkPayment.PaymentMode != PaymentModesTypes.Miscellaneous && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Voucher &&
        $scope.BulkPayment.PaymentMode != PaymentModesTypes.eZCash && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Cheque && $scope.BulkPayment.PaymentMode != PaymentModesTypes.CreditCard
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.PreOrder && $scope.BulkPayment.PaymentMode != PaymentModesTypes.MS2
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.DDB
            && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Genie) {
            var objTemp = new PaymentModeOptions();
            
            $scope.SelectedPaymentMode = "50";
            objTemp.PaymentMode = "50";
            objTemp.MobileNo = new Date().getTime().toString();
            objTemp.Callback = $scope.paymentModeCallBack;
            //$scope.PaymentModeReset();

            $scope.Options = objTemp;
        }
    }

    var batchObj = new BillingBatchObj();
    //#######################       Payment Mode Call Back  ################################

    $scope.PaymentModeReset = function () {
        var objTemp = new PaymentModeOptions();

        $scope.SelectedPaymentMode = "50";
        objTemp.PaymentMode = "50";
        objTemp.MobileNo = new Date().getTime().toString();
        objTemp.Callback = $scope.paymentModeCallBack;

        $scope.Options = objTemp;
    }
    $scope.BindRetrivedBillData = function (response) {
        

        var totAmt = 0;
        var totCount = 0;
        var suspenseAmt = 0;
        var suspenseCount = 0;

        $scope.BulkPayment = response.Result;
        var gData = response.Result.BatchReceipt;
        $scope.dgGridReceiptDetails.data(gData);
        gBindData = $scope.dgGridReceiptDetails.data();
        $scope.BulkPayment.PaymentMode = response.Result.BatchReceipt.length > 0 ? response.Result.BatchReceipt[0].PaymentMode : "";
        $scope.BulkPayment.PaymentMethod = response.Result.BatchReceipt.length > 0 ? response.Result.BatchReceipt[0].PaymentMethod : "";
        $scope.BulkPayment.Sbu = response.Result.BatchReceipt.length > 0 ? response.Result.BatchReceipt[0].SBU : "";
        $scope.BulkPayment.ProdCat = response.Result.ProdCat;


        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));

        //$scope.BulkPayment.PaymentSource = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: response.Result.OutletCode })[0].Id : "";
        

        var isCancelExists = false;
        angular.forEach(gBindData, function (item) {
            item.IsSelected = true;

            if (item.PREmail == "" || item.PREmail == undefined) {
                item.IsEmailExists = false;
                
            } else {
                item.IsEmailExists = true;
            }
            //item.ContractEmail
            if (item.IsSuspense) {
                suspenseCount++;
                suspenseAmt = suspenseAmt + item.Amount
            }
            totAmt = totAmt + item.Amount;
            totCount++;

            if (item.ReceiptStatus != "Valid") {
                item.IsCancel = true;
                item.IsTransfer = true;
                item.IsSelected = false;
                item.IsSelectedRowDisabled = true;
                isCancelExists = true;
            }

            if (response.Result.IsSameDayTransfer < 1) {
                item.IsTransfer = true;
            }
        });

        if (isCancelExists) {
            $scope.IsSelectedTempDisabled = true;
        }

        $scope.BulkPayment.BatchId = $scope.LastRetrivedBatchId;

        $scope.BulkPayment.NoOfRecords = totCount;
        $scope.BulkPayment.TotalAmount = Number(totAmt).toFixed(2);
        $scope.BulkPayment.TToSuspendcount = suspenseCount;
        $scope.BulkPayment.TTSuspendAmount = Number(suspenseAmt).toFixed(2);

        $scope.BulkPayment.User = response.Result.AddedUser;
        $scope.BulkPayment.DateTime = response.Result.AddedDate;
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));

        $scope.BulkPayment.PaymentSourceRec = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { Id: response.Result.PaymentSource })[0].Description : "";
        $scope.PaymentSou = [];
        $scope.BulkPayment.PaymentType = response.Result.PaymentType;
        angular.forEach(defaultDataCookieObj.BillingPaymentSource, function (item) {
            if (item.PaymentType == $scope.BulkPayment.PaymentType) {
                $scope.PaymentSou.push({ "Id": item.CcbsPaymentSource, "Description": item.Description });
            }
        });
        $scope.PaymentSourceCollection = $scope.PaymentSou;
        var paySource = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { Id: response.Result.PaymentSource })[0].CcbsPaymentSource : "";
        $scope.BulkPayment.PaymentSource = paySource;
        $scope.PaymentMethodDrop = true;
        $scope.PaymentTypeDrop = true;
        $scope.PaymentSourceDrop = true;
        $scope.PaymentBu = true;
        $scope.PaymentProdCatDrop = true;

        $scope.disabled.BulkEmailButton = false;
        $scope.disabled.BulkCancelButton = false;

        $("#BulkEntry").removeClass("active");
        $("#ReceiptDetails").addClass("active");

        $("li#ListBulkEntry").removeClass("active");
        $("li#ListReceiptDetails").addClass("active");
    }

    $scope.IsRequestSent = false;

    $scope.PostBillData = function () {
        //if ($scope.BulkPayment.PaymentMode != PaymentModesTypes.StarPoints && $scope.BulkPayment.PaymentMode != PaymentModesTypes.SMSVoucher &&
        //    $scope.BulkPayment.PaymentMode != PaymentModesTypes.BTR && $scope.BulkPayment.PaymentMode != PaymentModesTypes.IBUY && $scope.BulkPayment.PaymentMode != PaymentModesTypes.GiftVoucher &&
        //    $scope.BulkPayment.PaymentMode != PaymentModesTypes.Miscellaneous && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Voucher &&
        //    $scope.BulkPayment.PaymentMode != PaymentModesTypes.eZCash && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Cheque && $scope.BulkPayment.PaymentMode != PaymentModesTypes.CreditCard
        //        && $scope.BulkPayment.PaymentMode != PaymentModesTypes.PreOrder && $scope.BulkPayment.PaymentMode != PaymentModesTypes.MS2
        //        && $scope.BulkPayment.PaymentMode != PaymentModesTypes.DDB) {
        //            batchObj = new BillingBatchObj();

        //}
        $scope.disabled.SaveButton = true;
        var IsVerticleSlashValid = false;

        if ($scope.IsRequestSent) {
            //$scope.IsRequestSent = true;
            toaster.error({ type: 'error', title: 'Error', body: "Request already sent!", showCloseButton: true });
            return;
        } else {
            $scope.IsRequestSent = true;
        }
            var GData = $scope.dgGridBulkPayment.data();
            var isAllValidatedError = false;
            var isPrePaidExist = false;
            if (!$scope.IsReadyForSubmit) {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: "Request is not ready for submit!", showCloseButton: true });
                return;
            }

            if ($scope.BulkPayment.PaymentMode == 0) {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: "Please select the payment mode you want to submit!", showCloseButton: true });
                return;
            }

            batchObj = new BillingBatchObj();
            batchObj.PaymentModeRef = $scope.BulkPayment.ExistingReference;

            if ($scope.BulkPayment.PaymentMode != PaymentModesTypes.StarPoints && $scope.BulkPayment.PaymentMode != PaymentModesTypes.SMSVoucher &&
            $scope.BulkPayment.PaymentMode != PaymentModesTypes.BTR && $scope.BulkPayment.PaymentMode != PaymentModesTypes.IBUY && $scope.BulkPayment.PaymentMode != PaymentModesTypes.GiftVoucher &&
            $scope.BulkPayment.PaymentMode != PaymentModesTypes.Miscellaneous && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Voucher &&
            $scope.BulkPayment.PaymentMode != PaymentModesTypes.eZCash && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Cheque && $scope.BulkPayment.PaymentMode != PaymentModesTypes.CreditCard
                && $scope.BulkPayment.PaymentMode != PaymentModesTypes.PreOrder && $scope.BulkPayment.PaymentMode != PaymentModesTypes.MS2 && $scope.BulkPayment.PaymentMode != PaymentModesTypes.Genie) {
                
            }
            else {
                if ($scope.BulkPayment.ExistingReference == "") {
                    $scope.IsRequestSent = false;
                    $scope.disabled.SaveButton = false;
                    toaster.error({ type: 'error', title: 'Error', body: "Payment mode data not found please try again!", showCloseButton: true });
                    return;
                }
            }
            
            if (!$scope.IsBackOfficeUser) {
                if ($scope.userInfo().outletCode != $scope.BulkPayment.PaymentSource) {
                    toaster.error({ type: 'error', title: 'Error', body: "Payment source not match with Outlet code!", showCloseButton: true });
                    $scope.disabled.SaveButton = false;
                    return;
                }
            }

            $scope.errorDesc = $scope.ValidateRecords();
            if ($scope.errorDesc != "") {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: $scope.errorDesc, showCloseButton: true });
                return;
            }

            angular.forEach(GData, function (row) {
                if (row.IsSelected) {
                if (row.ReferenceNumber.indexOf('|') > -1) {
                    IsVerticleSlashValid = true;
                    return;

                }
                    if (row.IsValiedAccount != true) {
                        if ((angular.isUndefined(row.ConnectionReference) || row.ConnectionReference == '') ||
                    (angular.isUndefined(row.ContractNumber) || row.ContractNumber == '') ||
                    (angular.isUndefined(row.Amount) || row.Amount == '' || row.Amount == 0)) {
                        if (row.IsValiedAccount != undefined) {
                                isAllValidatedError = true;
                            }
                        }
                    } else {
                        if (row.PrePost == 1) {
                            isPrePaidExist = true;
                        }
                        var s = new BillingBatchRecCollection();
                        s.ConnectionRef = row.ConnectionReference;
                        s.ContractId = row.ContractNumber;
                        s.SbuCode = row.SBU;//
                        s.PrePostType = row.PrePost;            
                        s.Hybrid = row.Hybrid == "Y" ? 1 : 0;
                        s.ConnectionReference = row.ConnectionReference;
                        s.ProdType = row.ProductType;
                        s.PREmail = row.PREmail;
                        s.ContractEmail = row.ContractEmail;
                        s.IsValiedAccount = row.IsValiedAccount;
                        s.ContactNo = row.ContactNo;
                        s.Amount = row.Amount;
                        s.TotalOutstanding = row.TotalOutstanding;//
                        s.BalanceAmt = row.BalanceAsAt;
                        s.ReconFee = row.MinReconFee;
                        s.ReferenceNumber = $scope.BulkPayment.ExistingReference;//
                        s.Remarks = row.Remarks;
                        s.PaymentModeRef = $scope.BulkPayment.ExistingReference;
                        s.IsSuspense = row.IsSuspend;
                        s.PaymentMode = $scope.BulkPayment.PaymentMode;
                        s.CustRef = row.CustomerIDNumber;
                        s.CustRefType = row.PrePost;
                        s.CustName = row.CustomerName;//
                        s.AccountNo = row.AccountNo;
                        s.Transferred = 2;
                        s.CustomerIDNumber = row.CustomerIDNumber;
                        s.OldNIC = row.OldNIC;
                        s.RefNo = row.ReferenceNumber;
                        s.ConnectionType = row.SwitchStatus;
                        if (row.IsSuspend) {
                            s.PaymentMethod = 3;
                        } else {
                            s.PaymentMethod = $scope.BulkPayment.PaymentMethod;
                        }
                        s.CustomerIDType = row.CustomerIDType;
                        batchObj.BatchRec.push(s);
                    }
                }               

            });
        if (IsVerticleSlashValid) {
            $scope.IsRequestSent = false;
            $scope.disabled.SaveButton = false;
            toaster.error({ type: 'error', title: 'Error', body: 'Please remove the Vertical Slash Marks ( | ) entered in the Ref. Number field', showCloseButton: true });
            return;
        }
            if (isPrePaidExist) {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: "Prepaid account/s exists! Please uncheck Prepaid account/s data.", showCloseButton: true });
                return;
            }
            if (isAllValidatedError) {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: "Please select the payments you want to submit!", showCloseButton: true });
                return;
            }
            if (batchObj.BatchRec.length < 1) {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: "Please select the payments you want to submit!", showCloseButton: true });
                return;
            } 
            batchObj.AttachmentRef = $scope.TransRef;
            batchObj.Remarks = $scope.BulkPayment.Remarks;
            batchObj.TempAttachmentRef = $scope.TempAttachmentRef;
            batchObj.IsAttach = $scope.IsAttach;
        BulkPaymentService.PostBatchDetails(batchObj).success(function (response) {
                if (response.Code != MessageTypes.Success) {
                    $scope.IsRequestSent = false;
                    $scope.disabled.SaveButton = false;
                    toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                    return;
                } else { 
                    $scope.disabled.Remarks = true;
                    $scope.BulkPayment.BatchId = response.Result;
                    $scope.IsRequestSent = true;

                    toaster.success({ type: 'Success', title: 'Receipt/s saved successfully', body: response.Message, showCloseButton: true });
                    $scope.GetBatchDetails();
                    $scope.disabled.Remarks = true;
                    $scope.disabled.Attachment = true;
                    $scope.PaymentMethodDrop = true;
                    $scope.PaymentTypeDrop = true;
                    $scope.PaymentSourceDrop = true;
                    $scope.PaymentBu = true;
                    $scope.PaymentProdCatDrop = true;
                    $scope.IsRetrivedCrmDetails = true;
                    $scope.IsRetrivedCrmDetailsBulk = true;
                    //$scope.BindRetrivedBillData(response);
                    $scope.Get3GConnectionDetails();
                }

            }).error(function (response) {
                $scope.IsRequestSent = false;
                $scope.disabled.SaveButton = false;
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
            });
    }


    $scope.GetBatchDetails = function () {

        

        var batchId = $scope.BulkPayment.BatchId;
        if (batchId == undefined || batchId == "") {
            toaster.error({ type: 'error', title: 'Error', body: "Please enter batchId...!", showCloseButton: true });
            return;
        }
        BulkPaymentService.GetBatchDetails(batchId).success(function (response) {

            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            } else {
                $scope.dgGridBulkPayment.data([]);
                //toaster.success({ type: 'Success', title: 'Success', body: response.Message, showCloseButton: true });
                $scope.LastRetrivedBatchId = batchId;
                $scope.BindRetrivedBillData(response);
                $scope.disabled.SaveButton = true;
                $scope.disabled.Remarks = true;
                $scope.PrintAllButton12 = false;
                $scope.PrintAllButton12 = false;
                $scope.BulkPayment.UploadRadioBtnIsDisabled = true;
                $scope.BulkPayment.AddPaymentRadioBtnIsDisabled = true;
                $scope.BulkPayment.CustIdRadioBtnIsDisabled = true;
                $scope.BulkPayment.BillInvRadioBtnIsDisabled = true;
                $scope.BulkPayment.AddPaymentBtnIsDisabled = true;
                $scope.BulkPayment.CustIdIsDisabled = true;
                $scope.BulkPayment.BillInvIsDisabled = true;
                $scope.BulkPayment.UploadBtnIsDisabled = true;
            }

        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });

    }


    //((((((((((((((((((((((((((((((((((       Cancel Batch     ((((((((((((((((((((((((((((((((((((((((((((((((((((((((

    $scope.CancelReceipt = function (row) {
        
        var a = $scope.BulkPayment.PaymentType;
        
            
        var c = row.PaymentMethod;
        var d = row.SBU;
        var e = $scope.BulkPayment.ProdCat;
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));

        if (defaultDataCookieObj != null) {
            var b = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource,
                { CcbsPaymentSource: $scope.BulkPayment.PaymentSource })[0].Id : "";

            $scope.aa = defaultDataCookieObj.BillingPaymentType.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentType,
                { Id: a })[0].Description : "";

            $scope.dd = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu,
                { Id: d })[0].Description : "";

            $scope.bb = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource,
                { Id: b })[0].Description : "";

            $scope.cc = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods,
                { Id: c })[0].Description : "";

            $scope.ee = defaultDataCookieObj.BillingProdCat.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingProdCat,
                { Id: e })[0].Description : "";
        }


        //$scope.CancelReceiptObj = {};
        $scope.CancelReceiptObj = {
            IsSelected: true,
            ReceiptStatus: row.ReceiptStatus,
            PrePost: row.PrePostDesc,
            SBU: $scope.dd,
            SbuCode: row.SBU,
            ReceiptDate: $scope.BulkPayment.DateTime,
            ReceiptNumber: row.ReceiptNo,
            ReferenceNo: row.ReferenceNumber,
            ConnectionReference: row.ConnectionReference,
            ContractNo: row.ContactNo,
            Amount: row.Amount,
            PaymentMode: $scope.BulkPayment.PaymentMode,
            PaymentMethod: $scope.cc,
            PaymentSource: $scope.bb,
            ReceiptGeneratedUser: $scope.BulkPayment.User,
            PaymentModeId: $scope.BulkPayment.PaymentMode,
            PaymentMethodId: c,
            PaymentSourceId: b,
            PaymentTypeId: a,
            PaymentType: $scope.aa,
            ProductType: row.ProductType,
            PaymentSeq: row.PaymentSeq
        };
        return $scope.CancelReceiptObj;
    };

    $scope.CancelSingleReceipt = function (e) {

        if (permissionCodes.indexOf("50104") == -1) {
            toaster.error({ type: 'error', title: 'Error', body: 'You have not enough permission to continue.!', showCloseButton: true });
            return;
        } else {
        }

        var guId = e.dataItem.uid;
        var selectRow = $scope.dgGridReceiptDetails.findByGuid(guId);
        var dataItems = $scope.dgGridReceiptDetails.data();
        var row = dataItems[selectRow];

        $scope.CancelReceiptObj1 = [];
       
        $scope.CancelReceiptObj1.push($scope.CancelReceipt(row));

        $scope.recObj = {
            'BatchId': $scope.BulkPayment.BatchId,
            'BatchDate': $scope.BulkPayment.DateTime,
            'TotalAmt': row.Amount,
            'RecCollection': $scope.CancelReceiptObj1
        };
        

        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentCancellation";

    }

    $scope.CancelBulkReceipt = function () {
        var dGrid = $scope.dgGridReceiptDetails.data();

        $scope.ReceiptObj = [];
        $scope.totAmt = 0;
        angular.forEach(dGrid, function (row) {
            if (row.IsSelected) {
                $scope.totAmt = row.Amount;
                $scope.ReceiptObj.push($scope.CancelReceipt(row));
            }
        });

        $scope.recObj = {
            'BatchId': $scope.BulkPayment.BatchId,
            'BatchDate': $scope.BulkPayment.DateTime,
            'TotalAmt': $scope.totAmt,
            'RecCollection': $scope.ReceiptObj
        };

        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentCancellation";

    }

    $scope.Transfer = function (e) {

        if (permissionCodes.indexOf("50105") == -1) {
            toaster.error({ type: 'error', title: 'Error', body: 'You have not enough permission to continue.!', showCloseButton: true });
            return;
        } else {
            
        }

        var guId = e.dataItem.uid;
        var selectRow = $scope.dgGridReceiptDetails.findByGuid(guId);
        var dataItems = $scope.dgGridReceiptDetails.data();
        var row = dataItems[selectRow];

        $scope.CancelReceiptObj1 = [];
        $scope.CancelReceiptObj1.push($scope.CancelReceipt(row));

        $scope.recObj = {
            'BatchId': $scope.BulkPayment.BatchId,
            'BatchDate': $scope.BulkPayment.DateTime,
            'TotalAmt': row.Amount,
            'RecCollection': $scope.CancelReceiptObj1
        };


        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentTransfer";

    }

    $scope.OpenPostingStatus = function (e) {
        var guId = e.dataItem.uid;
        var selectRow = $scope.dgGridReceiptDetails.findByGuid(guId);
        var dataItems = $scope.dgGridReceiptDetails.data();
        var row = dataItems[selectRow];

        $scope.CancelReceiptObj1 = [];
        $scope.CancelReceiptObj1.push($scope.CancelReceipt(row));

        $scope.recObj = {
            'BatchId': $scope.BulkPayment.BatchId,
            'BatchDate': $scope.BulkPayment.DateTime,
            'TotalAmt': row.Amount,
            'RecCollection': $scope.CancelReceiptObj1
        };


        localStorage.setItem('InquiryReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentInquiry";

    };


    $scope.selectedDrp = 0;
    $scope.YesNoConditions = function () {
        //if (($scope.BulkPayment.BatchId == "" || $scope.BulkPayment.BatchId == undefined) && $scope.dgGridBulkPayment.data().length > 1) {
            $scope.YesNoMessageOpen();
        //}
    }
    $scope.oldPTypeValue = 0;
    $scope.oldPSourceValue = 0;
    $scope.oldPMethodValue = 0;
    $scope.oldBuValue = 0;
    $scope.oldPCategoryValue = 0;

    $scope.as = function (drpId) {
       
        if (drpId == 1) {
            $scope.oldPTypeValue = $scope.BulkPayment.PaymentType;
        } else if (drpId == 2) {
            $scope.oldPSourceValue = $scope.BulkPayment.PaymentSource;
        } else if (drpId == 3) {
            $scope.oldPMethodValue = $scope.BulkPayment.PaymentMethod;
        } else if (drpId == 4) {
            $scope.oldBuValue = $scope.BulkPayment.Sbu;
        } else if (drpId == 5) {
            $scope.oldPCategoryValue = $scope.BulkPayment.ProdCat;
        }
    }
    $scope.ChangePaymentSourse = function (newValue, oldValue) {
        //console.log(newValue);
        //console.log(oldValue);
        //var d = $scope.BulkPayment.PaymentSource;
        //$scope.YesNoConditions(2);
    }
    

    //$scope.ChangePaymentMethod = function () {
    //    $scope.YesNoConditions(3);
    //}

    //$scope.ChangeSbu = function () {
    //    $scope.YesNoConditions(4);
    //}

    $scope.ChangeProductCategory = function () {
        localStorage.setItem("CurrentProductCategory", $scope.BulkPayment.ProdCat);
    }

    //)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  

    //##########################################################

    var s1 = [];

    //////////////////////=========== GRID Navigation =============/////////////////////////////

    $scope.EditPaymentValue = function (row, e) {
        var d = $scope.dgGridBulkPayment.data();
        $scope.paiedAmt = 0;
        angular.forEach(d, function (gridRow) {
            if (gridRow.ConnectionReference == row.dataItem.ConnectionReference) {

            } else if (gridRow.ContractNumber == row.dataItem.ContractNumber) {

            } if (gridRow.IsSelected) {
                $scope.paiedAmt = (Number($scope.paiedAmt) + Number(gridRow.Amount)).toFixed(2);
            }
            
        });
        $scope.BulkPayment.TotalPayAmount = $scope.paiedAmt > 0 ? $scope.paiedAmt : Number(0).toFixed(2);
        $scope.BulkPayment.TotalAmount = $scope.paiedAmt > 0 ? $scope.paiedAmt : Number(0).toFixed(2);
    }

    $scope.KK = function (row, e) {

        //if ($scope.BulkPayment.BillPaymentType != 0 &&  $scope.BulkPayment.BillPaymentType != 3) {
        //    toaster.error({ type: 'error', title: 'Error', body: 'This option enabled only for Random Bill Payment / Bulk Upload. Please select one of them...!', showCloseButton: true });
        //    return;
        //}

        var key = e.keyCode ? e.keyCode : e.which;
        if (key === 13) {

            var focusedElement = $(e.target);
            var nextElement = focusedElement.closest('td').next();

            var $nonempty = $('.conn-ref2').eq(0).filter(function () {
                return this.value != ''
            });         
           
            ///////////////////////////////////
            if (focusedElement.hasClass("ref-no")) {

                nextElement = focusedElement.closest('td').next();
                nextElement.find('input').focus();

                
                var s = row.dataItem;

                if (!s.ConnectionReferenceGridDisabled) {

          
                    //////////
                    s1 = $scope.dgGridBulkPayment.data();
                    if ((angular.isUndefined(s.ConnectionReference) || s.ConnectionReference == '') &&
                    (angular.isUndefined(s.ContractNumber) || s.ContractNumber == '') ||
                    (angular.isUndefined(s.Amount) || s.Amount == '' || s.Amount <= 0)) {
                        toaster.error({ type: 'error', title: 'Error', body: 'Amount should be entered with Connection Reference or Contract Number!', showCloseButton: true });
                        return;
                    } else {
                        //  toaster.success({ type: 'Success', title: 'Success', body: 'Successfully added!', showCloseButton: true });


                        $scope.RowsId = $scope.RowsId + 1;
                        s1.splice(s1.length - 1, 0, { 'IsSelected': true, 'RowId': $scope.RowsId, 'ConnectionReference': s.ConnectionReference, 'ContractNumber': s.ContractNumber, 'Amount': s.Amount, 'ReferenceNumber': s.ReferenceNumber });


                        $scope.dgGridBulkPayment.data(s1);
                        var d = $scope.dgGridBulkPayment.data();

                        var AccountList = [];

                        AccountList.push({
                            "connRef": s.ConnectionReference,
                            //"accountNo": e.dataItem.AccountNo,
                            "contractNo": s.ContractNumber
                        });
                        $scope.RequetCRMDetails(AccountList);

                        s.ConnectionReference = '';
                        s.ContractNumber = '';
                        s.Amount = '';
                        s.ReferenceNumber = '';


                        ///////////////////////////////////

                        setTimeout(function () {
                            var index = 0;
                            $('#dgBulkPayment tr:last .conn-ref2').focus();

                        }, 10);


                        if (proCategory != 2 && s.ConnectionReference.length > 0 && (s.ConnectionReference.length < 8 || s.ConnectionReference.length > 9)) {
                            toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference length should be between 8 and 9!', showCloseButton: true });
                            return;
                        } else {
                            if ($scope.BulkPayment.ProdCat == 2 && s.ConnectionReference != null && s.ConnectionReference.length > 20) {
                                toaster.error({ type: 'error', title: 'Error', body: 'Error Connection Reference Length should be 0 < length <= 20!', showCloseButton: true });
                                return;
                            } else {

                            }
                        }
                         
                    }

                }

            }

            else if (focusedElement.hasClass("conn-ref2")) {


                if ($nonempty.length == 0) {

                    setTimeout(function () {
                        nextElement.find('input').focus();
                    }, 10);
                }

                else {

                    nextElement = focusedElement.closest('td').next().next().next().next();
                    nextElement.find('input').focus();

                }
            }

            else if (focusedElement.hasClass("contract-no")) {

                nextElement = focusedElement.closest('td').next().next().next();

                nextElement.find('input').focus();
            }

            else if (focusedElement.hasClass("amount")) {
                nextElement = focusedElement.closest('td').next().next().next().next().next().next().next().next().next().next();

                setTimeout(function () {
                    nextElement.find('input').focus();
                }, 10);

            }
////////           

        }

        var d = $scope.dgGridBulkPayment.data();
        $scope.paiedAmt = 0;
        angular.forEach(d, function (row) {
            $scope.paiedAmt = (Number($scope.paiedAmt) + Number(row.Amount)).toFixed(2);
        });
        $scope.BulkPayment.TotalPayAmount = $scope.paiedAmt > 0 ? $scope.paiedAmt : Number(0).toFixed(2);
        $scope.BulkPayment.TotalAmount = $scope.paiedAmt > 0 ? $scope.paiedAmt : Number(0).toFixed(2);

        $scope.BulkPayment.NoOfRecords = $scope.BulkPayment.BillPaymentType == 0 ? d.length - 1 : d.length;
    }
    ////////////////////////////////////////////////////////

    
    // ------------------ Attachments ------------------------------------

    $scope.receipt = [];
    // $scope.receipt.ReceiptId123 = "";
    $scope.IsAttach = "NO";

    //REFERENCE POPUP
    $scope.referenceParams = {
        moduleId: "BILLING-BULK-PAYMENT-001",
        TransactionId: $scope.TempAttachmentRef,
        isAttachedDoc: true
    };

    $scope.$watch("TempAttachmentRef", function (newValue) {
        $scope.referenceParams.TransactionId = $scope.TempAttachmentRef;
    });

    $scope.$watch("BulkPayment.BatchId", function (newValue) {
        $scope.referenceParams.TransactionId = $scope.BulkPayment.BatchId;
        $scope.referenceParams = {
            moduleId: "BILLING-BULK-PAYMENT-001",
            TransactionId: $scope.BulkPayment.BatchId,
            isAttachedDoc: true,
            IsDisabled: true
        };
    });


    //End REFERENCE POPUP 
    $scope.TransRef = "";
    $scope.referenceCallback = function (data) { 
        console.log(data, 'call back');
        $scope.TransRef = data.TransactionReference[0];
        $scope.IsAttach = "YES";
    }; 

    $scope.GenGuid = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    $scope.GenerateGuid = function () {
        this.length = 16;
        this.timestamp = +new Date;

        var ts = this.timestamp.toString();
        var parts = ts.split("").reverse();
        var id = "";

        for (var i = 0; i < this.length; ++i) {
            var index = $scope.GenGuid(0, parts.length - 1);
            id += parts[index];
        }
        $scope.TempAttachmentRef = id;
    }


    $scope.IsAttach = "NO";

    //-------------------- End Attachment ----------------------------

    $scope.result = {};
    ///////////////Yes No Modal//////////////
    

    $scope.customMessage = {
        Title: 'this message is a custom string',
        Message: 'this message is a second custom string'
    };

    $scope.yesNoMessageCallback = function (data) {
        // console.log(data,'data');
        if (data.Id == 1) {
            if (data.YesNoResponse != 'no') {
                $scope.GenerateGuid();
                objTemp = [];
                $scope.finderBulkBillingBatchID.info.onLoad = true;
                $scope.finderBulkBillingBatchID.params = objTemp;
                $("#" + $scope.finderBulkBillingBatchID.info.modalId).modal('show');
            }
        } else if (data.Id == 2) {
            if (data.YesNoResponse == 'no') {
                $scope.BulkPayment.PaymentMode = "0";
                toaster.error({ type: 'error', title: 'Error', body: "Please select another payment mode instead of Cheque!", showCloseButton: true });
                $scope.IsReadyForSubmit = false;

                var objTemp = new PaymentModeOptions();
                $scope.SelectedPaymentMode = "50";
                objTemp.PaymentMode = "50";
                objTemp.MobileNo = new Date().getTime().toString();
                objTemp.Callback = $scope.paymentModeCallBack;
                $scope.Options = objTemp;
                return;
            } else {
                $scope.IsReadyForSubmit = true;
            }
        } else if (data.Id == 3) {
            if (data.YesNoResponse != 'no') {
                $scope.changePageState('NEW');
            }
        }

    };


    $scope.YesNoMessageOpen = function () {
        //open popup 
        window._focuse();  
        $("#YesNoMessage").modal({
            backdrop: 'static',
            keyboard: false
        }, 'show');
    };

    $scope.PrintReceipts = function (e, isMail) {//use contractEmail
        var guId = e.dataItem.uid;
        var selectRow = $scope.dgGridReceiptDetails.findByGuid(guId);
        var dataItems = $scope.dgGridReceiptDetails.data();
        var row = dataItems[selectRow];
        if (isMail == 1) {
            if (row.ReceiptNo != undefined && row.ReceiptNo != "") {

                BulkPaymentService.GetSendEmail(row.ReceiptNo, 2).success(function (response) {
                    if (response.Code != MessageTypes.Success) {
                        toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                        return;
                    } else {
                        toaster.success({ type: 'success', title: 'Success', body: response.Message, showCloseButton: true });
                    }

                }).error(function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
                });
            }
        } else {

            if (appConfig.IsPostpaidCloud == 1) {
                window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingGetSingleReceiptPrint/" + row.ReceiptNo + "/" + $scope.userInfo().userId);
            }
            else {
            PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { PrintType: isMail, Outlet: $scope.userInfo().outletCode, type: "BillingSingleReceiptPrint", receiptId: row.ReceiptNo, userId: $scope.userInfo().userId, WithSerial: false, Token: $scope.userInfo().token }, '_blank');

        }
        
        }
        
    };

    $scope.BulkPrintReceipts = function () {//premail
        if ($scope.CPOSoutletSMSPrintingOption == 2) {
            var custId = "";
            var custIdType = "";
            var isCorrect = true;
            $scope.disabled.BulkEmailButton = true;
            angular.forEach($scope.dgGridReceiptDetails.data(), function (row) {

                if (row.CustomerIDType == "TIN") {
                    if (custId == "") {
                        custId = row.CustRef;
                    } else {
                        if (custId != row.CustRef) {
                            isCorrect = false;
                        }
                    }
                } else {
                    isCorrect = false;
                }
            });

            if (!isCorrect) {
                toaster.error({ type: 'error', title: 'Error', body: " Cannot use this print option because there are multiple TIN numbers in the batch...!", showCloseButton: true });
                $scope.PrintAllButton12 = true;
                return;
            } else {
                $scope.PrintAllButton12 = false;
            }
        } else {
            $scope.disabled.BulkEmailButton = false;
            $scope.PrintAllButton12 = false;
        }

        var d = $scope.userInfo();
        if ($scope.CPOSoutletSMSPrintingOption == 1) {
            if (appConfig.IsPostpaidCloud == 1) {
                debugger;
                window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingGetReceiptBatchContPrint/" + $scope.BulkPayment.BatchId + "/" + $scope.userInfo().userId);
            }
            else {
                PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { PrintType: "2", Outlet: $scope.userInfo().outletCode, type: "BillingBulkReceiptsOnePage", batchId: $scope.BulkPayment.BatchId, userId: $scope.userInfo().userId, WithSerial: false, Token: $scope.userInfo().token }, '_blank');//BLLB710015817
            }

        } else {
            if (appConfig.IsPostpaidCloud == "1") {
                window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingGetBulkReceipt/" + $scope.BulkPayment.BatchId + "/" + $scope.userInfo().userId);
            } else {
                PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { PrintType: "2", Outlet: $scope.userInfo().outletCode, type: "BillingBulkReceipts", batchId: $scope.BulkPayment.BatchId, userId: $scope.userInfo().userId, WithSerial: false, Token: $scope.userInfo().token }, '_blank');//BLLB710015817
            }
        }
    };

    DirectPrintService.start();

    $scope.DirectBulkPrintReceipts = function () {
        var dataItems1 = $scope.dgGridReceiptDetails.data();
        if (dataItems1.length <= appPrintingConfig.PRINTING_COPIES) {
            $scope.AutoPrint();
        } else {
            if ($scope.CPOSoutletSMSPrintingOption == 1) {
                if (appConfig.IsPostpaidCloud == 1) {
                debugger;
                    window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingGetReceiptBatchContPrint/" + $scope.BulkPayment.BatchId + "/" + $scope.userInfo().userId);
                }
                else {
                PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { PrintType: "2", Outlet: $scope.userInfo().outletCode, type: "BillingBulkReceiptsOnePage", batchId: $scope.BulkPayment.BatchId, userId: $scope.userInfo().userId, WithSerial: false, Token: $scope.userInfo().token }, '_blank');//BLLB710015817
                }

            } else {
                if (appConfig.IsPostpaidCloud == "1") {
                    window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingGetBulkReceipt/" + $scope.BulkPayment.BatchId + "/" + $scope.userInfo().userId);
                } else {
                    PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { PrintType: "2", Outlet: $scope.userInfo().outletCode, type: "BillingBulkReceipts", batchId: $scope.BulkPayment.BatchId, userId: $scope.userInfo().userId, WithSerial: false, Token: $scope.userInfo().token }, '_blank');//BLLB710015817
                }
            }
        }        
    };


    $scope.AutoPrint = function () {
        debugger;
        ReceiptPrintingService.GetBulkPaymentPrintingByBatchNo($scope.BulkPayment.BatchId, $scope.userInfo().userId).then(function (response) {
            debugger;
            if (response.data.Code == "0") {
                for (var i = 0; i < response.data.Result.length; i++) {
                    DirectPrintService.print(function () {
                        $scope.$apply(function () {
                            console.log('Print Completed');
                            $timeout(function () {
                            }, 3000);
                        });
                    },
                   response.data.Result[i].ReportHtml);
                };
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };



    $scope.BulkEmailReceipts = function () {
        if ($scope.CPOSoutletSMSPrintingOption == 1) {
            if ($scope.BulkPayment.BatchId != undefined && $scope.BulkPayment.BatchId != "") {

                BulkPaymentService.GetSendEmail($scope.BulkPayment.BatchId, 1, $scope.userInfo().userId).success(function (response) {
                    if (response.Code != MessageTypes.Success) {
                        toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                        return;
                    } else {
                        toaster.success({ type: 'success', title: 'Success', body: response.Message, showCloseButton: true });
                    }

                }).error(function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
                });
            }
            
            //PrintService.OpenPrint('POST', appConfig.REPORT_URL + 'ReportViewer.aspx', { PrintType: "1", Outlet: $scope.userInfo().outletCode, type: "BillingBulkReceiptsEmail", batchId: $scope.BulkPayment.BatchId, userId: $scope.userInfo().userId, WithSerial: false, Token: $scope.userInfo().token }, '_blank');//BLLB710015817
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "This feature not enabled ...!", showCloseButton: true });
        }
    };

    
    $scope.ChangePrint = function () {
        
        var custId = "";
        var custIdType = "";
        var isCorrect = true;
        if ($scope.CPOSoutletSMSPrintingOption == 2) {
            $scope.disabled.BulkEmailButton = true;
            angular.forEach($scope.dgGridReceiptDetails.data(), function (row) {

                if (row.CustomerIDType == "TIN") {
                    if (custId == "") {
                        custId = row.CustRef;
                    } else {
                        if (custId != row.CustRef) {
                            isCorrect = false;
                        }
                    }
                } else {
                    isCorrect = false;
                }
            });

            if (!isCorrect) {
                toaster.error({ type: 'error', title: 'Error', body: " Cannot use this print option because there are multiple TIN numbers in the batch...!", showCloseButton: true });
                $scope.PrintAllButton12 = true;
            } else {
                $scope.PrintAllButton12 = false;
            }
        } else {
            $scope.disabled.BulkEmailButton = false;
            $scope.PrintAllButton12 = false;
        }

    }

        $scope.findExistingRef = {
        title: "Existing Reference Finder",
        info: {
            appId: "ZBC-DCPOS",
            uiId: "POS-SRF-RBE-ER",
            mapId: "SRF-RBE-ER",
            modalId: "findExistingRef", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],

        callback: function (data) {

            $scope.BulkPayment.TotalPayAmount = data.selectedItem.Amount;
            $scope.BulkPayment.ExistingReference = data.selectedItem.ReferenceNo;
            $scope.NewExistingReference = data.selectedItem.ReferenceNo;
            
            $scope.paymentModeCallBack({ 'ReferenceNo': data.selectedItem.ReferenceNo });
            //  console.log($scope.NewExistingReference)
        },
        open: function () {
            window._focuse(this.info.modalId);
            objTemp = [];
            objTemp.push($scope.userInfo().userId);
            objTemp.push("");
            objTemp.push($scope.BulkPayment.PaymentMode);
            objTemp.push($scope.userInfo().outletCode);
            this.params = objTemp;


            this.info.onLoad = true;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //$scope.a = 0;
    //$scope.TabChange = function () {
    //    $scope.a = $scope.a + 1;
    //    var d = $scope.a % 2;
    //    if (d == 1) {
    //        $("li#ListReceiptDetails").removeClass("active");
    //        $("li#ListBulkEntry").addClass("active");
    //    } else {
    //        $("li#ListBulkEntry").removeClass("active");
    //        $("li#ListReceiptDetails").addClass("active");
    //    }
    //}

    $scope.GoToContractSummary = function (e) {
        //Test URL
        var d = new Date();
        var todate = d.getFullYear() + '-' + ("0" + (d.getMonth() + 1)).slice(-2) + '-' + ("0" + d.getDate()).slice(-2);//
        $window.open('http://172.26.86.45/contract-summary/#/contractId/' + e.dataItem.ContractNumber + '/fromDate/' + '2013-01-01' + '/toDate/' + todate + '/user/' + $scope.userInfo().userId);//

        //Live URL
        //var d = new Date();
        //var todate = d.getFullYear() + '-' + ("0" + (d.getMonth() + 1)).slice(-2) + '-' + ("0" + d.getDate()).slice(-2);//
        //$window.open('http://172.26.86.41/contract-summary/#/contractId/' + e.dataItem.ContractNumber + '/fromDate/' + '2016-12-01' + '/toDate/' + todate + '/user/' + $scope.userInfo().userId);//

    }

    $scope.InheritRemarks = function () {
        var dGrid = $scope.dgGridBulkPayment.data();
        angular.forEach(dGrid, function (row) {
            row.Remarks = $scope.BulkPayment.Remarks;
        });
    }
    var a = true;

    $scope.onExit = function () {

        a = BulkPayment.aa;
        if (a == '1') {
            return true;
        } else {
            return false;
        }
    };

    $window.onbeforeunload = $scope.onExit;

    $scope.AddBillInvoicePayments = function () {
        $scope.RequetCRMDetails();
    };

    $scope.focusBillInvoiceNumber = function () {
        var myEl = angular.element(document.querySelector('#focusBillInvoiceNumberValue'));
        myEl.focus();
    };

}]);

//test
angular.module("DialogBilling").controller('BulkReceiptPrintingController', ["$scope", "Page", "$routeParams", "$filter", "PaymentInqueryService", "BulkPaymentService", "fileUploadService", "BulkReceiptPrintingService", "toaster", "appConfig", "PrintService", "ReceiptPrintingService", "DirectPrintService", "$timeout", function ($scope, Page, $routeParams, $filter, PaymentInqueryService, BulkPaymentService, fileUploadService, BulkReceiptPrintingService, toaster, appConfig, PrintService, ReceiptPrintingService, DirectPrintService, $timeout) {
    //Set Page Title
    Page.setTitle("Bulk Receipt Printing");

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations

    //////////====================== Bulk Receipt Printing Grid  ===================

    var configBulkReceiptPrinting = {};
    var configBulkReceiptPrinting = {
        columns: [
                     {
                         field: "IsSelected",
                         headerTemplate: '',
                         template: '<input type="checkbox"  ng-click="selectThis1($event)" ng-model="dataItem.IsSelected" ng-disabled = "dataItem.IsSelectedRowDisabled" />',
                         width: "32px"
                     },

                     { field: "ReceiptNo", title: "Receipt Number", width: "120px" },
                     { field: "Description", title: "Receipt Status", width: "70px" },
                     { field: "SBUSName", title: "SBU", width: "70px" },
                     { field: "ReceiptDate", title: "Receipt Date", width: "90px" },
                     { field: "ContractId", title: "Contract ID", width: "90px" },
                     { field: "ConnectionRef", title: "Connection Reference", width: "90px" },
                     { field: "CustmoerName", title: "Customer Name", width: "140px" },
                    {
                        field: "Amount", title: "Amount",
                        width: "50px"
                    },
                    { field: "PaymentModeName", title: "Payment Mode", width: "90px" }
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true,
        dataBound: function () {
            var dGrid = $scope.dgGridBulkRecePrinting.data();
            angular.forEach(dGrid, function (row) {
                if (row.IsSelectedRowDisabled == true) {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                } else if (row.Description == "Cancelled") {
                     $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //red
                     if ($scope.IsUploads) {
                         row.IsSelected = false;
                     } else {
                         row.IsSelected = true;
                     }
                }

                if (!$scope.IsUploads) {
                    row.IsSelectedRowDisabled = true;
                }
            });
        }
    };

    configBulkReceiptPrinting.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'IsSelected': { editable: false, type: "boolean" },
                    'Description': { editable: false, type: "string" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptNo': { editable: false, type: "number" },
                    'ReferenceNo': { editable: false, type: "number" },
                    'ConnectionRef': { editable: false, type: "number" },
                    'CustmoerName': { editable: false, type: "string" },
                    'Amount': { editable: false, type: "number" },
                    'PaymentMode': { editable: false, type: "string" },
                    'PaymentType': { editable: false, type: "string" },
                    'PaymentSource': { editable: false, type: "string" },
                    'PaymentModeName': { editable: false, type: "string" },
                    'SBUSName': { editable: false, type: "string" },
                    'SBUSCODE': { editable: false, type: "string" },
                    'ContractId': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 10

    });

    $scope.selectThis1 = function (e) {
        var dataItems1 = $scope.dgGridBulkRecePrinting.data();
        var isSelected = true;
        for (var i = 0; i < dataItems1.length; i++) {
            var sss = dataItems1[i].IsSelected;
            if (!dataItems1[i].IsSelected) {
                isSelected = false;
            }
        }
        $scope.IsSelectedAll = isSelected;

    };


    $scope.dgGridBulkRecePrinting = new DataGrid();
    $scope.dgGridBulkRecePrinting.options(configBulkReceiptPrinting);

    $scope.InitA = function (arg) {
        $scope.dgGridBulkRecePrinting.Init(arg);
    };

    $scope.LoadPaymentSourseByPaymentType = function () {
        BulkPaymentService.GetPaymentSource($scope.payInquery.PaymentType).then(function (response) {
            if (response.data.Code == "0") {
                $scope.PaymentSourceCollection = response.data.Result;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    }

    //===========================================================================================================



    //####################################      Finder Payment Source Code       ########################################

    $scope.finderBulkRecePrinting = {

        title: "Search by Bulk Receipt Printing",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-BULKRECEIPTPRINTING",
            mapId: "BILLING-BULKRECEIPTPRINTING-MAP",
            modalId: "finderBulkRecePrinting",
            dataLoad: false,
            onLoad: false
        },

        params: [],

        callback: function (data) {
            $scope.GetBulkRecePrintingByBatchNo(data.selectedItem.BatchNo);
            $scope.Receipt.OutletId = data.selectedItem.OutletId;
            $scope.Receipt.BatchNo = data.selectedItem.BatchNo;
            $scope.Receipt.UserId = data.selectedItem.PrintedUser;
            $scope.Receipt.PrintedDateTime = data.selectedItem.DateTime;
            $scope.IsUploads = false;
        },
        open: function () {
            this.info.onLoad = true;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################




    $scope.hasListbtnValidation = true;

    $scope.uploadDocuments = function () {
        $scope.PrintBtnValidation = true;
        $scope.IsUploads = true;
        if ($scope.RequestStatusChange()) {
            return;
        }
        if ($scope.myFile != undefined) {
            var objAttached = {
                file: $scope.myFile,
                ModuleId: '1',
                TransactionId: '12',
                ProductCategory: '5',
                PaymentSource: '8'
            };

            $scope.Receipt.BatchNo = ""; 
            $scope.Receipt.PrintedDateTime = "";
            $scope.Receipt.NoofRecords = "";
            $scope.Receipt.UserId = "";


            fileUploadService.UploadExcelBulkReceiptPrintingFiles(objAttached).then(
                function (result) {
                    if (result.data.Code == 0 && result.data.Result.length > 0) {
                        $scope.dgGridBulkRecePrinting.data(result.data.Result);
                        $scope.hasListbtnValidation = true;
                        BulkReceiptPrintingService.PostReceiptPrintingDetails({ ReceiptNo: result.data.Result, ValiedNoofRecords: 0, AllNoofRecords: 0 }).then(function (result) {
                            $scope.dgGridBulkRecePrinting.data(result.data.Result);
                            toaster.success({ type: 'Success', title: 'Success', body: 'Excel data successfully added!', showCloseButton: true });
                            $scope.hasListbtnValidation = false;
                        });
                    } else {
                        toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
                    }
                }, function (result) {
                    toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
                });
        } else {
            toaster.error({ type: 'error', title: 'Error', body: 'Please select the upload file!', showCloseButton: true });
        }
    };

    $scope.Receipt = {}
    $scope.Receipt.BatchNo = "";
    $scope.Receipt.UserName = "";
    $scope.Receipt.PrintedDateTime = "";
    $scope.Receipt.NoofRecords = "";
    $scope.Receipt.UserId = "";
    $scope.Receipt.OutletId = "";

    $scope.PrintBtnValidation = true;
    $scope.IsUploads = false;
    $scope.save = function () {
        $scope.Receipt.BatchNo = "";
        var allReceipts = $scope.dgGridBulkRecePrinting.data();
        var valiedReceipts = [];
        $scope.totalNoOfRecords = allReceipts.length;
        for (var i = 0; i < allReceipts.length; i++) {
            if (allReceipts[i].IsSelectedRowDisabled == false) {
                if (allReceipts[i].IsSelected == true) {
                    valiedReceipts.push(allReceipts[i]);
                }
                allReceipts[i].SaveRecorde = true;
            }
        }

        $scope.Receipt.NoofRecords = valiedReceipts.length;

        if ($scope.Receipt.NoofRecords == 0) {
            toaster.error({ type: 'error', title: 'Error', body: 'No recodes selected', showCloseButton: true });
            return;
        }

        valiedReceipts.ValiedNoofRecords = $scope.Receipt.NoofRecords;
        valiedReceipts.AllNoofRecords = $scope.totalNoOfRecords;
        BulkReceiptPrintingService.SaveReceiptPrintingDetails({ ReceiptNo: valiedReceipts, ValiedNoofRecords: valiedReceipts.ValiedNoofRecords, AllNoofRecords: valiedReceipts.AllNoofRecords }).then(function (result) {
            if (result.data.Result) {
                $scope.IsUploads = false;
                $scope.PrintBtnValidation = false;
                $scope.hasListbtnValidation = true;
                $scope.Receipt.BatchNo = result.data.Result.BatchNo;
                $scope.Receipt.UserName = result.data.Result.UserName;
                $scope.Receipt.OutletId = result.data.Result.OutletId;
                $scope.Receipt.PrintedDateTime = result.data.Result.PrintedDateTime;
                $scope.Receipt.UserId = result.data.Result.UserId;
                $scope.Receipt.TokenId = result.data.Result.TokenId;

                $scope.dgGridBulkRecePrinting.data([]);
                $scope.dgGridBulkRecePrinting.data(valiedReceipts);
                toaster.success({ type: 'Success', title: 'Success', body: 'Excel data ready to Printing', showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
            }
        });
    };

    DirectPrintService.start();
    $scope.PrintReceipts = function () {
        if (appConfig.IsPostpaidCloud == 1) {
            debugger;
            window.open(appConfig.POSTPAID_MODULE_URL + "/GetBillingRandomReceiptBatchPrint/" + $scope.Receipt.BatchNo + "/" + $scope.Receipt.UserId);
        }
        else {
        PrintService.OpenPrint('POST',
              appConfig.REPORT_URL + 'ReportViewer.aspx',
              {
                  PrintType: "2",
                  Outlet: $scope.Receipt.OutletId,
                  type: "BillingRandomBulkReceipts",
                  batchId: $scope.Receipt.BatchNo,
                  userId: $scope.Receipt.UserId,
                  WithSerial: false,
                  Token: $scope.Receipt.TokenId
              }, '_blank');
        }

        //if ($scope.dgGridBulkRecePrinting.data().length>5) {
        //} else {
        //    $scope.AutoPrint();
        //}
    };

    //$scope.AutoPrint = function () {
    //    ReceiptPrintingService.GetBulkReceiptPrintingDetails($scope.Receipt.BatchNo, $scope.Receipt.UserId).then(function (response) {
    //        if (response.data.Code == "0") {
    //            for (var i = 0; i < response.data.Result.length; i++) {
    //                 DirectPrintService.print(function () {
    //                     $scope.$apply(function () {
    //                         console.log('Print Completed');
    //                         //vm.printCompleted = true;
    //                         $timeout(function () {
    //                             //vm.printCompleted = false;
    //                         }, 3000);
    //                     });
    //                 },
    //                response.data.Result[i].ReportHtml);
    //             };
    //         } else {
    //             toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
    //         }
    //     }, function (response) {
    //         toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
    //     });
    //};
    

    $scope.changePageState = function () {
        $scope.PrintBtnValidation = true;
        $scope.IsUploads = false;
        $scope.Receipt = {}
        $scope.dgGridBulkRecePrinting.data([]);
        //$scope.file = null;
    }

    $scope.RequestStatusChange = function () {
        if ($scope.isSendRequest) {
            toaster.error({ type: 'error', title: 'Error', body: 'Procedding...!', showCloseButton: true });
            return true;
        } else {
            return false;
        }
    }

    $scope.GetBulkRecePrintingByBatchNo = function (BatchNo) {
        BulkReceiptPrintingService.GetBulkRecePrintingByBatchNo(BatchNo).then(function (result) {

            $scope.dgGridBulkRecePrinting.data(result.data.Result);
            $scope.hasListbtnValidation = false;
            BulkReceiptPrintingService.PostReceiptPrintingDetails({ ReceiptNo: result.data.Result, ValiedNoofRecords: 0, AllNoofRecords: 0 }).then(function (result) {
                $scope.dgGridBulkRecePrinting.data(result.data.Result);
                toaster.success({ type: 'Success', title: 'Success', body: 'Excel data successfully added!', showCloseButton: true });
                $scope.PrintBtnValidation = false;
                $scope.IsUploads = false;
                $scope.hasListbtnValidation = true;
                $scope.Receipt.NoofRecords = result.data.Result.length;
            });
        }, function (result) {
            toaster.error({ type: 'error', title: 'Error', body: result.data.Message, showCloseButton: true });
        });

    }
}]);
angular.module("DialogBilling").controller('CancellationTransferReasonsController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "CancellationTransferReasonsService", function ($scope, Page, $routeParams, $filter, toaster, CancellationTransferReasonsService) {
    //Set Page Title
    Page.setTitle("Cancellation & Transfer Reasons");
    $scope.CanTransReasons = {};

    //####################################      Finder Cancellation & Transfer Reasons Code       ########################################

    $scope.finderCanTransReason = {
        title: "Search by Cancellation & Transfer Reasons",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-CANCELLATIONREASON",
            mapId: "BILLING-CANCELLATIONREASON-MAP",
            modalId: "finderCanTransReason",
            dataLoad: false,
            onLoad: false
        }, 
        params: [],

        callback: function (data) {
            $scope.CanTransReasons.Id = data.selectedItem.Id;
            $scope.GetCanTransReasonsByReasonCode($scope.CanTransReasons.Id);
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.CanTransReasons.Id = null;
        $scope.CanTransReasons.Description = null;
        $scope.CanTransReasons.InActive = false;
    };

    $scope.GetCanTransReasonsByReasonCode = function (Id) {
        CancellationTransferReasonsService.GetCanTransReasonsByReasonCode(Id).then(function (response) {
            if (response.data.Code == "0") {

                $scope.CanTransReasons.Id = response.data.Result.Id;
                $scope.CanTransReasons.Description = response.data.Result.Description;
                $scope.CanTransReasons.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostCanTransReasons = function () {
        if ($scope.CanTransReasons.Id == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Reason Code is Mandatory", showCloseButton: true });
            return;
        }
        if ($scope.CanTransReasons.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Description is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.CanTransReasons.Id,
            Description: $scope.CanTransReasons.Description,
            InActive: $scope.CanTransReasons.InActive
        };

        CancellationTransferReasonsService.PostCanTransReasons($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("DialogBilling").controller('ChequeReturnController', [
    "$scope", '$interval', "Page", "$cookies", "ChequeReturnService", "$routeParams", "$filter", "toaster", "AuthService", function ($scope, $interval, Page, $cookieStore, ChequeReturnService, $routeParams, $filter, toaster, AuthService) {
        //Set Page Title
        Page.setTitle("Cheque Return");

        $scope.ChequeReturn = {};
        var selectedCount = 0;

        //-> Grid Start
        var commonGridConfig = {
            input: true,
            numeric: false,
            pageSize: 10,
            pageSizes: [15, 50, 75, 100]
        };

        $scope.DateTime = new Date();
        $scope.ChequeReturn.DateTime = $filter('date')($scope.DateTime, 'dd MMM yyyy HH:mm:ss');

        $scope.UpdateDateTime = function () {

            $scope.currentDate = new Date();
            $scope.ChequeReturn.DateTime = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm a');
        }
        //-> Grid Configurations

        //////////====================== Check return Grid ===================


        var configChequeReturn = {
            columns: [
                { field: "ReceiptNo", title: "Receipt No", width: "100px" },
                { field: "ReceiptDate", title: "Receipt Date", width: "90px" },
                {
                    field: "Amount",
                    title: "Amount",
                    template: "{{dataItem.Amount|currency:''}}",

                    // template: '<input type ="text"  kendo-numeric-text-box class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                    width: "100px"
                },
                { field: "SBU", title: "BU", width: "80px" },
                {
                    field: "ConnectionReference",
                    title: 'Connection Reference',
                    // template: '<input type ="text"    class="k-fill "/>',
                    width: "90px"
                },
                {
                    field: "RecStatus",
                    title: 'Receipt Status',
                    // template: '<input type ="text"    class="k-fill "/>',
                    width: "90px"
                }
            ],

            pageable: commonGridConfig,
            navigatable: true,
            editable: "inline",
            scrollable: true

        };

        configChequeReturn.dataSource = new kendo.data.DataSource({
            data: [],
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        'ReceiptNo': { editable: false, type: "number" },
                        'ReceiptDate': { editable: false, type: "date" },
                        'Amount': { editable: false, type: "number" },
                        'SBU': { editable: false, type: "string" },
                        'ConnectionReference': { editable: true, type: "number" },
                        'RecStatus': { editable: true, type: "string" },
                        'SbuCode': { editable: true, type: "string" }
                    }
                }
            },
            pageSize: 10

        });





        $scope.abcdgGridChequeReturn = new DataGrid();
        $scope.abcdgGridChequeReturn.options(configChequeReturn);

        $scope.InitA = function (arg) {
            $scope.abcdgGridChequeReturn.Init(arg);
        };





        var configBulkChqBatchId = {};
        var configBulkChqBatchId = {
            columns: [
                         {
                             field: "IsSelected",
                             headerTemplate: '',
                             template: '<input type="checkbox"  ng-click="selectThis1($event)" ng-model="dataItem.IsSelected"/>',
                             width: "22px"
                         },

                         { field: "BatchId", title: "Batch ID", width: "50px" },
                         { field: "ChAmount", title: "Cheque Amount", width: "40px" },
                         { field: "ChDate", title: "Cheque Date", width: "40px" },

            ],

            pageable: commonGridConfig,
            navigatable: true,
            editable: "inline",
            scrollable: true,
            dataBound: function () {
                var dGrid = $scope.dgconfigBulkChqBatchId.data();
                angular.forEach(dGrid, function (row) {
                    //if (row.IsSelectedRowDisabled == true) {
                    //    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                    //} else if (row.Description == "Cancelled") {
                    //    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //red
                    //    if ($scope.IsUploads) {
                    //        row.IsSelected = false;
                    //    } else {
                    //        row.IsSelected = true;
                    //    }
                    //}

                    //if (!$scope.IsUploads) {
                    //    row.IsSelectedRowDisabled = true;
                    //}
                });
            }
        };

        configBulkChqBatchId.dataSource = new kendo.data.DataSource({
            data: [],
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        'IsSelected': { editable: false, type: "boolean" },
                        'BatchId': { editable: false, type: "string" },
                        'ChAmount': { editable: false, type: "number" },
                        'ChDate': { editable: false, type: "date" },
                       
                    }
                }
            },
            pageSize: 10

        });


        $scope.selectThis1 = function (e) {
            var dataItems1 = $scope.dgconfigBulkChqBatchId.data();
            selectedCount = 0;
            var isSelected = true;
            for (var i = 0; i < dataItems1.length; i++) {
                var sss = dataItems1[i].IsSelected;              
                if (!dataItems1[i].IsSelected) {
                    isSelected = false;
                } else {
                    selectedCount = selectedCount + 1;
                }
            }
            $scope.IsSelectedAll = isSelected;

        };


        $scope.dgconfigBulkChqBatchId = new DataGrid();
        $scope.dgconfigBulkChqBatchId.options(configBulkChqBatchId);

        $scope.InitB = function (arg) {
            $scope.dgconfigBulkChqBatchId.Init(arg);
        };

        //####################################      Finder Transaction ID Search    ##########################################


        var modalId = {};
        // Search By BatchNo


        //  #########################################################


        $scope.PageLoad = function () {

            ChequeReturnService.GetMasterDetails().then(function (response) {

                if (response.data.Code == "0") {
                    $scope.ReturnReasonsCollection = response.data.Result.ChequeReturnReasons;
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }


            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });


        }

        $scope.PageLoad();

        $scope.GetChequeDetailsByNo = function () {
            selectedCount = 0;
            if ($scope.ChequeReturn.ChNo === "" || $scope.ChequeReturn.ChNo === undefined) {
                toaster.error({ type: 'error', title: 'Error', body: "Cheque number should not be empty", showCloseButton: true });
                return;
            }

            if ($scope.ChequeReturn.ChBank === "" || $scope.ChequeReturn.ChBank === undefined) {
                toaster.error({ type: 'error', title: 'Error', body: "Bank Code should not be empty", showCloseButton: true });
                return;
            }

            if ($scope.ChequeReturn.ChBrancho === "" || $scope.ChequeReturn.ChBranch === undefined) {
                toaster.error({ type: 'error', title: 'Error', body: "Branch Code should not be empty", showCloseButton: true });
                return;
            }

            ChequeReturnService.ValidateChequeDetails($scope.ChequeReturn.ChNo, $scope.ChequeReturn.ChBank, $scope.ChequeReturn.ChBranch).then(function (response) {
                $scope.chkStatus = response.data.Result;

                if (response.data.Code == "0") {
                    if ($scope.chkStatus == true) {
                        $scope.ClearDetails();
                        toaster.error({ type: 'error', title: 'Error', body: "Receipts already cancelled for the entered cheque number", showCloseButton: true });
                        return;
                    } else {
                        ChequeReturnService.GetChequeDetails($scope.ChequeReturn.ChNo, $scope.ChequeReturn.ChBank, $scope.ChequeReturn.ChBranch).then(function (response) {

                            if (response.data.Code == "0") {
                                if (response.data.Result.ChequeDetails == null || response.data.Result.ChequeDetails.length==0 ) {
                                    $scope.ClearDetails();
                                    toaster.error({ type: 'error', title: 'Error', body: "Cheque details not found! Please verify the entered cheque number", showCloseButton: true });
                                    return;
                                }

                                if (response.data.Result.IsSameChqDetails == 1) {
                                    $('#GoodIssueBulkSerial').modal('show');
                                    var obj = [];

                                    angular.forEach(response.data.Result.ChqBatchId, function (row) {
                                        obj.push({ 'BatchId': row.BatchId, 'ChAmount': row.Amount, 'ChDate': $filter('date')(row.ChDate, 'dd MMM yyyy') });
                                    });
                                    $scope.dgconfigBulkChqBatchId.data(obj);
                                    $scope.ChqRawDetails = response.data.Result;
                                } else {
                                    $scope.ChquDetails = response.data.Result.ChequeDetails[0];
                                    $scope.ChequeReturn.ChBankName = $scope.ChquDetails.ChBankName;
                                    $scope.ChequeReturn.ChAmount = $scope.ChquDetails.ChAmount;
                                    $scope.ChequeReturn.ChBranchName = $scope.ChquDetails.ChBranchName;
                                    $scope.ChequeReturn.ChDate = $filter('date')($scope.ChquDetails.ChDate, 'dd MMM yyyy');
                                    $scope.ChequeReturn.RecUser = $scope.ChquDetails.RecUser;
                                  
                                    var obj = [];

                                    angular.forEach(response.data.Result.ChequeReceiptDetails, function (row) {
                                        obj.push({ 'ReceiptNo': row.ReceiptNo, 'Amount': row.Amount, 'ReceiptDate': $filter('date')(row.ReceiptDate, 'dd MMM yyyy HH:mm:ss a'), 'SBU': row.SBU, 'ConnectionReference': row.ConnectionReference, 'RecStatus': row.RecStatus, 'SbuCode': row.SbuCode });
                                    });
                                    $scope.abcdgGridChequeReturn.data(obj);
                                    $scope.CheckRowColor();
                                }

                                //$scope.ChequeReturn.NowDate = $filter('date')($scope.ChquDetails.NowDate, 'dd MMM yyyy HH:mm:ss a');

                                //$scope.abcdgGridChequeReturn.data(response.data.Result.ChequeReceiptDetails);

                               

                            } else {
                                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                            }


                        }, function (response) {
                            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        });
                    }
                }

            });


        }

        $scope.GetChequeDetailsByFinder = function () {


            ChequeReturnService.GetChequeDetails($scope.ChequeReturn.ChNo, $scope.ChequeReturn.ChBank, $scope.ChequeReturn.ChBranch).then(function (response) {

                if (response.data.Code == "0") {
                    if (response.data.Result.ChequeDetails == null) {
                        $scope.ClearDetails();
                        toaster.error({ type: 'error', title: 'Error', body: "Cheque details not found! Please verify the entered cheque number", showCloseButton: true });
                        return;
                    }


                    $scope.ChquDetails = response.data.Result.ChequeDetails;
                    $scope.ChequeReturn.ChBankName = $scope.ChquDetails.ChBankName;
                    $scope.ChequeReturn.ChAmount = $scope.ChquDetails.ChAmount;
                    $scope.ChequeReturn.ChBranchName = $scope.ChquDetails.ChBranchName;
                    $scope.ChequeReturn.ChDate = $filter('date')($scope.ChquDetails.ChDate, 'dd MMM yyyy');
                    $scope.ChequeReturn.RecUser = $scope.ChquDetails.RecUser;
                    $scope.ChequeReturn.DateTime = $filter('date')(response.data.Result.DateTime, 'dd MMM yyyy HH:mm:ss');


                    var obj = [];

                    angular.forEach(response.data.Result.ChequeReceiptDetails, function (row) {
                        obj.push({ 'ReceiptNo': row.ReceiptNo, 'Amount': row.Amount, 'ReceiptDate': $filter('date')(row.ReceiptDate, 'dd MMM yyyy HH:mm:ss a'), 'SBU': row.SBU, 'ConnectionReference': row.ConnectionReference, 'RecStatus': row.RecStatus, 'SbuCode': row.SbuCode });
                    });
                    $scope.abcdgGridChequeReturn.data(obj);
                    $scope.CheckRowColor();

                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }


            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });

        };




        $scope.CheckRowColor = function () {
            if (!$scope.IsLoadingAtFirstTime) {
                var dGrid = $scope.abcdgGridChequeReturn.data();

                angular.forEach(dGrid, function (row) {
                    if ((row.RecStatus == "Cancelled")) {
                        $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                    } else {
                        if ((row.RecStatus == "Cancel – Pending Approval")) {
                            $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //red
                        }
                    }

                });
            }
        }

        //$scope.CheckRowColor = function () {
        //    if (!$scope.IsLoadingAtFirstTime) {
        //        var dGrid = $scope.abcdgGridChequeReturn.data();

        //        angular.forEach(dGrid, function (row) {
        //            if ((row.RecStatus == "Pending for approval")) {
        //                $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightBlue"); //red


        //            }
        //        });
        //    }
        //}


        var retHeaderObj = function () {
            this.ChNo1 = $scope.ChequeReturn.ChNo;
            this.ChNo2 = $scope.ChequeReturn.ChBank;
            this.ChNo3 = $scope.ChequeReturn.ChBranch;
            this.ChDate = $scope.ChequeReturn.ChDate;
            this.ChBank = $scope.ChequeReturn.ChBank;
            this.ChBranch = $scope.ChequeReturn.ChBranch;
            this.ReasonCode = $scope.ChequeReturn.ReasonCode;
            this.RecUser = $scope.ChequeReturn.RecUser;
            this.AddedUser = '';
            this.SourceIp = '';
            this.BatchRec = [];
        }

        var retLineObj = function () {
            this.ReceiptNo = '';
            this.SbuCode = '';
            this.ReceiptDate = '';
            this.Amount = '';
            this.ConnectionRef = '';
            this.RecStatus = '';

        }

        $scope.ValidateReturnStatus = function () {
            ChequeReturnService.ValidateChequeDetails($scope.ChequeReturn.ChNo, $scope.ChequeReturn.ChBank, $scope.ChequeReturn.ChBranch).then(function (response) {
                $scope.chkStatus = response.data.Result;
                if (response.data.Code == "0") {
                    if ($scope.chkStatus == true) {
                        $scope.ClearDetails();
                        toaster.error({ type: 'error', title: 'Error', body: "Receipts already cancelled for the entered cheque number", showCloseButton: true });
                        return true;
                    } else {
                        return false;
                    }
                }

            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        }

        $scope.PostChqDetails = function () {
            ChequeReturnService.ValidateChequeDetails($scope.ChequeReturn.ChNo, $scope.ChequeReturn.ChBank, $scope.ChequeReturn.ChBranch).then(function (response) {

                if (response.data.Code == "0") {

                    $scope.GetChequeDetailsByNo();

                    $scope.chkStatus = response.data.Result;

                    if ($scope.chkStatus == true) {
                        toaster.error({ type: 'error', title: 'Error', body: "Receipts already cancelled for the entered cheque number", showCloseButton: true });
                        return;
                    } else {

                        var hDObj = new retHeaderObj();

                        hDObj.ChNo1 = $scope.ChequeReturn.ChNo;
                        hDObj.ChNo2 = $scope.ChequeReturn.ChBank;
                        hDObj.ChNo3 = $scope.ChequeReturn.ChBranch;
                        hDObj.ChDate = $scope.ChequeReturn.ChDate;
                        hDObj.ChBank = $scope.ChequeReturn.ChBank;
                        hDObj.ChBranch = $scope.ChequeReturn.ChBranch;
                        hDObj.ReasonCode = $scope.ChequeReturn.ReasonCode;

                        hDObj.RecUser = $scope.ChequeReturn.RecUser;
                        hDObj.AddedUser = '';
                        hDObj.SourceIp = '';


                        angular.forEach($scope.abcdgGridChequeReturn.data(), function (row) {
                            var line = new retLineObj();
                            if (row.RecStatus == "Valid") {

                                line.Amount = row.Amount;
                                line.ConnectionRef = row.ConnectionReference;
                                line.ReceiptDate = row.ReceiptDate;
                                line.ReceiptNo = row.ReceiptNo;
                                line.SbuCode = row.SbuCode;
                                line.RecStatus = row.RecStatus;

                                hDObj.BatchRec.push(line);
                            } else {

                                toaster.error({ type: 'error', title: 'Error', body: "Cannot return the cheque because, there are cancellation pending receipts. Please reject/accept the cancellation first and then return the cheque", showCloseButton: true });
                                return;
                            }

                        });

                        if (hDObj.BatchRec.length == 0) {
                            //toaster.error({ type: 'error', title: 'Error', body: "Valid receipt details not found to preform this action", showCloseButton: true });
                            return;
                        }

                        ChequeReturnService.PostChequeReturn(hDObj).success(function (response) {
                            if (response.Code != MessageTypes.Success) {
                                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                                return;
                            } else {
                                $scope.ChequeReturn.TransNo = response.Result;
                                toaster.success({ type: 'Success', title: 'Success', body: response.Message, showCloseButton: true });
                            }

                        }).error(function (response) {
                            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
                        });

                    }





                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }


            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });


        }



        $scope.selectChqBatches = function () {
            debugger;

            if (selectedCount == 0) {
                toaster.error({ type: 'error', title: 'Error', body: 'Please select one record.', showCloseButton: true });
                return;
            }
            else if (selectedCount > 1) {
                toaster.error({ type: 'error', title: 'Error', body: 'Please select one record only.', showCloseButton: true });
                return;
            } else {
                var allBatchIds = $scope.dgconfigBulkChqBatchId.data();
                var allChqDetails = $scope.ChqRawDetails.ChequeDetails;
                var allChqReceiptDetails = $scope.ChqRawDetails.ChequeReceiptDetails;
                var valiedReceipts = [];

                $scope.totalNoOfRecords = allBatchIds.length;
                for (var i = 0; i < allBatchIds.length; i++) {
                    if (allBatchIds[i].IsSelected == true) {
                        for (var j = 0; j < allChqDetails.length; j++) {
                            if (allBatchIds[i].BatchId == allChqDetails[j].BatchId) {
                                $scope.ChquDetails = allChqDetails[j];
                                $scope.ChequeReturn.ChAmount = $scope.ChquDetails.ChAmount;
                                $scope.ChequeReturn.ChBranchName = $scope.ChquDetails.ChBranchName;
                                $scope.ChequeReturn.ChDate = $filter('date')($scope.ChquDetails.ChDate, 'dd MMM yyyy');
                                $scope.ChequeReturn.RecUser = $scope.ChquDetails.RecUser;


                                var obj = [];

                                angular.forEach(allChqReceiptDetails, function (row) {
                                    if (allBatchIds[i].BatchId == row.BatchId) {
                                        obj.push({ 'ReceiptNo': row.ReceiptNo, 'Amount': row.Amount, 'ReceiptDate': $filter('date')(row.ReceiptDate, 'dd MMM yyyy HH:mm:ss a'), 'SBU': row.SBU, 'ConnectionReference': row.ConnectionReference, 'RecStatus': row.RecStatus, 'SbuCode': row.SbuCode });
                                    }
                                });

                            }
                        }
                        $scope.abcdgGridChequeReturn.data(obj);
                        $scope.CheckRowColor();
                    }


                }

                if (selectedCount > 1) {
                    toaster.error({ type: 'error', title: 'Error', body: 'Please select one record only.', showCloseButton: true });
                    return;
                }
                $scope.Receipt.NoofRecords = valiedReceipts.length;

                if ($scope.Receipt.NoofRecords == 0) {
                    toaster.error({ type: 'error', title: 'Error', body: 'No recodes selected', showCloseButton: true });
                    return;
                }
            }




        };


        $scope.TransactionIDSearch =
        {

            title: "Search Cheque Return Details",
            info: {
                appId: "ZBC-DCPOS-BILLING",
                uiId: "BILLING-CHQ-RETURN",
                mapId: "BILLING-POSTED-CHQ-RETURNS",
                modalId: "TransactionIDSearch",
                onLoad: true

            },
            params: [],
            callback: function (data) {


                $scope.ChequeReturn.TransNo = data.selectedItem.TransId;
                $scope.ChequeReturn.ChNo = data.selectedItem.ChNo1;
                $scope.ChequeReturn.ChBank = data.selectedItem.ChNo2;
                $scope.ChequeReturn.ChBranch = data.selectedItem.ChNo3;
                $scope.ChequeReturn.ReasonCode = data.selectedItem.ReasonCode;
                $scope.GetChequeDetailsByFinder();

            },
            open: function () {
                this.info.onLoad = true;

                //$scope.alertMessage = new Message(MessageTypes.Empty, '');
                $("#" + this.info.modalId).modal('show');

            }
        };

        $scope.ClearDetails = function () {

            $scope.ChequeReturn.TransNo = '';
            $scope.ChequeReturn.ChNo = '';
            $scope.ChequeReturn.ChBank = '';
            $scope.ChequeReturn.ChBranch = '';
            $scope.ChequeReturn.ChDate = '';
            $scope.ChequeReturn.ChBank = '';
            $scope.ChequeReturn.ChBranch = '';
            $scope.ChequeReturn.ReasonCode = '';
            $scope.ChequeReturn.RecUser = '';

            $scope.ChequeReturn.ChBankName = '';
            $scope.ChequeReturn.ChAmount = '';
            $scope.ChequeReturn.ChBranchName = '';
            $scope.ChequeReturn.ChDate = '';

            $scope.abcdgGridChequeReturn.data([]);
            $scope.PageLoad();
            $scope.UpdateDateTime();
        }

        //###################################     

        $scope.crcontainer = document.getElementsByClassName("crcontainer")[0];
        $scope.crcontainer.onkeyup = function (e) {
            var target = e.srcElement;
            var maxLength = parseInt(target.attributes["maxlength"].value, 10);
            var myLength = target.value.length;
            if (myLength >= maxLength) {
                var next = target;
                while (next = next.nextElementSibling) {
                    if (next == null)
                        break;
                    if (next.tagName.toLowerCase() == "input") {
                        next.focus();
                        break;
                    }
                }
            }
        }

    }]);
angular.module("DialogBilling").controller('ChequeReturnReasonsController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "ChequeReturnReasonsService", function ($scope, Page, $routeParams, $filter, toaster, ChequeReturnReasonsService) {
    //Set Page Title
    Page.setTitle("Cheque Return Reasons");
    $scope.ChqReturnReason = {};

    //####################################      Finder Cheque Return Reasons Code       ########################################

    $scope.finderChqReturnReason = {
        title: "Search by Cheque Return Reasons",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-CHEQUERETURNREASON",
            mapId: "BILLING-CHEQUERETURNREASON-MAP",
            modalId: "finderChqReturnReason",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            
            //$scope.ChqReturnReason.Code = data.selectedItem.Code;
            //$scope.GetChequeReturnReasonsByCode($scope.ChqReturnReason.Code);
            $scope.ChqReturnReason.Code = data.selectedItem.Code;
            $scope.ChqReturnReason.Description = data.selectedItem.Description;
            $scope.ChqReturnReason.InActive = data.selectedItem.Inactive;
            $scope.ReasonCode = true;
            $scope.$apply();
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.ChqReturnReason.Code = null;
        $scope.ChqReturnReason.Description = null;
        $scope.ChqReturnReason.InActive = false;
        $scope.ReasonCode = false;
    };

    //$scope.GetChequeReturnReasonsByCode = function (Code) {
    //    ChequeReturnReasonsService.GetChequeReturnReasonsByCode(Code).then(function (response) {
    //        if (response.data.Code == "0") {

    //            $scope.ChqReturnReason.Code = response.data.Result.Code;
    //            $scope.ChqReturnReason.Description = response.data.Result.Description;
    //            $scope.ChqReturnReason.InActive = response.data.Result.InActive;

    //        } else {
    //            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
    //        }
    //    }, function (response) {
    //        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
    //    });
    //};
    
    $scope.PostChequeReturnReasons = function () {
        if ($scope.ChqReturnReason.Code == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Reason Code is Mandatory", showCloseButton: true });
            return;
        }
        if ($scope.ChqReturnReason.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Description is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Code: $scope.ChqReturnReason.Code,
            Description: $scope.ChqReturnReason.Description,
            InActive: $scope.ChqReturnReason.InActive
        };

        ChequeReturnReasonsService.PostChequeReturnReasons($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("BulkPayment").controller('ForcefulRealizationOfChequeController', ["$scope", "Page", "ForcefulRealizationOfChequeService", "$routeParams", "$filter", "toaster", function ($scope, Page, ForcefulRealizationOfChequeService, $routeParams, $filter, toaster) {
    //Set Page Title
    Page.setTitle("Forceful Realization Of Cheque");
    $scope.ForcefulRealizationOfCheque = {};

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    $scope.currentDate = new Date();
    $scope.ForcefulRealizationOfCheque.CurrentDate = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm:ss');

    $scope.UpdateDateTime = function () {
        $scope.currentDate = new Date();
        $scope.ForcefulRealizationOfCheque.CurrentDate = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm:ss');
    }

    //-> Grid Configurations

    //////////====================== Forceful Realization Of Cheque Grid ===================

    //var configForcefulRealizationOfCheque = {};
    var configForcefulRealizationOfCheque = {
        columns: [
                     //{
                     //    field: "IsSelected", 
                     //    headerTemplate: '<input type="checkbox" title="Select all" ng-checked="true" />',
                     //    template: '<input type="checkbox" ng-model="dataItem.IsSelected" ng-click="selectThis($event)" />',
                     //    width: "32px"
                     //},
                     { field: "ReceiptNo", title: "Receipt No", width: "100px" },
                     { field: "ReceiptDate", title: "Receipt Date", width: "90px" },
                     {
                         field: "Amount", title: "Amount",
                         template: "{{dataItem.Amount|currency:''}}",

                         // template: '<input type ="text"  kendo-numeric-text-box class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                         width: "100px"
                     },
                     { field: "SBU", title: "BU", width: "80px" },
                     {
                         field: "ConnectionReference",
                         title: 'Connection Reference',
                         // template: '<input type ="text"    class="k-fill "/>',
                         width: "90px"
                     }

        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configForcefulRealizationOfCheque.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    //'IsSelected': { editable: false, type: "boolean" },                   
                    'ReceiptNo': { editable: false, type: "number" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'Amount': { editable: false, type: "number" },
                    'SBU': { editable: false, type: "string" },
                    'ConnectionReference': { editable: true, type: "number" }                                                      
                }
            }
        },
        pageSize: 10

    });

    $scope.dgGrid = new DataGrid();

    $scope.dgGrid.options(configForcefulRealizationOfCheque);

    $scope.InitA = function (arg) {
        $scope.dgGrid.Init(arg);
    };


    //####################################      Finder Transaction ID Search    ##########################################



    $scope.finderTransactionID = {
        title: "Transaction ID Finder",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "POS-UPDATE-CHEQUEFR-Transaction-Id",
            mapId: "POS-UPDATE-CHEQUEFR-Transaction-Id-map",
            modalId: "finderTransactionID", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            onLoad: false
        },
        params: [],
        callback: function (response) {
            console.log("transactionID", response);
            console.log("finder", response);
            $scope.ForcefulRealizationOfCheque = {

                TransactionID: response.selectedItem.TransactionId,
                Finder_ReciptNo: response.selectedItem.ReceiptNo,
                Finder_ChequeNo: response.selectedItem.ChequeNo

            };
            $scope.findrtransation();

        },
        open: function () {
            console.log("wgqjdv");
            this.info.onLoad = true;

            $scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');
            //  this.info.onLoad = false;
        }
    };


    //  #########################################################


    //####################################    Get Receipt Details By ChequeNo   ##########################################

    $scope.GetReceiptDetailsByChequeNo = function () {

        if ($scope.ForcefulRealizationOfCheque.checkNo == undefined || $scope.ForcefulRealizationOfCheque.checkNo == "") {
            //$scope.alertMessage = [];
            // $scope.alertMessage = new Message(3, "Please enter cheque No");
            toaster.error({ type: 'Error', title: 'Error', body: "Please enter cheque No", showCloseButton: true });
        }

        ForcefulRealizationOfChequeService.GetReceiptDetailsByChequeNo($scope.ForcefulRealizationOfCheque.checkNo, $scope.ForcefulRealizationOfCheque.Bankcode, $scope.ForcefulRealizationOfCheque.BranchCode).success(function (response) {

            if (response.Code == MessageTypes.Success) {
                //$scope.alertMessage = "";
                $scope.dgGrid.data(response.Result.checkDetailGrid);
                $scope.ForcefulRealizationOfCheque.amount = response.Result.ChequeFullAmount;
                $scope.ForcefulRealizationOfCheque.ChequeDateTxt = $filter('date')(response.Result.ChequeDate, 'dd MMM yyyy HH:mm:ss'); //response.Result.ChequeDate;

            } else {
                //$scope.alertMessage = new Message(response.Code, response.Message);
                toaster.error({ type: 'Error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            }
        }, function (response) {
            //$scope.alertMessage = new Message(response.Code, response.Message);
            toaster.success({ type: 'Success', title: 'Success', body: response.Message, showCloseButton: true });
        });

    };

    //  #########################################################

    //Bank Maste
    //find Branch no
    $scope.CheckBankCode = function () {
        if (!$scope.ForcefulRealizationOfCheque.Bankcode) {
            toaster.Warning({ type: 'Error', title: 'Error', body: "Please enter Bank Code", showCloseButton: true });
            return;
        }
        if ($scope.ForcefulRealizationOfCheque.TransactionID) {
            return;
        }
        if ($scope.ForcefulRealizationOfCheque.Bankcode != "") {
            ForcefulRealizationOfChequeService.GetBankName($scope.ForcefulRealizationOfCheque.Bankcode).success(function (response) {
                if (response.Code == 0) {
                    //$scope.alertMessage = [];
                    $scope.ForcefulRealizationOfCheque.bank = response.Result.BankName;
                }
                else {
                   // $scope.alertMessage = [];
                  
                    toaster.error({ type: 'Error', title: 'Error', body: "Bank No '" + $scope.ForcefulRealizationOfCheque.Bankcode + "'  is not valid  ", showCloseButton: true });
                }
            });
        }
    };

    //  #########################################################


    //  #########################################################

    $scope.getBranchNameAndValidateCheckNo = function () {
        if (!$scope.ForcefulRealizationOfCheque.BranchCode) {
            toaster.Warning({ type: 'Error', title: 'Error', body: "Please enter Branch Code", showCloseButton: true });
            return;
        }

        if ($scope.ForcefulRealizationOfCheque.checkNo == undefined || $scope.ForcefulRealizationOfCheque.checkNo == "") {
            //$scope.alertMessage = [];
            toaster.Warning({ type: 'Error', title: 'Error', body: "Please enter cheque No", showCloseButton: true });
            return;
        }

        if ($scope.ForcefulRealizationOfCheque.TransactionID) {
            return;
        }
        if ($scope.ForcefulRealizationOfCheque.BranchCode != "") {
            ForcefulRealizationOfChequeService.getBranchNameAndValidateCheckNo($scope.ForcefulRealizationOfCheque.checkNo, $scope.ForcefulRealizationOfCheque.Bankcode, $scope.ForcefulRealizationOfCheque.BranchCode).success(function (response) {
                if (response.Code == 0) {
                    $scope.ForcefulRealizationOfCheque.Branch = response.Result.branchName;
                }
                else {
                    
                    toaster.error({ type: 'Error', title: 'Error', body: "Branch Code '" + $scope.ForcefulRealizationOfCheque.BranchCode + "'  is not valid  ", showCloseButton: true });
                }
            });
        }
    };

    //  #############################################################


    $scope.updateValToTextBox = function () {
        if ($scope.ForcefulRealizationOfCheque.TransactionID) {
            return;
        }
        $scope.ForcefulRealizationOfCheque.BankcodeView = $scope.ForcefulRealizationOfCheque.Bankcode;
        $scope.ForcefulRealizationOfCheque.ChequeDateTxt = $scope.ForcefulRealizationOfCheque.ChequeDate;
        console.log($scope.ForcefulRealizationOfCheque.ChequeDateTxt, "date");

    };


    $scope.changePageState = function (state) {
        if (state == "SEARCH") {



        }
        else if (state == "NEW") {
            console.log("new")
            $scope.ForcefulRealizationOfCheque.TransactionID = "";
            $scope.ForcefulRealizationOfCheque.checkNo = "";

            $scope.ForcefulRealizationOfCheque.Bankcode = "";
            $scope.ForcefulRealizationOfCheque.BranchCode = "";
            $scope.ForcefulRealizationOfCheque.amount = "";
            $scope.ForcefulRealizationOfCheque.ChequeDateTxt = "";
            $scope.ForcefulRealizationOfCheque.bank = "";
            $scope.ForcefulRealizationOfCheque.Branch = "";
            $scope.dgGrid.data([]);
            $scope.alertMessage = "";

        }
    };


    // #################### Post Forcefull cheque data ############################

    //Update Cheque forcefull data  
    //save 
    $scope.FromForcefulRealizationOfChequeSubmit = function () {
        //if (form && form.$valid) { } else {
        //    $scope.showErrors(form);
        //    $scope.alertMessage = "";
        //}


        console.log($scope.ForcefulRealizationOfCheque, "Forcefull cheque ");
        var gridDetail = $scope.dgGrid.data();

        if ((!$scope.ForcefulRealizationOfCheque.checkNo) || ($scope.ForcefulRealizationOfCheque.checkNo == "")) {
            
            toaster.error({ type: 'Error', title: 'Error', body: "Please enter cheque No", showCloseButton: true });
            return;
        }
        else if ((!$scope.ForcefulRealizationOfCheque.Bankcode) || ($scope.ForcefulRealizationOfCheque.Bankcode == "")) {
           
            toaster.error({ type: 'Error', title: 'Error', body: "Please enter bank code", showCloseButton: true });
            return;

        }

        else if ((!$scope.ForcefulRealizationOfCheque.BranchCode) || ($scope.ForcefulRealizationOfCheque.BranchCode == "")) {
            
            toaster.error({ type: 'Error', title: 'Error', body: "Please enter branch code", showCloseButton: true });
            return;

        }
        
        else if ((gridDetail.length == 0)) {

            toaster.error({ type: 'Error', title: 'Error', body: "Please load receipt data to the table", showCloseButton: true });
            return;
            
        }


        var userId = $scope.userInfo().userId;
        var outstandDetail = $scope.dgGrid.data();
        $scope.UpdateDateTime();
        $scope.formdata = {
            TransactionId: $scope.ForcefulRealizationOfCheque.TransactionID,
            ChequeNo: $scope.ForcefulRealizationOfCheque.checkNo,
            ChDate: $scope.ForcefulRealizationOfCheque.ChequeDateTxt,
            BanksId: $scope.ForcefulRealizationOfCheque.Bankcode,
            BranchId: $scope.ForcefulRealizationOfCheque.BranchCode,
            AddedDate: $scope.ForcefulRealizationOfCheque.CurrentDate,
            AddedUser: $scope.userInfo().userId,
            //IsSelected: $scope.ForcefulRealizationOfCheque.IsSelected,

            GridDataForPost: outstandDetail
        };


        ForcefulRealizationOfChequeService.PostForcefulRealizationOfCheque($scope.formdata).success(function (response) {
           
                $scope.alertMessage = [];
                $scope.ForcefulRealizationOfCheque.TransactionID = response.Result;
                toaster.success({ type: 'Success', title: 'Success', body: "Cheque is  forcefully realized Successfully", showCloseButton: true });
            

            
        }).error(function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true }); return;
        });
        
    };


    //  #############################################################


    $scope.findrtransation = function () {

        if (!$scope.ForcefulRealizationOfCheque.TransactionID) {
            return;
        }
        if ($scope.ForcefulRealizationOfCheque.TransactionID != "") {

            ForcefulRealizationOfChequeService.GetFindbytransationId($scope.ForcefulRealizationOfCheque.TransactionID, $scope.ForcefulRealizationOfCheque.Finder_ReciptNo).success(function (response) {

                if (response.Code == 0) {
                    $scope.alertMessage = "";

                    console.log("Test", response.Result);

                    //var grid = $("[kendo-grid]").data("kendoGrid");
                    //grid.dataSource.data(response.Result.Bank);



                    $scope.dgGrid.data(response.Result.checkDetailGrid);

                    $scope.ForcefulRealizationOfCheque.TransactionID = response.Result.TransactionId;
                    $scope.ForcefulRealizationOfCheque.checkNo = response.Result.ChequeNo;
                    $scope.ForcefulRealizationOfCheque.Bankcode = response.Result.BankCode;
                    $scope.ForcefulRealizationOfCheque.BranchCode = response.Result.BranchCode;
                    $scope.ForcefulRealizationOfCheque.amount = response.Result.Amount;
                    $scope.ForcefulRealizationOfCheque.CurrentDate = response.Result.addedDate;
                    $scope.ForcefulRealizationOfCheque.bank = response.Result.bank;
                    $scope.ForcefulRealizationOfCheque.Branch = response.Result.Branch;
                    $scope.ForcefulRealizationOfCheque.ChequeDateTxt = $filter('date')(response.Result.ChDate, 'dd MMM yyyy HH:mm');
                    $scope.ForcefulRealizationOfCheque.BankcodeView = response.Result.BankCode;

                    console.log($scope.ForcefulRealizationOfCheque.Bankcode, "bank", response.Result.BankCode);

                }
                else {
                    $scope.alertMessage = [];
                    $scope.alertMessage = new Message(response.Code, response.Message);
                }
            });
        }
    };   

    //###################################  

    $scope.frcontainer = document.getElementsByClassName("frcontainer")[0];
    $scope.frcontainer.onkeyup = function (e) {
        var target = e.srcElement;
        var maxLength = parseInt(target.attributes["maxlength"].value, 10);
        var myLength = target.value.length;
        if (myLength >= maxLength) {
            var next = target;
            while (next = next.nextElementSibling) {
                if (next == null)
                    break;
                if (next.tagName.toLowerCase() == "input") {
                    next.focus();
                    break;
                }
            }
        }
    }

}]);
var KeyValuePair = function () { 
    this.Key = null;
    this.Value = null;
}; 

String.prototype.padLeft = function (padStr, len) {
    var str = this; while (str.length < len) { str = padStr + str; } return str;
};
var PaymentModesTypes = {
    Cash: 'CA',
    CreditCard: 'CC',
    Cheque: 'CHE',
    StarPoints: 'SP',
    eZCash: 'EZC',
    SMSVoucher: 'SMS',
    GiftVoucher: 'GV',
    BTR: 'BTR',
    IBUY: 'BUY',
    Miscellaneous: 'MIS',
    Voucher: 'VOU',
    PreVoucher: "PRE",
    RS: "RE",
    RSO: "RSO",
    MS2: "MS2",
    DDB: "DDB",
    Genie: "GN"
};

var IdTypes = {
    NIC: 1,
    PP: 2,
    TIN: 3
};

var CardTypes = {
    VISA: 2,
    MASTER: 3,
    AMEX: 4,
    NEXUS: 5
};

var ProductTypes = {
    Other: 0,
    Wifi: 1,
    NFC: 2,
    CDMA: 3,
    LTE: 4,
    VOLTE: 5,
    Fixed:6,

};

var  SwitchStatus  = {
    Connected: 1,
    Disconnected: 2,
    Suspended: 3,
    NotConnected: 4
};

var PaymentMethod = {
    Paymentreceived: 10,
};

var PaymentType = {
    Franchises:2,
    DAPOutlets: 1,
};
angular.module("DialogBilling").controller('PaymentCancellationController', ["$scope", "Page", "$routeParams", "$filter", "PaymentCancellationService", "toaster", "fileUploadService", "AuthService", function ($scope, Page, $routeParams, $filter, PaymentCancellationService, toaster, fileUploadService, AuthService) {
    //Set Page Title
    Page.setTitle("Payment Cancellation");

    //========================
    $scope.PaymentCancellation = [];
    $scope.payCancel = {};
    $scope.AjesmentReceipts = [];
    var CancelReceiptsdata = JSON.parse(localStorage.getItem('CancelReceipts'));
    $scope.payCancel.CancellationRadio = 3
    $scope.payCancel.Canceltotal = 0;
    $scope.payCancel.CorrectEntrytotal = 0;
    $scope.disableGrid = false;
    $scope.IsAttach = "No";
    $scope.IsBackOfficeUser = false;
    $scope.TempAttachmentRef = '';
    $scope.disabled = {};
    var PinRequestDetails = null;
    $scope.payCancel.WorkFlowId = "";
    debugger;
    $scope.PinMessage = new Message(0, "test");

    var permissionCodes = AuthService.getProfile().permission;
    var de = permissionCodes.indexOf("41001");
    if (permissionCodes.indexOf("41001") == -1) {
        $scope.IsBackOfficeUser = true;
    } else {
        $scope.IsBackOfficeUser = false;
    }

    $scope.GenGuid = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    $scope.GenerateGuid = function () {
        this.length = 16;
        this.timestamp = +new Date;

        var ts = this.timestamp.toString();
        var parts = ts.split("").reverse();
        var id = "";

        for (var i = 0; i < this.length; ++i) {
            var index = $scope.GenGuid(0, parts.length - 1);
            id += parts[index];
        }
        $scope.TempAttachmentRef = id;
        $scope.referenceParams = {
            moduleId: "BACK-OFFICE-CANCEL-RECEIPTS1",
            TransactionId: $scope.TempAttachmentRef,
            isAttachedDoc: true,
            aa: "aaaa"
        };
    }


    $scope.IsAttach = "NO";

    //// ------------------ Attachments -----------------------------------
    
 



    ////REFERENCE POPUP
    //$scope.referenceParams = {
    //    moduleId: "SRF-GENERATE-RECEIPT-005",
    //    TransactionId: $scope.TempAttachmentRef,
    //    isAttachedDoc: false
    //};

    
    ////Globle variable to Idetify the cliked attachement....

   
    //$scope.TransRef = [];
    //$scope.referenceCallback = function (data) {
    //    console.log(data,'call back');
    //    $scope.TransRef = data.TransactionReference;
       

    //};

    ////-------------------- End Attachment ----------------------------

    $scope.GetAttachType = function (arg) {
        attcahmentType = arg;
    };

    //============================
    // Mistake Done By dropdown
    $scope.OptionsMistakeDoneBy = [
      { text: "Customer", value: "1" },
      { text: "Cashier", value: "2" },
      { text: "Other", value: "3" }
    ];

    // Cancellation Type dropdown
    $scope.OptionsCancellationType = [    
    { text: "Cancel With Correct Entry", value: "1" },
    { text: "Cancel Only", value: "2" }
    ];
     
    //############################

    var BillingSystemSample = [];

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations

    //////////====================== Cancelling Receipt Details   ===================

    var configCancelReceiptDetails = {};
    var configCancelReceiptDetails = {
        columns: [
                     {
                         field: "IsSelected",
                         headerTemplate: '<input type="checkbox" ng-disabled="disableGrid" title="Select all" ng-model="selectAll" ng-click="toggleSelectCancel($event)" />',
                         template: '<input type="checkbox" ng-disabled="disableGrid" ng-model="dataItem.IsSelected" ng-click="selectThis($event)" />',
                         width: "32px",
                        
                        
                     },
                    { field: "ReceiptNumber", title: "Receipt Number", width: "150px" },
                    { field: "ReceiptStatus", title: "Receipt Status", width: "80px" },
                    { field: "PrePost", title: "Pre/Post", width: "80px" },
                    { field: "SBU", title: "BU", width: "80px" },
                    { field: "ReceiptDate", title: "Receipt Date", width: "100px" },
                    
                    { field: "ReferenceNo", title: "Reference No", width: "100px" },
                    {
                        field: "ConnectionReference",
                        title: 'Connection Reference',
                        width: "110px"
                    }, {
                        field: "ContractNo",
                        title: 'Contract No',
                        width: "110px"
                    },
                    {
                        field: "Amount", title: "Amount", width: "100px", template: "{{dataItem.Amount|currency:''}}"
                    },
                    { field: "PaymentMode", title: "Payment Mode", width: "100px" },
                    { field: "PaymentMethod", title: "Payment Method", width: "100px" },
                    { field: "PaymentSource", title: "Payment Source", width: "100px" },

                    { field: "ReceiptGeneratedUser", title: "Receipt Generated User", width: "130px" },
                    { field: "ProdCat", title: "Product Category", width: "100px" },
                    { field: "PaymentSeq", title: "Product Category", width: "100px" },
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configCancelReceiptDetails.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'IsSelected': { editable: false, type: "boolean" },
                    'ReceiptStatus': { editable: false, type: "string" },
                    'PrePost': { editable: false, type: "string" },
                    'SBU': { editable: false, type: "string" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptNumber': { editable: false, type: "number" },
                    'ReferenceNo': { editable: false, type: "number" },
                    'ConnectionReference': { editable: true, type: "number" },
                    'ContractNo': { editable: true, type: "number" },
                    'Amount': { editable: false, type: "number" },

                    'PaymentMode': { editable: false, type: "string" },
                    'PaymentMethod': { editable: false, type: "string" },
                    'PaymentSource': { editable: false, type: "string" },

                    'ReceiptGeneratedUser': { editable: false, type: "string" },
                    'IsValied': { editable: false, type: "boolean" },
                    'TransferredType': { editable: false, type: "number" },
                    'Cancel': { editable: false, type: "number" },
                    'ProdCat': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 10

    });

    $scope.dgGridCancelReceiptDetails = new DataGrid();
    $scope.dgGridCancelReceiptDetails.options(configCancelReceiptDetails);

    $scope.InitA = function (arg) {
        $scope.dgGridCancelReceiptDetails.Init(arg);
    };

    ///////////====================== Correct Entry Details   ===================

    var configCorrectEntryDetails = {};
    var configCorrectEntryDetails = {
        columns: [
                     {
                         field: "IsSelected",
                         headerTemplate: '<input type="checkbox" ng-disabled="disableGrid" title="Select all" ng-model="selectAllCREntry" ng-click="toggleSelectCREntry($event)" />',
                         template: '<input type="checkbox" ng-disabled="disableGrid" ng-model="dataItem.IsSelected" ng-click="selectThisCREntry($event)" />',
                         width: "32px",
                     },
                    { field: "ReceiptNumber", title: "Receipt Number", width: "150px" },
                    { field: "SBU", title: "BU", width: "80px" },
                    { field: "PrePost", title: "Pre/Post", width: "80px" },
                    { field: "ReceiptDate", title: "Receipt Date", width: "100px" },
                    { field: "ReceiptGeneratedUser", title: "Receipt Generated User", width: "130px" },
                    { field: "PaymentSource", title: "Payment Source", width: "100px" },
                   
                    {
                        field: "ConnectionReference",
                        title: 'Connection Reference',
                        // template: '<input type ="text"    class="k-fill "/>',
                        width: "110px"
                    },
                    {
                        field: "Amount", title: "Amount",
                        width: "100px"
                        , template: "{{dataItem.Amount|currency:''}}"

                    }

        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configCorrectEntryDetails.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'IsSelected': { editable: false, type: "boolean" },
                    'SBU': { editable: false, type: "string" },
                    'PrePost': { editable: false, type: "string" },                   
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptGeneratedUser': { editable: false, type: "string" },
                    'PaymentSource': { editable: false, type: "string" },
                    'ReceiptNumber': { editable: false, type: "number" },
                    'ConnectionReference': { editable: true, type: "number" },
                    'Amount': { editable: false, type: "number" },
                    'TransferredType': { editable: false, type: "number" },
                }
            }
        },
        pageSize: 10

    });

    $scope.dgGridCorrectEntryDetails = new DataGrid();
    $scope.dgGridCorrectEntryDetails.options(configCorrectEntryDetails);

    $scope.InitB = function (arg) {
        $scope.dgGridCorrectEntryDetails.Init(arg);
    };

////=======================================
  
    //####################################   Finder Payment Cancellation #################

    $scope.PaymentCancellationID = {};
    $scope.CancelTypeDisabled = true;
  

    var permissionCodes = AuthService.getProfile().permission;

    var de = permissionCodes.indexOf("41001");
    if (permissionCodes.indexOf("41001") == -1) {
        $scope.CancelTypeDisabled = false;
        $scope.IsBackOfficeUser = true;
    } else {
        $scope.CancelTypeDisabled = true;
        $scope.IsBackOfficeUser = false;
    }


    // Cancel Batch Finder
    $scope.CancelBatchFinder =
   {

       title: "Cancel batch finder",
       info: {
           appId: "ZBC-DCPOS-BILLING",
           uiId: "POS-BILLING-RECEIPTBATCH-CANCEL",
           mapId: "POS-BILLING-BATCH-CANCEL",
           modalId: "CancelBatchFinder",
           dataLoad: false,
           onLoad: false

       },
       params: [],
       callback: function (data) {
           console.log(data.selectedItem, 'data.selectedItem');
           $scope.payCancel.BathId = data.selectedItem.BatchId;
           $scope.GetByBatchId();
       },
       open: function () {
           this.info.onLoad = true;
           $scope.GenerateGuid();
           //$scope.alertMessage = new Message(MessageTypes.Empty, '');
           $("#" + this.info.modalId).modal('show');

       }
   };


    // Receipt batch finder
    $scope.ReceiptBatchFinder =
    {

        title: "Receipt batch finder",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "POS-BILLING-RECEIPTBATCH",
            mapId: "POS-BILLING-BATCH",
            modalId: "ReceiptBatchFinder",
            dataLoad: true,
            onLoad: false

        },
        params: [],
        callback: function (data) {

            $scope.payCancel.CancellationBatch = data.selectedItem.BatchId;
            $scope.GetReceiptsByBatch();
        },
        open: function () {
            this.info.onLoad = true;

            //$scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };



    // Search By ReceiptUser

    $scope.PostPaidReceipts =
    {

        title: "Search Post Paid Receipts",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "POS-BILLING-BILLCANCELLATION",
            mapId: "POS-BILLING-POSPAID",
            modalId: "PostPaidReceipts",
            onLoad: true

        },
        params: [],
        callback: function (data) {

            $scope.GetPostPaidReceipts(data.selectedItem.ReceiptNo);
        },
        open: function () {
            this.info.onLoad = true;

            //$scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };



    $scope.ReceiptFinder = {

        title: "Receipt No finder",
        info: {
            appId: "ZBC-DCPOS",
            uiId: "POS-EAI-Billing",
            mapId: "EAI-Billing",
            modalId: "ReceiptFinder",
            onLoad: false
        },
        params: [],
        callback: function (data) {
            $scope.GetPrePaidReceipts(data.selectedItem.BillReceiptNo);
        },
        open: function () {
            this.info.onLoad = true;
            searchMode = true;

            var objTemp = new Array();

            objTemp.push("1");
            this.params = objTemp;

            $scope.alertMessage = new Message(MessageTypes.Empty, '');
            $("#" + this.info.modalId).modal('show');

        }
    };

    //  #########################
    // ------------------ Attachments ------------------------------------

    $scope.receipt = [];
    // $scope.receipt.ReceiptId123 = "";
    $scope.IsAttach = "NO";

    //$scope.GenerateGuid();
    //REFERENCE POPUP
    $scope.referenceParams = {
        moduleId: "BACK-OFFICE-CANCEL-RECEIPTS1",
        TransactionId: $scope.TempAttachmentRef,
        isAttachedDoc: true,
        IsDisabled: false
    };

    //$scope.$watch("TempAttachmentRef", function (newValue) {
    //    $scope.referenceParams.TransactionId = $scope.TempAttachmentRef;
    //});

    $scope.$watch("payCancel.BathId", function (newValue) {
        //$scope.referenceParams.TransactionId = $scope.payCancel.BathId;
        $scope.referenceParams = {
            moduleId: "BACK-OFFICE-CANCEL-RECEIPTS1",
            TransactionId: $scope.payCancel.BathId,
            isAttachedDoc: true,
            IsDisabled: true
        };
    });


    //End REFERENCE POPUP
    $scope.TransRef = [];
    $scope.referenceCallback = function (data) {
        console.log(data,'call back');
        $scope.TransRef = data.TransactionReference;
        $scope.IsAttach = "YES";

    };

    //-------------------- End Attachment ----------------------------

   
   
    $scope.PassedReceipts = [];

    $scope.selectThis = function (e) {
        var sum = 0;

        var dataItems = $scope.dgGridCancelReceiptDetails.data();

        for (var i = 0; i < dataItems.length; i++) {

            if (dataItems[i].IsSelected === true) {
                sum = sum + dataItems[i].Amount;
            }


        }

        $scope.payCancel.Canceltotal = Number(sum).toFixed(2);
      //  $scope.payCancel.Canceltotal = $scope.payCancel.Canceltotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    };


    $scope.toggleSelectCancel = function (e) {
        var dataItems = $scope.dgGridCancelReceiptDetails.data();

        for (var i = 0; i < dataItems.length; i++) {
            dataItems[i].IsSelected = e.target.checked;
        }
        $scope.selectThis();
    };

    $scope.toggleSelect = function (e) {
        var dataItems = $scope.dgGridCancelReceiptDetails.data();

        for (var i = 0; i < dataItems.length; i++) {
            dataItems[i].IsSelected = e.target.checked;
        }
        $scope.selectThis();
    };



    $scope.selectThisCREntry = function (e) {
        var sum = 0;

        var dataItems = $scope.dgGridCorrectEntryDetails.data();
        $scope.payCancel.ConrefTransfer = '';
        
        for (var i = 0; i < dataItems.length; i++) {

            if (dataItems[i].IsSelected === true) {
                if (sum == 0) {
                    $scope.payCancel.ConrefTransfer = dataItems[i].ConnectionReference;
                }
                sum = sum + dataItems[i].Amount;
                
                
            }


        }

        console.log($scope.payCancel.aa, '$scope.payCancel.TransferTo');

        $scope.payCancel.CorrectEntrytotal = Number(sum).toFixed(2);
        console.log($scope.payCancel.CorrectEntrytotal);
     //   $scope.payCancel.CorrectEntrytotal = $scope.payCancel.CorrectEntrytotals.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    };


    $scope.toggleSelectCREntry = function (e) {
        var dataItems = $scope.dgGridCorrectEntryDetails.data();

        for (var i = 0; i < dataItems.length; i++) {
            dataItems[i].IsSelected = e.target.checked;
        }
        $scope.selectThisCREntry();
    };


    $scope.LoadReceiptFromStorage = function () {

        $scope.payCancel.CancellationRadio = "0";
        $scope.RadioChange();
        $scope.PassedReceiptsA = [];
        if (CancelReceiptsdata == null) {
            CancelReceiptsdata = JSON.parse(localStorage.getItem('CancelReceipts'));
        }
        if (CancelReceiptsdata != null) {

            $scope.payCancel.time = CancelReceiptsdata.BatchDate;
            $scope.payCancel.Canceltotal = Number(CancelReceiptsdata.TotalAmt).toFixed(2);
            //$scope.payCancel.BathId = CancelReceiptsdata.BatchId;

            var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
            //$scope.PaymentModeCollection = defaultDataCookieObj.BillingPaymentMode;
            try {
                var Pmode = defaultDataCookieObj.BillingPaymentMode.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMode, { Id: CancelReceiptsdata.RecCollection[0].PaymentModeId })[0].Description : "";

            } catch (e) {

            }

            angular.forEach(CancelReceiptsdata.RecCollection, function (item) {

                $scope.PassedReceiptsA.push({
                    IsSelected: true,
                    ReceiptStatus: item.ReceiptStatus,
                    PrePost: item.PrePost,
                    SBU: item.SBU,
                    ReceiptDate: item.ReceiptDate,
                    ReceiptNumber: item.ReceiptNumber,
                    ReferenceNo: item.ReferenceNo,
                    ConnectionReference: item.ConnectionReference,
                    ContractNo:item.ContractNo,
                    Amount: item.Amount,
                    PaymentMode: Pmode,
                    PaymentMethod: item.PaymentMethod,
                    PaymentSource: item.PaymentSource,
                    ReceiptGeneratedUser: item.ReceiptGeneratedUser,
                    PaymentModeId: item.PaymentModeId,
                    PaymentMethodId: item.PaymentMethodId,
                    PaymentSourceId: item.PaymentSourceId,
                    SbuCode: item.SbuCode,
                    ProdCat: item.ProdCat,
                    PaymentSeq: item.PaymentSeq
                });

            });


            $scope.dgGridCancelReceiptDetails.data($scope.PassedReceiptsA);
            if ($scope.PassedReceiptsA < 1) {
                toaster.error({ type: 'error', title: 'Error', body: "Cancel Receipt Not found!" + CancelReceiptsdata, showCloseButton: true });
            }

            $scope.selectAll = true;
            $scope.selectThis();
            localStorage.setItem('CancelReceipts', null);
            var de = permissionCodes.indexOf("41001");
            if (permissionCodes.indexOf("41001") == -1) {
                $scope.CancelTypeDisabled = false;
                $scope.IsBackOfficeUser = true;
            } else {
                $scope.CancelTypeDisabled = true;
                $scope.IsBackOfficeUser = false;
            }
        } else {

           // toaster.error({ type: 'error', title: 'Error', body: "Cancel Receipt Not found while page transfer.", showCloseButton: true });
        }

    }

    $scope.PageLoad = function () {

        PaymentCancellationService.pageLoad().then(function (response) {

            console.log(response,'sdsd');

                if (response.data.Code == "0") {
                   
                    $scope.cancellattonCode = response.data.Result.reasonCodes;
                    $scope.CancellationDesc = response.data.Result.reasonDesc;

                    $scope.cancellattonCode.unshift({ Id: "0", Description: "Select" });
                    $scope.CancellationDesc.unshift({ Id: "0", Description: "Select" });
                    $scope.LoadReceiptFromStorage();
                    

                } else {
                    toaster.success({ type: 'Success', title: 'Success', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
                toaster.success({ type: 'Success', title: 'Success', body: response.data.Message, showCloseButton: true });
            });
  
    }

    $scope.PageLoad();


    $scope.$watch("payCancel.CancelDesc", function () {       
        $scope.ResonDescChange();
    });

    $scope.$watch("payCancel.cancelCode", function () {
        $scope.ResonCodeChange();
    });

    $scope.ResonCodeChange = function () {
        $scope.payCancel.CancelDesc = $scope.payCancel.cancelCode;
       
    }

    $scope.ResonDescChange = function () {
        $scope.payCancel.cancelCode = $scope.payCancel.CancelDesc;
  //      console.log($scope.payCancel.cancelCode, '$scope.payCancel.cancelCode', $scope.payCancel.CancelDesc);
    }


    $scope.GetPrePaidReceipts = function (val) {

        if (!val) {
            return;
        }

        PaymentCancellationService.GetPrePaidReceipts(val).then(function (response) {

            console.log(response, 'response');

            if (response.data.Code == "0") {

                $scope.dupFound = false;
                angular.forEach($scope.AjesmentReceipts, function (row) {
                    if (response.data.Result.ReceiptNumber == row.ReceiptNumber) {
                        toaster.error({ type: 'Error', title: 'Error', body: 'You can’t select same receipt number.', showCloseButton: true });
                        $scope.dupFound=true;
                    }
                });


                if ($scope.dupFound == false) {

                    $scope.AjesmentReceipts = $scope.dgGridCorrectEntryDetails.data();

                    $scope.AjesmentReceipts.push({
                        IsSelected: true,
                        ReceiptStatus: response.data.Result.ReceiptStatus,
                        PrePost: response.data.Result.PrePost,
                        SBU: response.data.Result.SBU,
                        ReceiptDate: response.data.Result.ReceiptDate,
                        ReceiptNumber: response.data.Result.ReceiptNumber,
                        ReferenceNo: response.data.Result.ReferenceNo,
                        ConnectionReference: response.data.Result.ConnectionReference,
                        Amount: response.data.Result.Amount,
                        PaymentMode: response.data.Result.PaymentMode,
                        PaymentMethod: response.data.Result.PaymentMethod,
                        PaymentSource: response.data.Result.PaymentSource,
                        ReceiptGeneratedUser: response.data.Result.ReceiptGeneratedUser,
                        SbuCode: response.data.Result.SbuCode,
                        TransferredType: 2
                    });


                    $scope.dgGridCorrectEntryDetails.data($scope.AjesmentReceipts);
                    //    $scope.selectAll = true;
                    $scope.selectThisCREntry();
                }
            } else {
                toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }




    $scope.GetPostPaidReceipts = function (val) {

        if (!val) {
            return;
        }

        PaymentCancellationService.GetPostPaidReceipts(val).then(function (response) {

            if (response.data.Code == "0") {

                $scope.dupFound = false;
                angular.forEach($scope.AjesmentReceipts, function (row) {
                    if (response.data.Result.ReceiptNumber == row.ReceiptNumber) {
                        toaster.error({ type: 'Error', title: 'Error', body: 'You can’t select same receipt number.', showCloseButton: true });
                        $scope.dupFound = true;
                    }
                });


                if ($scope.dupFound == false) {
                    $scope.AjesmentReceipts = $scope.dgGridCorrectEntryDetails.data();

                    $scope.AjesmentReceipts.push({
                        IsSelected: true,
                        ReceiptStatus: response.data.Result.ReceiptStatus,
                        PrePost: response.data.Result.PrePost,
                        SBU: response.data.Result.SBU,
                        ReceiptDate: response.data.Result.ReceiptDate,
                        ReceiptNumber: response.data.Result.ReceiptNumber,
                        ReferenceNo: response.data.Result.ReferenceNo,
                        ConnectionReference: response.data.Result.ConnectionReference,
                        Amount: response.data.Result.Amount,
                        PaymentMode: response.data.Result.PaymentMode,
                        PaymentMethod: response.data.Result.PaymentMethod,
                        PaymentSource: response.data.Result.PaymentSource,
                        ReceiptGeneratedUser: response.data.Result.ReceiptGeneratedUser,
                        SbuCode: response.data.Result.SbuCode,
                        TransferredType: 2
                    });
                }

                $scope.dgGridCorrectEntryDetails.data($scope.AjesmentReceipts);
                //    $scope.selectAll = true;
                $scope.selectThisCREntry();

            } else {
                toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }




    $scope.GetReceiptsByBatch = function () {

        if (!$scope.payCancel.CancellationBatch) {
            return;
        }

        PaymentCancellationService.GetReceiptsByBatch($scope.payCancel.CancellationBatch).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                console.log(response.data.Result.gridData,'response.data.Result.gridData');
                $scope.dgGridCancelReceiptDetails.data(response.data.Result.gridData);
                $scope.selectAll = true;
                $scope.selectThis();

            } else {

                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }

        }, function (response) {
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }
    $scope.$watch("payCancel.cancelType", function () {
        if ($scope.payCancel.cancelType == 1) {
            $scope.CorrectEntryGridShow = true;
        } else {
            $scope.CorrectEntryGridShow = false;
        }
        
    });


    $scope.RadioChange = function () {
        //$scope.clearForm();

        if ($scope.payCancel.CancellationRadio == 1) {
            $scope.payCancel.CancellationBatch = '';
        }
        
        var permissionCodes = AuthService.getProfile().permission;

        if (permissionCodes.indexOf("20001") == -1) {
            $scope.CancelTypeDisabled = false;
            $scope.CorrectEntryGridShow = false;
        }
        if ($scope.payCancel.CancellationRadio == 0) {
            $scope.CancelTypeDisabled = false;
            $scope.payCancel.cancelType = 1;
        } else {
            $scope.CancelTypeDisabled = false;
            $scope.payCancel.cancelType = 2;
            $scope.CorrectEntryGridShow = false;
        }
        $scope.payCancel.Canceltotal = '';
        $scope.selectAll = false;
        $scope.dgGridCancelReceiptDetails.data([]);
    }


    $scope.CheckRowColor = function () {
        var dGrid = $scope.dgGridCancelReceiptDetails.data();

        angular.forEach(dGrid, function (row) {
            if (row.IsValied) {


            } else {
                if (row.IsValied != true) {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                }
            }
        });

    }

    // Upload documents
    $scope.uploadDocuments = function () {

        
        if ($scope.myFile != undefined) {
            if (fileUploadService.validateFile($scope.myFile.name)) {
                fileUploadService.BillingReceiptUpload($scope.myFile).then(function (response) {
                    console.log(response, 'response');
                    $scope.dgGridCancelReceiptDetails.data(response.data.Result);

                    $scope.selectAll = true;
                    $scope.selectThis();
                    $scope.CheckRowColor();
                },
                    function (response) {
                        $scope.alertMessage = new Message(response.data.Code, response.data.Message);
                    });
            }
            else {
                toaster.error({ type: 'error', title: 'Error', body: "Invalide document type", showCloseButton: true });
            }



        } else {
            toaster.error({ type: 'error', title: 'Error', body: "Please select the upload file", showCloseButton: true });
        }

    };
    
 

    $scope.clearForm = function () {

        $scope.GenerateGuid();
        $scope.payCancel.WorkflowReference = "";
        $scope.payCancel.BathId = '';
        $scope.payCancel.cancelType = 1;
        $scope.payCancel.CancellationRadio = 3;
        $scope.payCancel.CancellationBatch = '';
        $scope.payCancel.cancelCode = 0;
        $scope.payCancel.CancelDesc = 0;
        $scope.payCancel.OptionsMistakeDoneBy = 1;
        $scope.payCancel.CancelRemark = '';
        $scope.payCancel.Canceltotal = 0;
        $scope.payCancel.time = '';
        $scope.payCancel.status = '';
        $scope.payCancel.CorrectEntrytotal = 0;
        $scope.payCancel.originalReceipt = false;
        $scope.payCancel.PayTransForm = false;
        $scope.payCancel.NicCopy = false;
        $scope.payCancel.ReqLetter = false;
        $scope.dgGridCancelReceiptDetails.data([]);
        $scope.dgGridCorrectEntryDetails.data([]);
        $scope.selectAll = false;
        $scope.selectAllCREntry = false;
        $scope.disableGrid = false;
        $scope.TransRef = [];
        $scope.IsAttach = 'NO';
        $scope.payCancel.ConrefTransfer = '';
        $scope.payCancel.CancellationRadio = '0';
        $scope.CorrectEntryGridShow = false;
        $scope.payCancel.Email = false;
            angular.element("input[type='file']").val(null);
    };

    $scope.loadReceipts = function () {
        $scope.dgGridCancelReceiptDetails.data($scope.PassedReceiptsA);
    }

    $scope.SubmitCancellation = function () {
    
        $scope.payCancel.IsDisabledSendPIN = false;
        $scope.payCancel.IsDisabledVerifyPIN = true;
        $scope.payCancel.IsDisabledResend = true;
        $scope.payCancel.PinNo = "";
        $scope.PinMessage = "";
        //if ($scope.payCancel.cancelCode == 0) {
        //    toaster.error({ type: 'Error', title: 'Error', body: 'Please select cancellation reason.', showCloseButton: true });
        //    return;
        //}
        if ($scope.payCancel.Canceltotal == 0) {
            toaster.error({ type: 'Error', title: 'Error', body: 'Please select receipts to cancel.', showCloseButton: true });
            return;
        }

        //if ($scope.payCancel.cancelType == 1  && ($scope.payCancel.Canceltotal != $scope.payCancel.CorrectEntrytotal)) {
        //    toaster.error({ type: 'Error', title: 'Error', body: 'Total amount of cancelling receipt and Total Amount of New Payments doesn’t tally !', showCloseButton: true });
        //    return;
        //}

        var valiedEntryCancelRec = [];

        //var cancellationRecPaySourse = "";
        //var newRecPaySourse = "";
        //var isPaymentSourseError = false;
        var isErrorRecordsExist = false;
        var isGenieRecordExist = false;

        var selectedRecToCancelCount = 0;
        
        var cancelReceiptDate = '';//$filter('date')($scope.currentDate, 'dd MMM yyyy');
        var newReceiptDate = '';//$filter('date')($scope.currentDate, 'dd MMM yyyy');
        var isReceiptDateError = false;

        angular.forEach($scope.dgGridCancelReceiptDetails.data(), function (item) {
            if (item.IsSelected == true) {
                item.PaymentSourceId = 0;
                if (item.ReceiptStatus == "Valid") {
                    valiedEntryCancelRec.push(item);
                } else {
                    isErrorRecordsExist = true;
                }
                selectedRecToCancelCount++;

                if (cancelReceiptDate == "") {
                    var dt = new Date(item.ReceiptDate);
                    cancelReceiptDate = $filter('date')(dt, 'dd MMM yyyy');
                } else {
                    var dt1 = new Date(item.ReceiptDate);
                    var oldReceiptDate = $filter('date')(dt1, 'dd MMM yyyy');

                    if (oldReceiptDate != cancelReceiptDate) { 
                        isReceiptDateError = true;
                    }
                } 
                if (item.PaymentMode == "Genie")  
                {
                    isGenieRecordExist = true;
                }

                if (typeof item.PaymentMethodId === 'number') {
                    
                } else {
                    item.PaymentMethodId = 0;
                }
                //if (cancellationRecPaySourse == "") {
                //    cancellationRecPaySourse = item.PaymentSource;
                //} else {
                //    if (item.PaymentSource != cancellationRecPaySourse) {
                //        isPaymentSourseError = true;
                //    }
                //}
            }
        });

        if (isGenieRecordExist)
        {
            toaster.error({ type: 'Error', title: 'Error', body: 'Cannot cancel Genie receipts.', showCloseButton: true });
            return;
        }

        angular.forEach($scope.dgGridCorrectEntryDetails.data(), function (item) {
            if (item.IsSelected == true) {
                if (newReceiptDate == "") {
                    var dt = new Date(item.ReceiptDate);
                    newReceiptDate = $filter('date')(dt, 'dd MMM yyyy');
                } else {
                    var dt1 = new Date(item.ReceiptDate);
                    var oldReceiptDate = $filter('date')(dt1, 'dd MMM yyyy');

                    if (oldReceiptDate != newReceiptDate) {
                        isReceiptDateError = true;
                    }
                }
                if (cancelReceiptDate != newReceiptDate) {
                    isReceiptDateError = true;
                }
            }
        });

        if ($scope.payCancel.cancelType == 1 && selectedRecToCancelCount > 1) {
            toaster.error({ type: 'Error', title: 'Error', body: 'Please select only one receipt to cancel!.', showCloseButton: true });
            return;
        }
  
        if ($scope.payCancel.cancelType == 1) {
            if (isReceiptDateError) {
                toaster.error({ type: 'Error', title: 'Error', body: 'Cancelling Receipt Date and New Receipt Date Should Be Same!.', showCloseButton: true });
                return;
            }
        }


        var selectedCorrRecCount = 0;
        angular.forEach($scope.dgGridCorrectEntryDetails.data(), function (item) {
            if (item.IsSelected == true) {
                selectedCorrRecCount++;
            }
        });


        if ($scope.payCancel.cancelType == 1) {
            if (selectedCorrRecCount==0) {
                toaster.error({ type: 'Error', title: 'Error', body: 'Correct entry details not found!.', showCloseButton: true });
                return;
            }
        }

        

        if (isErrorRecordsExist) {
            toaster.error({ type: 'Error', title: 'Error', body: 'Please uncheck invalied / already cancelled records!.', showCloseButton: true });
            return;
        }
        $scope.formData = {

            cancelType : $scope.payCancel.cancelType,
            cancelCode: $scope.payCancel.cancelCode,
            OptionsMistakeDoneBy: $scope.payCancel.OptionsMistakeDoneBy,
            CancelRemark: $scope.payCancel.CancelRemark,
            originalReceipt: $scope.payCancel.originalReceipt,
            PayTransForm: $scope.payCancel.PayTransForm,
            NicCopy: $scope.payCancel.NicCopy,
            ReqLettercancelType: $scope.payCancel.ReqLetter,
            Canceltotal: $scope.payCancel.Canceltotal,
            CorrectEntrytotal: $scope.payCancel.CorrectEntrytotal,
            ConrefTransfer: $scope.payCancel.ConrefTransfer,
            cancelReceipts: $scope.dgGridCancelReceiptDetails.data(),
            adjesmentreceipts: $scope.dgGridCorrectEntryDetails.data(),
            IsBackOfficeUser: $scope.IsBackOfficeUser == true ? false : true,
            AttachedList: $scope.TransRef,
            outletType: $scope.userInfo().outletType,
            Email: $scope.payCancel.Email,
            TempAttachmentRef : $scope.TempAttachmentRef
        };
       
        PaymentCancellationService.SubmitCancellation($scope.formData).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                console.log(response, 'response.data');

                if (response.data.Result.apiOutput.isSameDayAllow) {

                    PinRequestDetails = response.data.Result.apiOutput;
                    $scope.PinRequestUsers = response.data.Result.apiOutput.ApprovalUsers;
                    $scope.payCancel.PinRequestUsers = "";
                    $scope.payCancel.WorkFlowId = response.data.Result.apiOutput.WorkFlowRef;
                    $scope.PinMessage = "";
                    $('#PinVerificationDetails').modal('show');

                    var res = response.data.Result.Result;
                    $scope.payCancel.BathId = res.split('~')[0];
                    $scope.payCancel.WorkflowReference = res.split('~')[1];
                    $scope.payCancel.status = res.split('~')[1] == "" ? "" : "Pending";
                    $scope.dgGridCancelReceiptDetails.data(response.data.Result.Result.CanCelReceipts);
                    $scope.dgGridCorrectEntryDetails.data(response.data.Result.Result.CorrectEntry);
                    $scope.disableGrid = true;
                } else {
                    var res = response.data.Result.Result;
                    $scope.payCancel.BathId = res.split('~')[0];
                    $scope.payCancel.WorkflowReference = res.split('~')[1];
                    $scope.payCancel.status = res.split('~')[1] == "" ? "" : "Pending";
                    $scope.dgGridCancelReceiptDetails.data(response.data.Result.Result.CanCelReceipts);
                    $scope.dgGridCorrectEntryDetails.data(response.data.Result.Result.CorrectEntry);
                    $scope.disableGrid = true;
                    toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
                }
               
            } else {

                toaster.warning({ type: 'warning', title: 'warning', body: response.data.Message, showCloseButton: true });
            }

        }, function (response) {
            toaster.error({ type: 'error', title: 'error', body: response.data.Message, showCloseButton: true });
        });

    }


    $scope.SendPinRequest = function () {
        $scope.payCancel.IsDisabledSendPIN = true;
        $scope.formData = {
            PinUserId: $scope.payCancel.PinRequestUsers,
            OutletId: PinRequestDetails.OutletCode,
            WfId: PinRequestDetails.WorkFlowRef,
            PinType: "NEW",
            WfReqUserId: PinRequestDetails.UserId

        };

        PaymentCancellationService.SendWFPin($scope.formData).then(function (response) {
            if (response.data.Code == 0) {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });

                $scope.payCancel.IsDisabledVerifyPIN = false;
                $scope.payCancel.IsDisabledResend = false;
                return;
            } else {
                $scope.payCancel.IsDisabledSendPIN = false;
                toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
                return;
            }
        }, function (response) {
            $scope.payCancel.IsDisabledSendPIN = false;
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
            $scope.CancelReceiptReset($scope.payCancel);
            return;
        });
    };

    $scope.ReSendPinRequest = function () {
        $scope.payCancel.PinNo = "";
        $scope.formData = {
            PinUserId: $scope.payCancel.PinRequestUsers,
            OutletId: PinRequestDetails.OutletCode,
            WfId: PinRequestDetails.WorkFlowRef,
            PinType: "RESEND",
            WfReqUserId: PinRequestDetails.UserId

        };

        PaymentCancellationService.SendWFPin($scope.formData).then(function (response) {
            if (response.data.Code == 0) {
                toaster.success({ type: 'success', title: 'Success', body: "Pin Resend Sucuess", showCloseButton: true });
                return;
            } else {
                toaster.error({ type: 'error', title: 'error', body: response.data.Message, showCloseButton: true });
                return;
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'error', body: response.data.Message, showCloseButton: true });
            $scope.CancelReceiptReset($scope.payCancel);
            return;
        });
    };


    $scope.VerifyPinRequest = function () {
        $scope.payCancel.IsDisabledVerifyPIN = true;
        $scope.formData = {
            PinUserId: $scope.payCancel.PinRequestUsers,
            OutletId: PinRequestDetails.OutletCode,
            WfId: PinRequestDetails.WorkFlowRef,
            PIN: $scope.payCancel.PinNo,
            WfReqUserId: PinRequestDetails.UserId,
            ApprovalReference: ""

        };

        PaymentCancellationService.VerifyWFPin($scope.formData).then(function (response) {
            if (response.data.Code == 0) {
                $("#PinVerificationDetails").modal("hide");
                $scope.payCancel.status = "Cancelled";
                $scope.GetByBatchId();
                toaster.success({ type: 'success', title: 'Success', body: "PIN verification success. Receipt now will be cancelled", showCloseButton: true });
                return;
            } else {
                if (response.data.Result == "Rejected") {
                    $("#PinVerificationDetails").modal("hide");
                    toaster.warning({ type: 'warning', title: 'warning', body: response.data.Message, showCloseButton: true });
                    return;
                } else {
                    $scope.payCancel.IsDisabledVerifyPIN = false;
                    $scope.payCancel.PinNo = "";
                    toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    return;
                }

            }
        }, function (response) {
            $scope.payCancel.IsDisabledVerifyPIN = false;
            $scope.payCancel.PinNo = "";
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
            $scope.CancelReceiptReset($scope.payCancel);
            return;
        });
    };

    $scope.DiscardPinRequest = function () {
        $scope.formData = {
            AppRejComment: "",
            ApprovedStatus: "Rejected",
            CposReference: PinRequestDetails.WorkFlowRef,
            ApprovalReference: ""

        };

        PaymentCancellationService.DiscardPinRequest(PinRequestDetails.UserId, PinRequestDetails.OutletCode, $scope.formData).then(function (response) {
            if (response.data.Code == 0) {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
                $("#PinVerificationDetails").modal("hide");
                $scope.GetByBatchId();
                return;
            } else {
                $scope.payCancel.PinNo = "";
                toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
                return;
            }
        }, function (response) {
            $scope.payCancel.PinNo = "";
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
            $scope.CancelReceiptReset($scope.payCancel);
            return;
        });
    };



    $scope.GetByBatchId = function () {

        if (!$scope.payCancel.BathId) {
            return;
        }
       
        PaymentCancellationService.GetByBatchId($scope.payCancel.BathId).then(function (response) {
            if (response.data.Code == MessageTypes.Success) {
                console.log(response, 'response.data');
                $scope.payCancel = response.data.Result;
                $scope.dgGridCancelReceiptDetails.data(response.data.Result.CancelReceiptGridData);
                $scope.dgGridCorrectEntryDetails.data(response.data.Result.adjesmentGridData);
                $scope.disableGrid = true;
                $scope.selectAll = true;
                $scope.selectAllCREntry = true;
                $scope.IsAttach = response.data.Result.IsAttached;
                var dataItems = $scope.dgGridCorrectEntryDetails.data();
                if (dataItems.length > 0) {
                    $scope.payCancel.ConrefTransfer = dataItems[0].ConnectionReference;
                }
               
                setTimeout(stopTimer, 1000);
                var dataItems = $scope.dgGridCorrectEntryDetails.data();
                $scope.payCancel.ConrefTransfer = '';
                var sum = 0;
                for (var i = 0; i < dataItems.length; i++) {

                    if (dataItems[i].IsSelected === true) {
                        if (sum == 0) {
                            $scope.payCancel.ConrefTransfer = dataItems[i].ConnectionReference;
                        }
                        sum = sum + dataItems[i].Amount;


                    }


                }
                $scope.payCancel.CorrectEntrytotal = Number(sum).toFixed(2);
            } else {

                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }



        }, function (response) {
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }


    function stopTimer() {       
        $scope.selectThis();
        $scope.selectThisCREntry();
    }

    $scope.UpdateDateTime = function () {
        if ($scope.payCancel.BathId == undefined || $scope.payCancel.BathId == '') {
            $scope.currentDate = new Date();
            $scope.payCancel.time = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm:ss a'); 
        }
    }


}]);
angular.module("DialogBilling").controller('PaymentInquiryController', ["$scope", "Page", "$routeParams", "$filter", "BulkPaymentService", "PaymentInqueryService", "toaster", "AuthService", "PrintService", "appConfig", function ($scope, Page, $routeParams, $filter, BulkPaymentService, PaymentInqueryService, toaster, AuthService, PrintService, appConfig) {
    //Set Page Title
    Page.setTitle("Payment Inquiry");

    var Initializer = {};
    $scope.payInquery = {};
    $scope.Initializer = Initializer;
    $scope.ReceiptList = [];
    localStorage.setItem('CancelReceipts', null);
    var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
    

    $scope.InitDatePickers = InitDatePickers;

    function InitDatePickers(idFromDP, idToDP) {

        var fromDP = new DatePicker(),
            toDP = new DatePicker();

        fromDP.Init(idFromDP, true);
        fromDP.setOptions({
            change: function (e) {
                toDP.setOptions({
                    min: fromDP.value()
                });
            }
        });

        toDP.Init(idToDP, true);
        toDP.setOptions({
            change: function (e) {
                fromDP.setOptions({
                    max: toDP.value()
                });
            }
        });
    };

    //####################################   Finder Payment Inquiry  #################

    $scope.PaymentInquiryID = {};

    $scope.CancelbuttonDisabled = false;


    var permissionCodes = AuthService.getProfile().permission;

    if (permissionCodes.indexOf("41001") == -1) {
        $scope.IsBackOfficeUser = false;
    } else {
        $scope.IsBackOfficeUser = true;
    }

    if (permissionCodes.indexOf("20004") != -1) {
        $scope.CancelbuttonDisabled = false;
    }

    // Search By ReceiptUser

    //$scope.PaymentInquiryID =
    //{

    //    title: "Search by Receipt User",
    //    info: {
    //        // appId: "ZBC-DCPOS",
    //        // uiId: "POS-FLOAT-FLOATMSTER",
    //        //  mapId: "FLOAT-TRANSFER-FLOATMSTER",
    //        modalId: "PaymentInquiryID",
    //        onLoad: false

    //    },
    //    params: [],
    //    callback: function (data) {

    //    },
    //    open: function () {
    //        this.info.onLoad = true;

    //        //$scope.alertMessage = new Message(MessageTypes.Empty, '');
    //        $("#" + this.info.modalId).modal('show');

    //    }
    //};


    //  #########################

    var BillingSystemSample = [];

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations

    //////////====================== Search In Billing System   ===================

    var configBillingSystem = {};
    var configBillingSystem = {
        columns: [      
                    {
                        field: "IsSelected",
                       
                        headerTemplate: '<input type="checkbox" title="Select all" ng-model="selectAll" ng-click="toggleSelect($event)" />',
                        template: '<input type="checkbox" ng-disabled="dataItem.CancelbuttonDisabled" ng-model="dataItem.IsSelected" ng-click="selectThis($event)" />',
                        width: "32px",

                    },
                    // permission-code="50202" 
                      {
                          field: "Cancel",
                          headerTemplate: 'Cancel',
                          template: '<div>' +
                          '<button type="button" ng-disabled="dataItem.CancelbuttonDisabled" class="btn btn-xs btn-danger" ng-click="cancelReceipt(this)" title="Cancel"><i class="glyphicon glyphicon-remove"></i></button> ' +
                          '</div>',
                          locked: false,
                          width: "60px"
                      },
                      //permission-code="50203"
                    {
                        field: "Transfer",
                        headerTemplate: 'Transfer',
                        template: '<div>' +
                        '<button   type="button" ng-disabled="dataItem.IsTransfer" class="btn btn-xs btn-info" ng-click="paymentTransfer(this)" title="Transfer"><i class="glyphicon glyphicon-arrow-right"></i></button> ' +
                        '</div>',
                        locked: false,
                        width: "65px"
                    },
                    //  permission-code="50200"
                    {
                        field: "Print",
                        headerTemplate: 'Print',
                        template: '<div>' +
                        '<button  type="button" class="btn btn-xs btn-primary" ng-click="printReceipt(this)" title="Print"><i class="icon icon_printer"></i></button> ' +
                        '</div>',
                        locked: false,
                         width: "50px"
                    },
                    { field: "ReceiptNumber", title: "Receipt Number", width: "150px", locked: false },
                    { field: "ReceiptStatus", title: "Receipt Status", width: "80px" },
                    { field: "PrePost", title: "Pre/Post", width: "80px" },
                    { field: "SBU", title: "BU", width: "80px" },
                    { field: "ReceiptDate", title: "Receipt Date", width: "100px" },
                   
                    { field: "ReferenceNo", title: "Reference No", width: "100px" },
                    {
                        field: "ConnectionReference",
                        title: 'Contract No',
                       // template: '<input type ="text"    class="k-fill "/>',
                        width: "110px"
                    },
                    {
                        field: "Amount", title: "Amount",
                        
                       // template: '<input type ="text"  kendo-numeric-text-box class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                        width: "100px"
                    },
                    { field: "PaymentMode", title: "Payment Mode", width: "100px" },
                    { field: "PaymentMethod", title: "Payment Method", width: "100px" },
                    { field: "PaymentSource", title: "Payment Source", width: "100px" },
                   
                    { field: "ReceiptGeneratedUser", title: "Receipt Generated User", width: "130px" },
                    { field: "CancellationReason", title: "Cancellation Reason", width: "100px" },
                    { field: "CancelledDate", title: "Cancelled Date", width: "100px" },
                    { field: "CancelledUser", title: "Cancelled User", width: "100px" },
                    
                    { field: "TransferredTo", title: "Transferred To", width: "100px" },
                    { field: "ReversalType", title: "Reversal Type", width: "100px" },
                   

        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configBillingSystem.dataSource = new kendo.data.DataSource({
        data: [BillingSystemSample],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'IsSelected': { editable: false, type: "boolean" },
                    'ReceiptStatus': { editable: false, type: "string" },
                    'PrePost': { editable: false, type: "string" },
                    'SBU': { editable: false, type: "string" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptNumber': { editable: false, type: "number" },
                    'ReferenceNo': { editable: false, type: "number" },
                    'ConnectionReference': { editable: true, type: "number" },
                    'Amount': { editable: false, type: "number" },

                    'PaymentMode': { editable: false, type: "string" },
                    'PaymentMethod': { editable: false, type: "string" },
                    'PaymentSource': { editable: false, type: "string" },
                    
                    'ReceiptGeneratedUser': { editable: false, type: "string" },
                    'CancellationReason': { editable: false, type: "string" },
                    'CancelledDate': { editable: false, type: "date" },
                    'CancelledUser': { editable: false, type: "string" },

                    'TransferredTo': { editable: false, type: "string" },
                    'ReversalType': { editable: false, type: "string" },

                    'Cancel': { editable: false, type: "string" },
                    'Transfer': { editable: false, type: "string" },
                    'Print': { editable: false, type: "string" },
                    'ProdCat': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 10

    });

    $scope.printReceipt = function (obj) {
        if (appConfig.IsPostpaidCloud == "1") {
            var Cheque = "CHE";
            var CC = "CC";
            if( obj.dataItem.PaymentMode=="CHE"){
                Cheque = obj.dataItem.CcNo;
            }
            if( obj.dataItem.PaymentMode=="CC"){
                CC = obj.dataItem.ChequeNO;
            }
            var Cancel = 1;
            if (obj.dataItem.ReceiptStatus) {
                Cancel=0
            }
            $scope.formData = {

                ConnectionRef: obj.dataItem.ConnectionReference,
                CustmoerName: "",
                ReceiptNo: obj.dataItem.ReceiptNumber,
                ReceiptDate: obj.dataItem.ReceiptDate,
                Amount: obj.dataItem.Amount,
                PaymentMode: obj.dataItem.PaymentMode,
                UserId: $scope.userInfo().userId,
                Sbu: obj.dataItem.SbuCode,
                ChequeNO: obj.dataItem.ChequeNO,
                CC: obj.dataItem.CcNo,
                Cancel: obj.dataItem.ReceiptStatus
            };
            window.open(appConfig.POSTPAID_MODULE_URL + "/GetInquiryReceipt/" + obj.dataItem.ConnectionReference + "/" +
                obj.dataItem.ReceiptNumber + "/" + obj.dataItem.PaymentMode + "/" + $scope.userInfo().userId + "/" + obj.dataItem.SbuCode + "/" + Cheque + "/" + CC + "/" + Cancel
                + "/" + obj.dataItem.Amount + "/" + obj.dataItem.ReceiptDate);
        }
        else {
           

        PrintService.OpenPrint('POST',
              appConfig.REPORT_URL + 'ReportViewer.aspx',
              {
                  ConnectionRef: obj.dataItem.ConnectionReference,
                  CustmoerName: "",
                  ReceiptNo: obj.dataItem.ReceiptNumber,
                  ReceiptDate: obj.dataItem.ReceiptDate,
                  Amount: obj.dataItem.Amount,
                  PaymentMode: obj.dataItem.PaymentMode,
                  type: "PaymentInquiry",
                  PrintUserId: $scope.userInfo().userId,
                  SBU: obj.dataItem.SbuCode,
                  ChequeNO: obj.dataItem.ChequeNO,
                  CcNo: obj.dataItem.CcNo,
                  ReceiptStatus: obj.dataItem.ReceiptStatus
              }, '_blank');
        }
   };


    //////////====================== Search In PE Grid   ===================

    var configPESearch = {};
    var configPESearch = {
        columns: [
                   
                    { field: "ReceiptStatus", title: "Receipt Status", width: "80px" },
                    { field: "PrePost", title: "Pre/Post", width: "80px" },
                    { field: "SBU", title: "BU", width: "80px" },
                    { field: "ReceiptDate", title: "Receipt Date", width: "100px" },
                    { field: "ReceiptNumber", title: "Receipt Number", width: "100px", locked: true },
                    { field: "ReferenceNo", title: "Reference No", width: "100px" },
                    {
                        field: "ConnectionReference",
                        title: 'Contract No',
                        // template: '<input type ="text"    class="k-fill "/>',
                        width: "110px"
                    },
                    {
                        field: "Amount", title: "Amount",
                      
                        // template: '<input type ="text"  kendo-numeric-text-box class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                        width: "100px"
                    },
                    { field: "PaymentMode", title: "Payment Mode", width: "100px" },
                    { field: "PaymentMethod", title: "Payment Method", width: "100px" },
                    { field: "PaymentSource", title: "Payment Source", width: "100px" },

                    { field: "ReceiptGeneratedUser", title: "Receipt Generated User", width: "130px" },
                    { field: "CancellationReason", title: "Cancellation Reason", width: "100px" },
                    { field: "CancelledDate", title: "Cancelled Date", width: "100px" },
                    { field: "CancelledUser", title: "Cancelled User", width: "100px" },
                    { field: "ErrorCode", title: "Error Code", width: "100px" },
                    { field: "ErrorDescription", title: "Error Description", width: "100px" },
                    { field: "LastAttemptedDateAndTime", title: "Last Attempted Date & Time", width: "130px" }
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configPESearch.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {
                   
                    'ReceiptStatus': { editable: false, type: "string" },
                    'PrePost': { editable: false, type: "string" },
                    'SBU': { editable: false, type: "string" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptNumber': { editable: false, type: "number" },
                    'ReferenceNo': { editable: false, type: "number" },
                    'ConnectionReference': { editable: true, type: "number" },
                    'Amount': { editable: false, type: "number" },

                    'PaymentMode': { editable: false, type: "string" },
                    'PaymentMethod': { editable: false, type: "string" },
                    'PaymentSource': { editable: false, type: "string" },

                    'ReceiptGeneratedUser': { editable: false, type: "string" },
                    'CancellationReason': { editable: false, type: "string" },
                    'CancelledDate': { editable: false, type: "date" },
                    'CancelledUser': { editable: false, type: "string" },
                    'ErrorCode': { editable: false, type: "string" },
                    'ErrorDescription': { editable: false, type: "string" },
                    'LastAttemptedDateAndTime': { editable: false, type: "date" }

                }
            }
        },
        pageSize: 10

    });

    //////////====================== Search In CPOS Grid   ===================

    var configCPOSSearch = {};
    var configCPOSSearch = {
        columns: [

                    { field: "ReceiptStatus", title: "Receipt Status", width: "80px" },
                    { field: "PrePost", title: "Pre/Post", width: "80px" },
                    { field: "SBU", title: "BU", width: "80px" },
                    { field: "ReceiptDate", title: "Receipt Date", width: "100px" },
                    { field: "ReceiptNumber", title: "Receipt Number", width: "150px", locked: true },
                    { field: "ReferenceNo", title: "Reference No", width: "100px" },
                    {
                        field: "ConnectionReference",
                        title: 'Contract No',
                        // template: '<input type ="text"    class="k-fill "/>',
                        width: "110px"
                    },
                    {
                        field: "Amount", title: "Amount",
                   
                        // template: '<input type ="text"  kendo-numeric-text-box class="k-fill text-right"   format-number ng-pattern="/^[0-9]+(\.[0-9]{2})?$/"    />',
                        width: "100px"
                    },
                    { field: "PaymentMode", title: "Payment Mode", width: "100px" },
                    { field: "PaymentMethod", title: "Payment Method", width: "100px" },
                    { field: "PaymentSource", title: "Payment Source", width: "100px" },

                    { field: "ReceiptGeneratedUser", title: "Receipt Generated User", width: "130px" },
                    { field: "CancellationReason", title: "Cancellation Reason", width: "100px" },
                    { field: "CancelledDate", title: "Cancelled Date", width: "100px" },
                    { field: "CancelledUser", title: "Cancelled User", width: "100px" },
                    { field: "ErrorCode", title: "Error Code", width: "100px" },
                    { field: "ErrorDescription", title: "Error Description", width: "100px" },
                    { field: "LastAttemptedDateAndTime", title: "Last Attempted Date & Time", width: "130px" }
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true

    };

    configCPOSSearch.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {

                    'ReceiptStatus': { editable: false, type: "string" },
                    'PrePost': { editable: false, type: "string" },
                    'SBU': { editable: false, type: "string" },
                    'ReceiptDate': { editable: false, type: "date" },
                    'ReceiptNumber': { editable: false, type: "number" },
                    'ReferenceNo': { editable: false, type: "number" },
                    'ConnectionReference': { editable: true, type: "number" },
                    'Amount': { editable: false, type: "number" },

                    'PaymentMode': { editable: false, type: "string" },
                    'PaymentMethod': { editable: false, type: "string" },
                    'PaymentSource': { editable: false, type: "string" },

                    'ReceiptGeneratedUser': { editable: false, type: "string" },
                    'CancellationReason': { editable: false, type: "string" },
                    'CancelledDate': { editable: false, type: "date" },
                    'CancelledUser': { editable: false, type: "string" },
                    'ErrorCode': { editable: false, type: "string" },
                    'ErrorDescription': { editable: false, type: "string" },
                    'LastAttemptedDateAndTime': { editable: false, type: "date" }
                }
            }
        },
        pageSize: 10

    });



    /////////==================================================================
    $scope.dgGridBillingSystem = new DataGrid();
    $scope.dgGridBillingSystem.options(configBillingSystem);

    $scope.dgGridPESearch = new DataGrid();
    $scope.dgGridPESearch.options(configPESearch);

    $scope.dgGridCPOSSearch = new DataGrid();
    $scope.dgGridCPOSSearch.options(configCPOSSearch);


    $scope.Init1 = function (arg) {
        $scope.dgGridBillingSystem.Init(arg);
    };

    $scope.Init2 = function (arg) {
        $scope.dgGridPESearch.Init(arg);
    };

    $scope.Init3 = function (arg) {
        $scope.dgGridCPOSSearch.Init(arg);
    };

    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


   

    $scope.toggleSelect = function (e) {
        var dataItems = $scope.dgGridBillingSystem.data();

        for (var i = 0; i < dataItems.length; i++) {
            dataItems[i].IsSelected = e.target.checked;
        }
    };

    $scope.LoadPaymentSourseByPaymentType = function () {

        BulkPaymentService.GetPaymentSource($scope.payInquery.PaymentType).then(function (response) {

            if (response.data.Code == "0") {
                $scope.PaymentSourceCollection = response.data.Result;
              
            } else {
                
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }

    // page load 

    $scope.PageLoad = function () {
        //var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        ////if (defaultDataCookieObj == null) {
        PaymentInqueryService.GetDefaultData($scope.userInfo().outletType).then(function (response) {
               
                if (response.data.Code == "0") {
                   

                    $scope.PaymentTypeCollection = response.data.Result.BillingPaymentType;
                    $scope.SbuCollection = response.data.Result.BillingSbu;
                    $scope.PaymentSourceCollection = response.data.Result.BillingPaymentSource;
                    $scope.PaymentMethodCollection = response.data.Result.BillingPaymentMethods;
                    $scope.PaymentModeCollection = response.data.Result.BillingPaymentMode;
                    $scope.ProductCatCollection = response.data.Result.BillingProdCat;
                    $scope.BillingSusAcc = response.data.Result.BillingSusAcc;

                    localStorage.setItem("BulkPaymentDefaultData", JSON.stringify(response.data.Result));


                } else {
                    //$scope.alertMessage = new Message(response.data.Code, response.data.Message);
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
               toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });


        ////} else {
        ////    $scope.BillingSusAcc = defaultDataCookieObj.BillingSusAcc;
        ////    $scope.PaymentTypeCollection = defaultDataCookieObj.BillingPaymentType;
        ////    $scope.SbuCollection = defaultDataCookieObj.BillingSbu;
        ////    $scope.PaymentSourceCollection = defaultDataCookieObj.BillingPaymentSource;
        ////    $scope.PaymentMethodCollection = defaultDataCookieObj.BillingPaymentMethods;
        ////    $scope.PaymentModeCollection = defaultDataCookieObj.BillingPaymentMode;
        ////    $scope.ProductCatCollection = defaultDataCookieObj.BillingProdCat;
        ////}

        //$scope.BillingSusAcc.unshift({ Id: "0", Description: "All" });
        //$scope.PaymentTypeCollection.unshift({ Id: "0", Description: "All" });
        //$scope.SbuCollection.unshift({ Id: "0", Description: "All" });
        //$scope.PaymentSourceCollection.unshift({ Id: "0", Description: "All" });
        //$scope.PaymentMethodCollection.unshift({ Id: "0", Description: "All" });
        //$scope.PaymentModeCollection.unshift({ Id: "0", Description: "All" });
        //$scope.ProductCatCollection.unshift({ Id: "0", Description: "All" });
    }

   
    $scope.PageLoad();

// Created by Charith 2018-05-02
       //$scope.SearchInBillingSys = function () {

       // var receiptNo = $scope.payInquery.receiptNo;
       // var ProdCat = $scope.payInquery.ProdCat;
       // var PaymentSource = $scope.payInquery.PaymentSource;
       // var PaymentMethod = $scope.payInquery.PaymentMethod;
       // var fromDate = $scope.payInquery.fromDate;
	   // var ChequeNO = $scope.payInquery.chequeNo;


       // if (receiptNo != null) {
       //     {
       //         $scope.SearchInBillingSystems();
       //     }
       // } else {
       //     if (PaymentMethod != 0) {
       //         $scope.SearchInBillingSystems();
       //     } else {
       //         if (fromDate != null) {
       //             $scope.SearchInBillingSystems();
       //         } else {
       //             if(ChequeNO != null){
       //                  $scope.SearchInBillingSystems();
       //             }else{
       //                   toaster.error({ type: 'error', title: 'Error', body: 'Please select correct search combination', showCloseButton: true });
       //             }
       //         }
       //     }
       // }

       //}

       $scope.SearchInBillingSys = function () {

           var receiptNo = $scope.payInquery.receiptNo;
           var ProdCat = $scope.payInquery.ProdCat;
           var PaymentSource = $scope.payInquery.PaymentSource;
           var PaymentMethod = $scope.payInquery.PaymentMethod;
           var fromDate = $scope.payInquery.fromDate;
           var ChequeNO = $scope.payInquery.chequeNo;


           if (receiptNo != null) {
               {
                   $scope.SearchInBillingSystems();
               }
           } else {
               if (PaymentMethod != 0) {
                   $scope.SearchInBillingSystems();
               } else {
                   if (fromDate != null) {
                       $scope.SearchInBillingSystems();
                   } else {
                       if (ChequeNO != null) {
                           $scope.SearchInBillingSystems();
                       } else {
                           toaster.error({ type: 'error', title: 'Error', body: 'Please select correct search combination', showCloseButton: true });
                       }
                   }
               }
           }

       }


    $scope.SearchInBillingSystems = function () {

            PaymentInqueryService.SearchInBillingSys($scope.payInquery).then(function (response) {
                var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));

                console.log(response, MessageTypes.Success);

                if (response.data.Code == MessageTypes.Success) {

                    //angular.forEach(response.data.Result.gridData, function (item) {
                    //    item.PaymentMethodId = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods, { Description: item.PaymentMethod })[0].Id : "";
                    //    item.PaymentSourceId = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { Description: item.PaymentSource })[0].Id : "";
                    //});

                    $scope.dgGridBillingSystem.data(response.data.Result.gridData);

                    if (response.data.Result.gridData.length == 0) {
                        toaster.info({ type: 'info', title: 'info', body: response.data.Message, showCloseButton: true });
                    } else {
                        toaster.success({ type: 'Success', title: 'Success', body: response.data.Message, showCloseButton: true });
                    }

                    var dGrid = $scope.dgGridBillingSystem.data();

                    angular.forEach(dGrid, function (row) {
                        if ((row.ReceiptStatus == "Cancelled") || !$scope.IsBackOfficeUser) {
                            row.CancelbuttonDisabled = true;
                        } else {
                            row.CancelbuttonDisabled = false;
                        }

                        if (response.data.Result.IsSameDayTransfer < 1 || row.ReceiptStatus == "Cancelled") {
                            row.IsTransfer = true;
                        } else {
                            row.IsTransfer = false;
                        }

                    });

                } else {

                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });              
    };




    $scope.SearchInPE = function () {


        PaymentInqueryService.SearchInPE($scope.payInquery).then(function (response) {

            console.log(response, MessageTypes.Success);

            if (response.data.Code == MessageTypes.Success) {

                $scope.dgGridPESearch.data(response.data.Result.gridData);

                if (response.data.Result.gridData.length == 0) {
                    toaster.info({ type: 'info', title: 'info', body: response.data.Message, showCloseButton: true });
                } else {
                    toaster.success({ type: 'Success', title: 'Success', body: response.data.Message, showCloseButton: true });
                }

            } else {

                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };




    $scope.SearchInCpos = function () {


        PaymentInqueryService.SearchInCpos($scope.payInquery).then(function (response) {
           
            if (response.data.Code == MessageTypes.Success) {

                $scope.dgGridCPOSSearch.data(response.data.Result.gridData);

                if (response.data.Result.gridData.length==0) {
                    toaster.info({ type: 'info', title: 'info', body: response.data.Message, showCloseButton: true });
                } else {
                    toaster.success({ type: 'Success', title: 'Success', body: response.data.Message, showCloseButton: true });
                }
                

            } else {

                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };



    $scope.cancelReceipt = function (e) {
        if (permissionCodes.indexOf("50202") == -1) {
            toaster.error({ type: 'error', title: 'Error', body: 'You have not enough permission to continue.!', showCloseButton: true });
            return;
        } else {
            
        }
        var guId = e.dataItem.uid;
        var selectRow = $scope.dgGridBillingSystem.findByGuid(guId);
        var dataItems = $scope.dgGridBillingSystem.data();
        var row = dataItems[selectRow];

        
        $scope.ReceiptList.push({
            IsSelected: true,
            ReceiptStatus: row.ReceiptStatus,
            PrePost: row.PrePost,
            SBU: row.SBU,
            SbuCode: row.SbuCode,
            ReceiptDate: row.ReceiptDate,
            ReceiptNumber: row.ReceiptNumber,
            ReferenceNo: row.ReferenceNo,
            ConnectionReference: '',//row.ConnectionReference,
            ContractNo: row.ConnectionReference,
            Amount: row.Amount,
            PaymentMode: row.PaymentMode,
            PaymentMethod: row.PaymentMethod,
            PaymentSource: row.PaymentSource,
            ReceiptGeneratedUser: row.ReceiptGeneratedUser,
            PaymentModeId: row.PaymentModeId == "" ? row.PaymentMode : row.PaymentModeId,
            PaymentMethodId: row.PaymentMethodId,
            PaymentSourceId: row.PaymentSourceId,
            PaymentSeq: row.PaymentSeq,
            ProdCat: row.ProdCat
        });

        $scope.recObj = {
            'BatchId': '',//$scope.BulkPayment.BatchId,
            'BatchDate': '',//$scope.BulkPayment.DateTime,
            'TotalAmt': 0,//row.Amount,
            'RecCollection': $scope.ReceiptList
        };
        
        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentCancellation";
      
    };
    


    $scope.BulkCanCellation = function () {
        var count = 0;
        var dataItems = $scope.dgGridBillingSystem.data();

        angular.forEach(dataItems, function (item) {

            if (item.IsSelected) {
                
                count = count + 1;
                $scope.ReceiptList.push({
                    IsSelected: true,
                    ReceiptStatus: item.ReceiptStatus,
                    PrePost: item.PrePost,
                    SBU: item.SBU,
                    SbuCode: item.SbuCode,
                    ReceiptDate: item.ReceiptDate,
                    ReceiptNumber: item.ReceiptNumber,
                    ReferenceNo: item.ReferenceNo,
                    ConnectionReference: item.ConnectionReference,
                    ContractNo: item.ConnectionReference,
                    Amount: item.Amount,
                    PaymentMode: item.PaymentMode,
                    PaymentMethod: item.PaymentMethod,
                    PaymentSource: item.PaymentSource,
                    ReceiptGeneratedUser: item.ReceiptGeneratedUser,
                    PaymentModeId: item.PaymentMode,
                    PaymentMethodId: item.PaymentMethodId,
                    PaymentSourceId: item.PaymentSourceId,
                    PaymentSeq: item.PaymentSeq,
                    ProdCat: item.ProdCat
                });

            }
        });

        if (count == 0) {
            toaster.error({ type: 'error', title: 'Error', body: 'Please select receipts to proceed', showCloseButton: true });
            return;
        }

        $scope.recObj = {
            'BatchId': '',//$scope.BulkPayment.BatchId,
            'BatchDate': '',//$scope.BulkPayment.DateTime,
            'TotalAmt': 0,//row.Amount,
            'RecCollection': $scope.ReceiptList
        };

        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentCancellation";
       
    };


    $scope.paymentTransfer = function (e) {
        if (permissionCodes.indexOf("50203") == -1) {
            toaster.error({ type: 'error', title: 'Error', body: 'You have not enough permission to continue.!', showCloseButton: true });
            return;
        } else {
            
        }
        var guId = e.dataItem.uid;
        var selectRow = $scope.dgGridBillingSystem.findByGuid(guId);
        var dataItems = $scope.dgGridBillingSystem.data();
        var row = dataItems[selectRow];

        $scope.paymentSourceId = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource,
                { CcbsPaymentSource: row.PaymentSourceId })[0].Id : "";

        $scope.paymentMethodId = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods,
            { SapCode: row.PaymentMethodId })[0].Id : "";


        //$scope.paymentTypeId =
            //defaultDataCookieObj.BillingPaymentType.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentType,
            //   { Id: a })[0].Description : "";


        $scope.paymentSourceDescription = defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource,
            { CcbsPaymentSource: row.PaymentSourceId })[0].Description : "";

        $scope.paymentMethodDescription = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods,
            { SapCode: row.PaymentMethodId })[0].Description : "";
      

        for (var i = 0; i < defaultDataCookieObj.BillingPaymentType.length; i++) {

            if (defaultDataCookieObj.BillingPaymentType[i].Id == row.PaymentTypeId) {
                $scope.paymentTypeDescription = defaultDataCookieObj.BillingPaymentType[i].Description;
                break;
            }
        }

        //$scope.paymentTypeDescription = defaultDataCookieObj.BillingPaymentType.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentType,
        //        { Id: row.PaymentTypeId })[0].Description : "";


        $scope.ReceiptList.push({
            IsSelected: true,
            ReceiptStatus: row.ReceiptStatus,
            PrePost: row.PrePost,
            SBU: row.SBU,
            SbuCode: row.SbuCode,
            ReceiptDate: row.ReceiptDate,
            ReceiptNumber: row.ReceiptNumber,
            ReferenceNo: row.ReferenceNo,
            ConnectionReference: '',//row.ConnectionReference,
            ContractNo: row.ConnectionReference,
            Amount: row.Amount,
            PaymentMode: row.PaymentMode,
            PaymentMethod: $scope.paymentMethodDescription,
            PaymentSource: $scope.paymentSourceDescription,
            ReceiptGeneratedUser: row.ReceiptGeneratedUser,
            PaymentModeId: row.PaymentModeId == "" ? row.PaymentMode : row.PaymentModeId,
            PaymentMethodId: $scope.paymentMethodId,
            PaymentSourceId: $scope.paymentSourceId,
            PaymentSeq: row.PaymentSeq,
            PaymentTypeId: row.PaymentTypeId,
            PaymentType: $scope.paymentTypeDescription,
            ProductTypeId: row.ProductTypeId,
            ProdCat: row.ProdCat
        });

        $scope.recObj = {
            'BatchId': '',//$scope.BulkPayment.BatchId,
            'BatchDate': '',//$scope.BulkPayment.DateTime,
            'TotalAmt': 0,//row.Amount,
            'RecCollection': $scope.ReceiptList
        };

        localStorage.setItem('CancelReceipts', JSON.stringify($scope.recObj));
        window.location = "app.html#/BulkPayment/PaymentTransfer";

    };
}]);
angular.module("DialogBilling").controller('PaymentMethodController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "PaymentMethodService", function ($scope, Page, $routeParams, $filter, toaster, PaymentMethodService) {
    //Set Page Title
    Page.setTitle("Payment Method");
    $scope.PaymentMethod = {};

    //####################################      Finder Payment Method Code       ########################################

    $scope.finderPaymentMethod = {
        title: "Search by Payment Method Code",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-PAYMENTMETHOD",
            mapId: "BILLING-PAYMENTMETHOD-MAP",
            modalId: "finderPaymentMethod",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.PaymentMethod.Id = data.selectedItem.Id;
            $scope.GetPaymentMethodById($scope.PaymentMethod.Id);
            $scope.MapCode = true;
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.PaymentMethod.Id = 0;
        $scope.PaymentMethod.SapCode = null;
        $scope.PaymentMethod.Description = null;
        $scope.PaymentMethod.InActive = false;
        $scope.MapCode = false;
    };

    $scope.GetPaymentMethodById = function (id) {
        PaymentMethodService.GetPaymentMethodById(id).then(function (response) {
            if (response.data.Code == "0") {

                $scope.PaymentMethod.Id = response.data.Result.Id;
                $scope.PaymentMethod.SapCode = response.data.Result.SapCode;
                $scope.PaymentMethod.Description = response.data.Result.Description;
                $scope.PaymentMethod.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostPaymentMethods = function () {
        if ($scope.PaymentMethod.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Method is Mandatory", showCloseButton: true });
            return;
        }
        if ($scope.PaymentMethod.SapCode == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Mapping Code is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.PaymentMethod.Id,
            SapCode: $scope.PaymentMethod.SapCode,
            Description: $scope.PaymentMethod.Description,
            InActive: $scope.PaymentMethod.InActive
        };

        PaymentMethodService.PostPaymentMethods($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    };

}]);
var PaymentModeOptions = function () {
    this.PaymentMode = '';
    this.MobileNo = '';
    this.Amount = 0;
    this.Callback = null;
    this.PaymentDetailsRefCollection = null;
    this.CustomerRef = "";
    this.Params = null;
    this.ItemSbu = null;
};

angular.module("DialogBilling").directive("paymentMode", ['PaymentModeService', "toaster", "$filter", function (PaymentModeService, toaster, $filter) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            options: "="
        },
        template: '<div class="well well-sm" ng-include="paymentModeTemplateUrl"></div>',
        controller: ["$scope", "$attrs", "PaymentModeService", function ($scope, $attrs, PaymentModeService) {

            var options = $attrs.options,
                baseUrl = "Views/Common/PaymentMode/";

            $scope.$watch('options', function (value) {
                if (!value) { return; }

                _initTemplate(value.PaymentMode, value.PaymentDetailsRefCollection);
            });
            //Create a datagrid object
            $scope.GfDgGrid = new DataGrid();
            //Initialize
            var Initializer = {};
            $scope.Initializer = Initializer;

            var firstRw = new KeyValuePair();
            firstRw.Key = '0'; firstRw.Value = "Select";

            //Default values for anymode
            var Defaults = {
                Date: '',
                User: ''
            };
            var saveBtn = true;
            //Default validator object
            var ValidatorObj = PaymentModeService.getValidator();

            $scope.ErrorTypes = ValidatorObj.ErrorTypes;
            $scope.hasError = ValidatorObj.hasError;
            $scope.showErrors = ValidatorObj.showErrors;

            //Finder Parameters
            $scope.FinderParams = null;

            //CreditNexusCard
            var CreditNexusCard = {
                CcCardType: 0,
                CcCardBankCode: 0,

                CcCardNo1: '',
                CcCardNo2: '1234',
                CcCardNo3: '1234',
                CcCardNo4: '',
                CcApprovalCode: '',
                ReferenceNo: '',
                PaymentMode: '',
                CustomerRef: '',
                PaymentModeSubCat: 1,
                Amount: 0
            };
            $scope.CreditNexusCard = CreditNexusCard;

            var _initCreditNexusCard = function () {
                CreditNexusCard.CcCardType = 0;
                CreditNexusCard.CcCardBankCode = 0;

                CreditNexusCard.CcCardNo1 = '';
                CreditNexusCard.CcCardNo2 = '1234';
                CreditNexusCard.CcCardNo3 = '1234';
                CreditNexusCard.CcCardNo4 = '';
                CreditNexusCard.CcApprovalCode = '';
                CreditNexusCard.ReferenceNo = '';
            };

            //EzCash
            var EzCash = {

                VerifyEzCashRedeem: false,

                AccountType: '',

                EzcAccountCode: '',
                NfcAccountCode: '',

                EzcVerified: false,
                NfcVerified: false,
                PaymentModeSubCat: '',
                Request: {
                    DateTime: null,
                    EzcReference: '',
                    Status: '',
                    Remarks: '',

                    Approval: {
                        EzcApproveCode: '',
                        DateTime: null
                    }
                }
            }; $scope.EzCash = EzCash;

            var _initEzCash = function () {
                EzCash.AccountType = '';
                EzCash.VerifyEzCashRedeem = false;
                EzCash.EzcAccountCode = '';
                EzCash.NfcAccountCode = '';

                EzCash.EzcVerified = false;
                EzCash.NfcVerified = false;

                EzCash.Request.DateTime = null;
                EzCash.Request.EzcReference = '';
                EzCash.Request.Status = '';
                EzCash.Request.Remarks = '';

                EzCash.Request.Approval.EzcApproveCode = '';
                EzCash.Request.Approval.DateTime = null;
            };

            //Cheque
            var Cheque = {
                ChForcefulRealization: false,
                ChNo1: '',
                ChNo2: '',
                ChNo3: '',
                ChDate: null,
                ChBank: '',
                ChBranch: '',
                ChIsOtherBank: false,
                ChIsOtherBranch: false,
                ChChequeNo: '',
                ChOtherBank: '',
                ChOtherBranch: '',
                ChRealizedStatus: 'Pending',
                ChRealizedDate: null,
                ChRemarks: '',
                ChUpdatedBy: '',
                ReferenceNo: '',
                PaymentModeSubCat: '',
                Amount: 0,
                ContactNo:'',
                Email:''
            }; $scope.Cheque = Cheque;

            //
            var _initCheque = function () {
                //Cheque.ChForcefulRealization = true;
                Cheque.ChNo1 = '';
                Cheque.ChNo2 = '';
                Cheque.ChNo3 = '';
                Cheque.ChDate = null;
                Cheque.ChBank = '';
                Cheque.ChBranch = '';
                Cheque.ChIsOtherBank = false;
                Cheque.ChIsOtherBranch = false;
                Cheque.ChChequeNo = '';
                Cheque.ChOtherBank = '';
                Cheque.ChOtherBranch = '';
                Cheque.ChRealizedStatus = 'Pending';
                Cheque.ChRealizedDate = null;
                Cheque.ChRemarks = '';
                Cheque.ChUpdatedBy = '';
                Cheque.BankCode = "";
                Cheque.BranchCode = "";
                Cheque.ReferenceNo = '';
                ContactNo: '';
                Email: '';
                $scope.chequeForceRealization();
            };

            //StarPoints
            var ReferenceTypes = { Account: 1, Mobile: 2 };
            $scope.ReferenceTypes = ReferenceTypes;

            var VerificationTypes = { Mobile: 1, NIC: 2 };
            $scope.VerificationTypes = VerificationTypes;

            var StarPoints = {
                Verified: false,

                RefCode: '',
                ReferenceType: '',
                AvlBalance: '',
                RedemptionStatus: '',
                VerificationType: '',
                PaymentModeSubCat: '',
                Sbu: '',
                Mobile: {
                    RequestPin: false,
                    NfcCode: '',
                    NfcPin: ''
                },

                NIC: {
                    Question: '',
                    Answer: ''
                },

                Request: {
                    DateTime: null,
                    StpReference: '',
                    Status: '',
                    Remarks: '',

                    Approval: {
                        StpCode: '',
                        DateTime: null
                    }
                }
            }; $scope.StarPoints = StarPoints;

            var _initStarPoints = function () {
                StarPoints.Verified = false;

                StarPoints.RefCode = '';
                StarPoints.ReferenceType = ReferenceTypes.Mobile;

                StarPoints.AvlBalance = '';
                StarPoints.RedemptionStatus = '';
                StarPoints.VerificationType = ''; //VerificationTypes.Mobile;
                StarPoints.Sbu = '';

                StarPoints.Mobile.RequestPin = false;
                StarPoints.Mobile.NfcCode = '';
                StarPoints.Mobile.NfcPin = '';

                StarPoints.NIC.Question = '';
                StarPoints.NIC.Answer = '';

                StarPoints.Request.DateTime = null;
                StarPoints.Request.EzcReference = '';
                StarPoints.Request.Status = '';
                StarPoints.Request.Remarks = '';

                StarPoints.Request.Approval.EzcApproveCode = '';
                StarPoints.Request.Approval.DateTime = null;
            };

            var PreOrderVoucherSerials = function () {
                BatchId = '';
                SerialNo = '';
                Status = '';
                VoucherAmount = '';
                SoldDate = '';
                ExpireDate = '';
                RadeemDate = '';
                AddedDate = '';
                AddedPcName = '';
                AddedPcIp = '';
                AddedUserId = '';
                ReferenceNo = '';
                PaymentMode = '';
                CustRefCode = '';
            };

            //SMS Based Gift Voucher
            var SmsGiftVoucher = {
                SmsGvVoucherCode: '',
                SmsGvAmount: '',
                ReferenceNo: ''
            }; $scope.SmsGiftVoucher = SmsGiftVoucher;

            var _initSmsGiftVoucher = function () {
                SmsGiftVoucher.SmsGvVoucherCode = '';
                SmsGiftVoucher.SmsGvAmount = '';
                SmsGiftVoucher.ReferenceNo = '';
            };

            //Create a datagrid object
            $scope.SmDgGrid = new DataGrid();

            //Remove from datagird
            $scope.SmRemoveThis = function (e) {
                var row = $(e.currentTarget).closest("tr");
                var dataItem = $scope.SmDgGrid.dataItem(row);

                $scope.SmDgGrid.removeByGuid(dataItem.uid);
                $scope.SmDgGrid.refresh(); return false;
            };


            //<!-- Grid Configurations

            var SmConfig = {};

            SmConfig.pageable = {
                input: true,
                numeric: false
            };

            SmConfig.columns = [
                { field: "", title: "&nbsp;", template: '<button type="button"  data-ng-click=\"SmRemoveThis($event)\" class=\"btn btn-xs btn-danger\" tooltip title="Remove" data-placement="left"><i class="icon icon_trash"></i></button>', width: 40 },
                { field: "SmsGvVoucherCode", title: "Voucher Code" },
                { field: "SmsGvAmount", title: "Amount" },
                { field: "SmsGvStatus", title: "Status Text" },
                { field: "SmsGvApprovedDateTime", title: "Approved Date & Time" },
                { field: "SmsGvRemarks", title: "Remarks" },
                { field: "SmsGvApprovalCode", title: "Approval Code" }
            ];

            SmConfig.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        id: "VoucherCode",
                        fields: {
                            'SmsGvVoucherCode': { editable: false, type: "string" },
                            'SmsGvAmount': { editable: false, type: "string" },
                            'SmsGvStatus': { editable: false, type: "string" },
                            'SmsGvApprovedDateTime': { editable: false, type: "string" },
                            'SmsGvRemarks': { editable: false, type: "string" },
                            'SmsGvApprovalCode': { editable: false, type: "string" },
                            'ReferenceNo': { editable: false, type: "string" }
                        }
                    }
                },
                pageSize: 8
            });

            $scope.SmDgGrid.options(SmConfig);
            //-->

            //Gift Voucher
            var GiftVoucher = {
                Code: '',
                Total: '',
                ReferenceNo: ''
            }; $scope.GiftVoucher = GiftVoucher;

            var _initGiftVoucher = function () {
                GiftVoucher.Code = '';
                GiftVoucher.Total = '';
                GiftVoucher.ReferenceNo = '';
            };



            //Remove from datagird
            $scope.GfRemoveThis = function (e) {

                console.log(e, "remove 11");
                var row = $(e.currentTarget).closest("tr");

                console.log(row, "row");

                var dataItem = $scope.GfDgGrid.dataItem(row);



                $scope.GfDgGrid.removeByGuid(dataItem.uid);
                $scope.GfDgGrid.refresh(); $scope.$apply(function () {
                    $scope.GfCalculateTotal();
                }); return false;
            };

            //Calculate total of datagird
            $scope.GfCalculateTotal = function () {
                var dclTemp = 0, dataItems = $scope.GfDgGrid.data();

                for (var i = 0; i < dataItems.length; i++) {
                    var dataItem = dataItems[i];
                    dclTemp += dataItem.GVValue;
                } GiftVoucher.Total = dclTemp;
            };

            //<!-- Grid Configurations

            var GfConfig = {};
            GfConfig.scrollable = true;
            GfConfig.pageable = {
                input: true,
                numeric: false
            };

            GfConfig.columns = [
                {
                    field: "", title: "&nbsp;", width: 40,
                    template: '<button type="button"  ng-disabled="dataItem.RemoveBtn" data-ng-click=\"GfRemoveThis($event)\" class=\"btn btn-xs btn-danger\" tooltip title="Remove" data-placement="right"><i class="icon icon_trash"></i></button>'
                },
                { field: "GVSerialNo", title: "Serial No", width: 100 },
                { field: "GVItemCode", title: "Item Code", width: 100 },
                { field: "GVItemText", title: "Item Description", width: 100 },
                { field: "GVExpireDate", title: "Expire Date", width: 100},
                { field: "GVSoldDate", title: "Sold Date", width: 100},
                { field: "GVValue", title: "Value", width: 70}
            ];

            GfConfig.dataSource = new kendo.data.DataSource({
                data: [],
                schema: {
                    model: {
                        id: "SerialNo",
                        fields: {
                            'GVSerialNo': { editable: false, type: "string" },
                            'GVItemCode': { editable: false, type: "string" },
                            'GVItemText': { editable: false, type: "string" },
                            'GVExpireDate': { editable: false, type: "string" },
                            'GVSoldDate': { editable: false, type: "string" },
                            'ReferenceNo': { editable: false, type: "string" },
                            'GVValue': { editable: false, type: "string" }
                        }
                    }
                },
                pageSize: 8
            });

            $scope.GfDgGrid.options(GfConfig);
            //-->

            //Btr
            var Btr = {
                BtrRefCode: '',
                ReferenceNo: ''
            }; $scope.Btr = Btr;

            var _initBtr = function () {
                Btr.BtrRefCode = '';
                Btr.ReferenceNo = '';
            };

            //Ibuy
            var Ibuy = {
                IbuyRefCode: '',
                ReferenceNo: ''
            }; $scope.Ibuy = Ibuy;

            var _initIbuy = function () {
                Ibuy.IbuyRefCode = '';
                Ibuy.ReferenceNo = '';
            };  

            //Direct Debit
            var DDB = {
                DDBCode: '',
                ReferenceNo: ''
            }; $scope.DDB = DDB;

            var _initDdb = function () {
                DDB.ddbCode = '';
                DDB.ReferenceNo = '';
                DDB.DDBCode = '';
                $scope.disabled.btnSaveDdb = false;
            };

            //Direct Debit
            var MS2 = {
                MS2Code: '',
                ReferenceNo: ''
            };
            $scope.MS2 = MS2;

            var _initMS2 = function () {
                MS2.MS2Code = '';
                MS2.ReferenceNo = '';
                $scope.disabled.Mis2button = false;
            };


            //Misce
            var Miscellaneous = {
                MisPayModeCategory: false,
                MisRefCode: '',
                Remarks: '',
                ReferenceNo: ''
            }; $scope.Miscellaneous = Miscellaneous;

            var _initMiscellaneous = function () {
                Miscellaneous.MisPayModeCategory = false;
                Miscellaneous.MisRefCode = '';
                Miscellaneous.Remarks = '';
                Miscellaneous.ReferenceNo = '';
                $scope.disabled.Misbutton = false;
            };

            // Voucher
            var Voucher = {
                Code: '',
                Category: {
                    Code: '',
                    Text: ''
                },
                SubCategory: {
                    Code: '',
                    Text: ''
                },
                Amount: '',
                ExpiringOn: '',
                SalesAgent: {
                    Code: '',
                    Text: ''
                }
            }; $scope.Voucher = Voucher;

            var _initVoucher = function () {
                Voucher.Code = '';

                Voucher.Category.Code = '';
                Voucher.Category.Text = '';

                Voucher.SubCategory.Code = '';
                Voucher.SubCategory.Text = '';

                Voucher.Amount = '';
                Voucher.ExpiringOn = '';

                Voucher.SalesAgent.Code = '';
                Voucher.SalesAgent.Text = '';
            };
            //-->

            //-->POVD
            var POVD = {
                BatchId: '',
                PreOrderVoucherSerialNumber: '',
                Status: '',
                StatusId: '',
                Value: '',
                DealerName: '',
                ExpairyDate: '',
            }; $scope.POVD = POVD;

            //-->POVD
            var _POVD = function () {
                POVD.BatchId = '';
                POVD.PreOrderVoucherSerialNumber = '';
                POVD.Status = '';
                POVD.StatusId = '';
                POVD.Value = '';
                POVD.DealerName = '';
                POVD.ExpairyDate = '';
            };

            $scope.EzAccTypeChnage = function () {
                var AccType = EzCash.AccountType; _initEzCash();

                EzCash.NfcVerified = (AccType == 3) ? false : true;
                EzCash.EzcVerified = false; EzCash.AccountType = AccType;
            };

            //-> Gift Voucher Init function
            $scope.GfInit = function (arg) {
                $scope.GfDgGrid.Init(arg, true);
                $scope.GfDgGrid.data([]);
            };

            //-> set template for payment method
            var _initTemplate = function (paymentMode, paymentDetailsRefCollection) {
                $scope.payAlertMessage = new Message(MessageTypes.Empty);

                if (paymentMode == PaymentModesTypes.CreditCard) {
                    $scope.paymentModeTemplateUrl = baseUrl + "creditNexusCard.html"; _initCreditNexusCard();

                    Initializer.CardTypes = [];
                    Initializer.CardTypes.push(firstRw);

                    Initializer.Banks = [];
                    Initializer.Banks.push(firstRw);

                    PaymentModeService.initCreditNexusCard().then(function (response) {
                        if (response.data.Result) { } else {
                            //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                            // toaster.error({ type: 'error', title: 'Error', body: "Oops something went wrong !", showCloseButton: true });
                            toaster.success({ type: 'Success', title: 'Success', body: "PE - " + response.data.Message, showCloseButton: true });
                            return;
                        }

                        var Result = response.data.Result;

                        var temp = Initializer.CardTypes.concat(Result.CardTypes);
                        Initializer.CardTypes = temp;

                        temp = Initializer.Banks.concat(Result.Banks);
                        Initializer.Banks = temp;

                        if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                            if (!angular.isUndefined(paymentDetailsRefCollection[0].ReferenceNo)) {
                                $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.CreditCard);
                            }
                        } else {
                            _initCreditNexusCard();
                            $scope.disabled = {
                                btnSaveCc: false
                            }
                        }
                         
                    }, function (response) {
                        //$scope.payAlertMessage = new Message(response.data.Code, response.data.Message);
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    });
                }
                else if (paymentMode == PaymentModesTypes.Cheque) {
                    $scope.paymentModeTemplateUrl = baseUrl + "cheque.html";

                    setTimeout(function () {
                       
                        $('#ChequeNo3').focus();

                    }, 10);

                  //  var myEl2 = angular.element(document.querySelector('#ChequeNo3'));
                 //   myEl2.focus();

                    PaymentModeService.initCheque().then(function (response) {
                        if (!response.data) {
                            //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                            return;
                        }

                        if (response.data.Code == MessageTypes.Success) {
                            var Result = response.data.Result;

                            Defaults = Result.Defaults;
                            Cheque.ChUpdatedBy = Defaults.User;
                            if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                                if (!angular.isUndefined(paymentDetailsRefCollection[0].ReferenceNo)) {
                                    $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.Cheque);
                                }
                            } else {
                                _initCheque();
                                $scope.disabled = {
                                    btnSaveCheck: false
                                }
                            }
                        }
                        else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                    }, function (response) {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    });
                }
                else if (paymentMode == PaymentModesTypes.eZCash) {
                    $scope.paymentModeTemplateUrl = baseUrl + "eZCash.html"; _initEzCash();

                    EzCash.AccountType = 1; $scope.EzAccTypeChnage();
                    if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                        if (!angular.isUndefined(paymentDetailsRefCollection[0].ReferenceNo)) {
                            $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.eZCash);
                        }
                    } else {
                        _initEzCash();
                    }
                }
                else if (paymentMode == PaymentModesTypes.StarPoints) {
                    $scope.paymentModeTemplateUrl = baseUrl + "StarPoints.html"; _initStarPoints();
                    setTimeout(function () {

                        $('#stpoRefCode').focus();

                    }, 10);

                    if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                        $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.StarPoints);

                    }
                }
                else if (paymentMode == PaymentModesTypes.SMSVoucher) {
                    //need seperate method to smsgv and gv
                    $scope.paymentModeTemplateUrl = baseUrl + "SMSBasedGiftVoucher.html";
                    //_initSmsGiftVoucher();

                    if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                        $scope.SmDgGrid.data([]);
                        for (var j = 0; j < paymentDetailsRefCollection.length; j++) {
                            if (paymentDetailsRefCollection[j] !== null && paymentDetailsRefCollection.length > 0) {
                                var paymentDetailsRef = $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[j].ReferenceNo, PaymentModesTypes.SMSVoucher);

                            }
                        }
                    }
                }
                else if (paymentMode == PaymentModesTypes.GiftVoucher) {
                    $scope.paymentModeTemplateUrl = baseUrl + "GiftVoucherRedemption.html";
                    // var s = $scope.GfDgGrid.data([]);

                    console.log("gift Voucher init");
                    //_initGiftVoucher();
                    if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                        for (var i = 0; i < paymentDetailsRefCollection.length; i++) {
                            if (paymentDetailsRefCollection[i] !== null && paymentDetailsRefCollection.length > 0) {
                                var paymentDetailsRef = $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[i].ReferenceNo, PaymentModesTypes.GiftVoucher);
                            }
                        }
                    }

                    console.log($scope.GfDgGrid.data, "scope.GfDgGrid");
                    //$scope.GfDgGrid.data([]);
                }
                else if (paymentMode == PaymentModesTypes.BTR) {
                    $scope.paymentModeTemplateUrl = baseUrl + "btr.html";
                    //_initBtr();

                    if (paymentDetailsRefCollection != null && paymentDetailsRefCollection.length > 0) {

                        var paymentDetailsRef = $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.BTR);

                    }
                } else if (paymentMode == PaymentModesTypes.PreVoucher) {
                    $scope.paymentModeTemplateUrl = baseUrl + "preOderVoucher.html"; _POVD();
                    //_initIbuy();

                    if (paymentDetailsRefCollection != null && paymentDetailsRefCollection.length > 0) {

                        var paymentDetailsRef = $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.IBUY);

                    }
                }
                else if (paymentMode == PaymentModesTypes.IBUY) {
                    $scope.paymentModeTemplateUrl = baseUrl + "iBuy.html";
                    //_initIbuy();

                    if (paymentDetailsRefCollection != null && paymentDetailsRefCollection.length > 0) {

                        var paymentDetailsRef = $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.IBUY);

                    }
                }
                else if (paymentMode == PaymentModesTypes.Miscellaneous) {
                    $scope.paymentModeTemplateUrl = baseUrl + "miscellaneous.html";
                    //_initMiscellaneous();

                    Initializer.PayModeCategories = [];
                    Initializer.PayModeCategories.push(firstRw);

                    PaymentModeService.initMiscellaneous().then(function (response) {
                        if (response.data.Result) { } else {
                            //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !"); 
                            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                            return;
                        }

                        var Result = response.data.Result;

                        Initializer.PayModeCategories = Initializer.PayModeCategories.concat(Result.PayModeCategories);


                        if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                            $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.Miscellaneous);

                        }


                    }, function (response) {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    });
                }
                else if (paymentMode == PaymentModesTypes.Voucher) {
                    $scope.paymentModeTemplateUrl = baseUrl + "voucher.html"; _initVoucher();

                    //$scope.param = [];
                    //$scope.param.push($scope.options.Params.InvoiceNo);
                }
                    ///////////////////// ddebit, misc 2 payment modes
                else if (paymentMode == PaymentModesTypes.DDB) {
                    $scope.paymentModeTemplateUrl = baseUrl + "directDebit.html";// _initDdb();
                    setTimeout(function () {

                        $('#ddbRefCode').focus();

                    }, 10);

                    if (paymentDetailsRefCollection !== null && paymentDetailsRefCollection.length > 0) {
                        $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.DDB);

                    }
                    // console.log("ddb");
                }
                else if (paymentMode == PaymentModesTypes.MS2) {
                    //need seperate method to smsgv and gv
                    $scope.paymentModeTemplateUrl = baseUrl + "miscellaneous2.html";
                    //_initSmsGiftVoucher();
                    setTimeout(function () {

                        $('#ms2RefCode').focus();

                    }, 10);

                    if (paymentDetailsRefCollection != null && paymentDetailsRefCollection.length > 0) {

                        var paymentDetailsRef = $scope.GetPaymentReferenceDetailsByReferenceId(paymentDetailsRefCollection[0].ReferenceNo, PaymentModesTypes.MS2);

                    }
                }
                else if (paymentMode == PaymentModesTypes.Genie) {
                    $scope.paymentModeTemplateUrl = baseUrl + "genie.html";
                    $scope.genie = {};
                }
                else {
                    $scope.paymentModeTemplateUrl = "";
                    _initStarPoints();
                    _initEzCash(); _initCheque();
                    _initCreditNexusCard();
                    _initSmsGiftVoucher();
                    _initGiftVoucher();
                    _initBtr();
                    _initIbuy();
                    _initMiscellaneous();
                    _initVoucher();
                    _POVD();
                    _initDdb();
                    _initMS2();
                }

                //->
                if ($scope.payAlertMessage) { $scope.payAlertMessage = new Message(MessageTypes.Empty); }
            };

            // Genie send pay request
            $scope.sendPayRequest = function () {
                if ($scope.genie.genieRegisteredNumber == undefined || $scope.genie.genieRegisteredNumber == null) {
                    toaster.error({ type: 'error', title: 'Error', body: "Genie Registered Number not found !", showCloseButton: true });
                    return;
                }
                var sendPayRequestRequest = {
                    genieRegisteredNumber: $scope.genie.genieRegisteredNumber,
                    Amount: $scope.options.Amount
                };

                PaymentModeService.sendPayRequest(sendPayRequestRequest).success(function (response) {
                    if (response.Code != MessageTypes.Success) {
                        toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                        return;
                    } else {
                        toaster.success({ type: 'success', title: 'Success', body: response.Message, showCloseButton: true });
                        $scope.genie.genieTransactionId = response.Result.genieTransactionId;
                        $scope.genie.SourceReference = response.Result.SourceReference;
                    }
                }).error(function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                    return;
                });
            }

            //Direct Genie
            var Genie = {
                ReferenceNo: ''
            };
            $scope.Genie = Genie;

            var _initGenie = function () {
                Genie.ReferenceNo = '';
            };
             
            // Genie Verify Status
            $scope.genieVerifyStatus = function () {
                if ($scope.genie.genieTransactionId == undefined || $scope.genie.genieTransactionId == null) {
                    toaster.error({ type: 'error', title: 'Error', body: "Genie Transaction Id not found !", showCloseButton: true });
                    return;
                }
                var genieVerifyStatusRequest = {
                    genieTransactionId: $scope.genie.genieTransactionId, 
                    sourceReference: $scope.genie.SourceReference
                };

                PaymentModeService.genieVerifyStatus(genieVerifyStatusRequest).success(function (response) {
                    if (response.Code != MessageTypes.Success) {
                        toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                        return;
                    } else {
                        toaster.success({ type: 'success', title: 'Success', body: response.Message, showCloseButton: true });
                        $scope.genie.paymentSource = response.Result.paymentSource;
                        $scope.genie.cardType = response.Result.cardType;

                        var objReturn = jQuery.extend(true, {}, Genie);
                        objReturn.ReferenceNo = $scope.genie.SourceReference;
                        finish(objReturn);
                    }
                }).error(function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                    return;
                });
            }

            $scope.sourceReferenceFinder = {
                title: "Source Reference",
                info: {
                    appId: "ZBC-DCPOS",
                    uiId: "PMOD-GENIE-ID",
                    mapId: "PMOD-GENIE-ID-MAP",
                    modalId: "sourceReferenceFinder",
                    onLoad: true
                },
                params: [],
                callback: function (data) {
                    $scope.genie.SourceReference = data.selectedItem.SourceReference;
                    $scope.genie.genieTransactionId = data.selectedItem.GenieTransactionId;
                    $scope.genie.genieRegisteredNumber = data.selectedItem.GenieRegisteredNumber;
                },
                open: function () {
                    window._focuse(this.info.modalId);
                    objTemp = [];
                    objTemp.push(JSON.parse(localStorage.getItem('profile')).userId);
                    objTemp.push(JSON.parse(localStorage.getItem('profile')).outletCode);
                    this.params = objTemp;

                    this.info.onLoad = true;
                    $("#" + this.info.modalId).modal('show');
                }
            };

            $scope.GetPaymentReferenceDetailsByReferenceId = function (ezcReference, paymentMode) {
                PaymentModeService.GetPaymentReferenceDetailsByReferenceId(ezcReference, paymentMode).then(function (response) {
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Payment reference data not found !");
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        saveBtn = true;
                        return;
                    }
                    //$scope.disabled.btnSaveCc == false;
                    //$scope.disabled.btnSaveCheck == false;
                    //EzCash.EzcVerified == true;
                    //StarPoints.Mobile.NfcPin == true;
                    //$scope.disabled.smsGVbutton == false;
                    //$scope.disabled.GVbutton == false;
                    //$scope.disabled.BtrSave == false;
                    //$scope.disabled.Ibuybutton == false;
                    //$scope.disabled.Misbutton == false;
                    //$scope.disabled.VoucherSave == false;


                    if (response.data.Code == MessageTypes.Success) {


                        if (response.data.Result !== null) {
                            if (paymentMode == PaymentModesTypes.CreditCard) {
                                CreditNexusCard.CcCardType = response.data.Result.paymentDetailsRefCollection[0].CcCardType;
                                CreditNexusCard.CcCardBankCode = response.data.Result.paymentDetailsRefCollection[0].CcCardBankCode;
                                CreditNexusCard.CcCardNo1 = response.data.Result.paymentDetailsRefCollection[0].CcCardNo1;
                                //CreditNexusCard.CcCardNo2 = response.data.Result.paymentDetailsRefCollection[0].CcCardNo2;
                                //CreditNexusCard.CcCardNo3 = response.data.Result.paymentDetailsRefCollection[0].CcCardNo3;
                                CreditNexusCard.CcCardNo4 = response.data.Result.paymentDetailsRefCollection[0].CcCardNo4;
                                CreditNexusCard.CcApprovalCode = response.data.Result.paymentDetailsRefCollection[0].CcApprovalCode;
                                $scope.disabled = {
                                    btnSaveCc: true
                                }
                            }
                            else if (paymentMode == PaymentModesTypes.Cheque) {
                                Cheque.ChNo1 = response.data.Result.paymentDetailsRefCollection[0].ChNo1;
                                Cheque.ChNo2 = response.data.Result.paymentDetailsRefCollection[0].ChNo2;
                                Cheque.ChNo3 = response.data.Result.paymentDetailsRefCollection[0].ChNo3;
                                Cheque.ChForcefulRealization = response.data.Result.paymentDetailsRefCollection[0].ChForcefulRealization;
                                Cheque.ChDate = response.data.Result.paymentDetailsRefCollection[0].ChDate.split('T')[0];
                                Cheque.ChBank = response.data.Result.paymentDetailsRefCollection[0].ChBank;
                                Cheque.ChIsOtherBank = response.data.Result.paymentDetailsRefCollection[0].ChIsOtherBank;
                                Cheque.ChOtherBank = response.data.Result.paymentDetailsRefCollection[0].ChOtherBank;
                                Cheque.ChBranch = response.data.Result.paymentDetailsRefCollection[0].ChBranch;
                                Cheque.ChIsOtherBranch = response.data.Result.paymentDetailsRefCollection[0].ChIsOtherBranch;
                                Cheque.ChOtherBranch = response.data.Result.paymentDetailsRefCollection[0].ChOtherBranch;
                                Cheque.ChRealizedStatus = response.data.Result.paymentDetailsRefCollection[0].ChRealizedStatus;

                                $scope.currentDate = new Date();
                                Cheque.ChRealizedDate = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm:ss a');

                                //Cheque.ChRealizedDate = //response.data.Result.paymentDetailsRefCollection[0].ChRealizedDate.split('T')[0];
                                Cheque.ChRemarks = response.data.Result.paymentDetailsRefCollection[0].ChRemarks;
                                Cheque.ContactNo = response.data.Result.paymentDetailsRefCollection[0].ContactNo;
                                Cheque.Email = response.data.Result.paymentDetailsRefCollection[0].Email;
                                Cheque.ChUpdatedBy = response.data.Result.paymentDetailsRefCollection[0].ChUpdatedBy;
                                $scope.disabled = {
                                    btnSaveCheck: true
                                }
                            }
                            else if (paymentMode == PaymentModesTypes.eZCash) {
                                EzCash.Request.DateTime = response.data.Result.paymentDetailsRefCollection[0].ReqDateTime.split('T')[0];
                                EzCash.Request.EzcReference = response.data.Result.paymentDetailsRefCollection[0].EzcReference;
                                EzCash.Request.Status = response.data.Result.paymentDetailsRefCollection[0].EzStatus;
                                EzCash.Request.Remarks = response.data.Result.paymentDetailsRefCollection[0].EzRemarks;
                                EzCash.Request.Approval.EzcApproveCode = response.data.Result.paymentDetailsRefCollection[0].EzcApproveCode;
                                EzCash.Request.Approval.DateTime = response.data.Result.paymentDetailsRefCollection[0].DateTime.split('T')[0];
                                EzCash.EzcVerified = false;

                            }
                            else if (paymentMode == PaymentModesTypes.StarPoints) {
                                StarPoints.Request.DateTime = response.data.Result.paymentDetailsRefCollection[0].StRequestDate.split('T')[0];
                                StarPoints.Request.StpReference = response.data.Result.paymentDetailsRefCollection[0].ReferenceNo;
                                StarPoints.Request.Status = response.data.Result.paymentDetailsRefCollection[0].StStatus;
                                StarPoints.Request.Approval.StpCode = response.data.Result.paymentDetailsRefCollection[0].StReferenceCode;
                                StarPoints.Request.Approval.DateTime = response.data.Result.paymentDetailsRefCollection[0].StApprovedDate.split('T')[0];
                                StarPoints.Request.Remarks = response.data.Result.paymentDetailsRefCollection[0].StRemarks;
                                StarPoints.Mobile.NfcPin = false;
                            }
                            else if (paymentMode == PaymentModesTypes.SMSVoucher) {
                                if (response.data.Result !== null && response.data.Result.paymentDetailsRefCollection.length > 0) {
                                    var dtRow = {
                                        SmsGvVoucherCode: response.data.Result.paymentDetailsRefCollection[0].SmsGvVoucherCode,
                                        SmsGvAmount: response.data.Result.paymentDetailsRefCollection[0].SmsGvAmount,
                                        SmsGvApprovalCode: response.data.Result.paymentDetailsRefCollection[0].SmsGvApprovalCode,
                                        SmsGvApprovedDateTime: response.data.Result.paymentDetailsRefCollection[0].SmsGvApprovedDateTime,
                                        SmsGvRemarks: response.data.Result.paymentDetailsRefCollection[0].SmsGvRemarks,
                                        SmsGvStatus: response.data.Result.paymentDetailsRefCollection[0].SmsGvStatus,
                                        ReferenceNo: response.data.Result.paymentDetailsRefCollection[0].ReferenceNo
                                    };//);

                                    $scope.disabled = {
                                        smsGVbutton: true
                                    };
                                    var s = $scope.SmDgGrid.data();
                                    if (s.length > 0) {
                                        //s = [];
                                        s.push(dtRow);
                                    } else {
                                        s = [];
                                        s.push(dtRow);
                                    }
                                    $scope.SmDgGrid.data(s);
                                }
                            }
                            else if (paymentMode == PaymentModesTypes.GiftVoucher) {
                                if (response.data.Result !== null && response.data.Result.paymentDetailsRefCollection.length > 0) {
                                    var dtRow = {
                                        GVSerialNo: response.data.Result.paymentDetailsRefCollection[0].GVSerialNo,
                                        GVItemCode: response.data.Result.paymentDetailsRefCollection[0].GVItemCode,
                                        GVItemText: response.data.Result.paymentDetailsRefCollection[0].GVItemText,
                                        GVExpireDate: response.data.Result.paymentDetailsRefCollection[0].GVExpireDate,
                                        GVSoldDate: response.data.Result.paymentDetailsRefCollection[0].GVSoldDate,
                                        GVValue: response.data.Result.paymentDetailsRefCollection[0].GVValue,
                                        ReferenceNo: response.data.Result.paymentDetailsRefCollection[0].ReferenceNo
                                    };
                                    $scope.disabled = {
                                        GVbutton: true
                                    };
                                    var s = $scope.GfDgGrid.data();
                                    if (s.length > 0) {
                                        //s = [];
                                        s.push(dtRow);
                                    } else {
                                        s = [];
                                        s.push(dtRow);
                                    }
                                    $scope.GfDgGrid.data(s);
                                }

                            }
                            else if (paymentMode == PaymentModesTypes.BTR) {
                                if (response.data.Result !== null && response.data.Result.paymentDetailsRefCollection.length > 0) {
                                    Btr.BtrRefCode = response.data.Result.paymentDetailsRefCollection[0].BtrRefCode;

                                    $scope.disabled = {
                                        BtrSave: true
                                    }
                                }
                            }
                            else if (paymentMode == PaymentModesTypes.IBUY) {
                                if (response.data.Result !== null && response.data.Result.paymentDetailsRefCollection.length > 0) {
                                    Ibuy.IbuyRefCode = response.data.Result.paymentDetailsRefCollection[0].IbuyRefCode;
                                    $scope.disabled = {
                                        Ibuybutton: true
                                    }
                                }
                            }
                            else if (paymentMode == PaymentModesTypes.Miscellaneous) {
                                if (response.data.Result !== null && response.data.Result.paymentDetailsRefCollection.length > 0) {
                                    Miscellaneous.MisPayModeCategory = response.data.Result.paymentDetailsRefCollection[0].MisPayModeCategory;
                                    Miscellaneous.MisRefCode = response.data.Result.paymentDetailsRefCollection[0].MisRefCode;
                                    Miscellaneous.Remarks = response.data.Result.paymentDetailsRefCollection[0].Remarks;
                                    $scope.disabled = {
                                        Misbutton: true
                                    }
                                }
                            }

                            else if (paymentMode == PaymentModesTypes.Voucher) {
                                if (response.data.Result !== null && response.data.Result.paymentDetailsRefCollection.length > 0) {
                                    Voucher.VoucherCategory = response.data.Result.paymentDetailsRefCollection[0].VoucherCategory;
                                    Voucher.VoucherSubCategory = response.data.Result.paymentDetailsRefCollection[0].VoucherSubCategory;
                                    Voucher.VoucherCode = response.data.Result.paymentDetailsRefCollection[0].VoucherCode;
                                    Voucher.SalesAgent = response.data.Result.paymentDetailsRefCollection[0].SalesAgent;
                                    Voucher.VoucherAmount = response.data.Result.paymentDetailsRefCollection[0].VoucherAmount;
                                    Voucher.ExpiringOn = response.data.Result.paymentDetailsRefCollection[0].ExpiringOn;
                                    $scope.disabled = {
                                        VoucherSave: true
                                    }
                                }
                            }
                        }
                    } else {
                        saveBtn = true;
                    }
                });
            };
            //-> Credit card save function

            $scope.SaveCreditNexusCard = function (form) {

                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                if (form && form.$valid) { }
                else {
                    $scope.showErrors(form);
                    saveBtn = true;
                    return;
                }

                if ($scope.CreditNexusCard.CcCardType == "0") {
                    toaster.error({ type: 'error', title: 'Error', body: "Please select card type!", showCloseButton: true });
                    saveBtn = true;
                    return;
                }
                if ($scope.CreditNexusCard.CcCardBankCode == "0") {
                    toaster.error({ type: 'error', title: 'Error', body: "Please select bank!", showCloseButton: true });
                    saveBtn = true;
                    return;
                }

                var isSuccess = $scope.ValidateLengthToSave();
                if (!isSuccess) {
                    toaster.error({ type: 'error', title: 'Error', body: "Card number invalied!", showCloseButton: true });
                    saveBtn = true;
                    return;
                } else {
                    $scope.payAlertMessage = new Message(MessageTypes.Empty);
                }

                //CreditNexusCard.CcCardType = CreditNexusCard.CardType;
                var objReturn = jQuery.extend(true, {}, CreditNexusCard);
                objReturn.PaymentModeSubCat = $scope.CreditNexusCard.CcCardBankCode;
                //_initCreditNexusCard();
                CreditNexusCard.CcCardType = $scope.CreditNexusCard.CcCardType;
                CreditNexusCard.CcCardBankCode = $scope.CreditNexusCard.CcCardBankCode;
                CreditNexusCard.CcCardNo1 = $scope.CreditNexusCard.CcCardNo1;
                CreditNexusCard.CcCardNo2 = "1234";//$scope.CreditNexusCard.CcCardNo2;
                CreditNexusCard.CcCardNo3 = "1234";//$scope.CreditNexusCard.CcCardNo3;
                CreditNexusCard.CcCardNo4 = $scope.CreditNexusCard.CcCardNo4;
                CreditNexusCard.CcApprovalCode = $scope.CreditNexusCard.CcApprovalCode;
                CreditNexusCard.CustRefCode = $scope.options.CustomerRef;
                CreditNexusCard.PaymentMode = $scope.options.PaymentMode;
                CreditNexusCard.PaymentModeSubCat = $scope.CreditNexusCard.CcCardType;
                CreditNexusCard.Amount = $scope.options.Amount;
                PaymentModeService.PostPamentModeReferences(CreditNexusCard, PaymentModesTypes.CreditCard).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        toaster.error({ type: 'error', title: 'Error', body: "Credit / Nexus card data error!", showCloseButton: true });
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Credit / Nexus card data error!");
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        toaster.success({ type: 'error', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        objReturn.ReferenceNo = response.data.Result;
                        $scope.disabled.btnSaveCc = true;
                        finish(objReturn);
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "Credit / Nexus card data saving fails!" + response.data.Message, showCloseButton: true });
                });


            };
            //
            //-> EZ Cash save function

            $scope.SaveEzCash = function () {

                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                $scope.payAlertMessage = "";
                //$scope.options.Amount = 60;           Only for diffrent account Discuss with daminda
                PaymentModeService.EzCashRedemption({
                    MobileNo: EzCash.EzcAccountCode,
                    EzAccountType: EzCash.AccountType,
                    EzAccountRef: EzCash.EzcAccountCode,
                    NfcAccountRef: EzCash.NfcAccountCode,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount,
                    InvoiceNo: ""//$scope.options.Params.InvoiceNo
                }).then(function (response) {
                    saveBtn = true;
                    console.log("0", response);
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Eazy Cash redemption error !");
                        toaster.error({ type: 'error', title: 'Error', body: "Eazy Cash redemption error !", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;
                        console.log("1", response);
                        //    $scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully redemption!");
                        EzCash.Request = Result.Request; EzCash.VerifyEzCashRedeem = true;

                        //  var objReturn = jQuery.extend(true, {}, EzCash); finish(objReturn);

                    }
                    else { console.log("2"); toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> EZ Cash redeemtion verify function

            $scope.VerifyReedemtion = function () {

                if (!saveBtn) {
                    return;
                }
                saveBtn = false;

                $scope.payAlertMessage = "";

                PaymentModeService.VerifyReedemtion({
                    EzcApproveCode: $scope.EzCash.Request.Approval.EzcApproveCode,
                    EzcReference: $scope.EzCash.Request.EzcReference
                }).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        console.log(response.data);
                        EzCash.Request = response.data.Result.Request;
                        EzCash.Request.Approval = response.data.Result.Request.Approval; EzCash.VerifyEzCashRedeem = false;
                        if (response.data.Result.Request.Status == 'Success') {
                            var objReturn = jQuery.extend(true, {}, EzCash); finish(objReturn);
                        }

                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    saveBtn = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> EZ Cash verify function
            $scope.EzCashVerifyStatus = function () {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                $scope.payAlertMessage = "";
                PaymentModeService.EzCashVerifyStatus({
                    MobileNo: EzCash.EzcAccountCode,
                    EzcAccCode: EzCash.EzcAccountCode
                }).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;

                        EzCash.EzcVerified = Result.EzcVerified;
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    saveBtn = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> EZ Cash from NFC code function
            $scope.EzCashRetrieveAccRef = function () {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                PaymentModeService.EzCashRetrieveAccRef({
                    MobileNo: $scope.options.MobileNo,
                    NfcAccCode: EzCash.NfcAccountCode
                }).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;

                        EzCash.NfcVerified = Result.NfcVerified;
                        EzCash.EzcAccountCode = Result.EzcAccountCode;
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    saveBtn = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> Cheque init date pickers function
            $scope.chequeInitDatePickers = chequeInitDatePickers;
            function chequeInitDatePickers(idFromDP) {

                var objDtPicker = new DatePicker();
                
                $scope.tomorrow = new Date();
                $scope.tomorrow.setDate($scope.tomorrow.getDate() + 1);
                
                objDtPicker.Init(idFromDP);
                objDtPicker.setOptions({
                    max: $scope.tomorrow
                });
            };


            //-> Cheque reslove bank/branch function
            $scope.chequeReslove = function () {
                if (Cheque.ChNo1 && Cheque.ChNo2 && Cheque.ChNo3) { } else { return; }

                PaymentModeService.chequeReslove({
                    ChNo1: Cheque.ChNo1,
                    ChNo2: Cheque.ChNo2,
                    ChNo3: Cheque.ChNo3
                }).then(function (response) {
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: "Cheque init failed !", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;

                        Cheque.ChIsOtherBank = Result.ChIsOtherBank;
                        Cheque.BankCode = Result.BankCode;
                        Cheque.ChBank = Result.ChBank;

                        Cheque.ChIsOtherBranch = Result.ChIsOtherBranch;
                        Cheque.BranchCode = Result.BranchCode;
                        Cheque.ChBranch = Result.ChBranch;
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> Cheque force realization function
            $scope.chequeForceRealization = function () {
                if (Cheque.ChForcefulRealization === true) {
                    Cheque.ChRealizedStatus = 'Realized';
                    $scope.currentDate = new Date();
                    Cheque.ChRealizedDate = $filter('date')($scope.currentDate, 'dd MMM yyyy HH:mm:ss a');
                }
                else {
                    Cheque.ChRealizedStatus = 'Pending';
                    Cheque.ChRealizedDate = '';
                }
            };

            //-> Cheque save function
            $scope.chequeSubmit = function (form) {
                if (!saveBtn) {
                    return;
                }

                saveBtn = false;
                if (form && form.$valid) { } else {
                    $scope.showErrors(form);
                    saveBtn = true;
                    return;
                }

                if ($scope.Cheque.ContactNo.length < 1) {
                    $scope.showErrors(form);
                    saveBtn = true;
                    return;
                }
                var objReturn = jQuery.extend(true, {}, Cheque);


                PaymentModeService.PostPamentModeReferences({ 
                    ChNo1: $scope.Cheque.ChNo1,
                    ChNo2: $scope.Cheque.ChNo2,
                    ChNo3: $scope.Cheque.ChNo3,
                    ChForcefulRealization: $scope.Cheque.ChForcefulRealization,
                    ChDate: $scope.Cheque.ChDate,
                    ChBank: 0, //$scope.Cheque.ChBank,
                    ChIsOtherBank: $scope.Cheque.ChIsOtherBank,
                    ChBranch: 0, //$scope.Cheque.ChBranch,
                    ChIsOtherBranch: $scope.Cheque.ChIsOtherBranch,
                    ChOtherBank: $scope.Cheque.ChOtherBank,
                    ChOtherBranch: $scope.Cheque.ChOtherBranch,
                    ChRealizedStatus: false, //$scope.Cheque.ChRealizedStatus,
                    ChRealizedDate: $scope.Cheque.ChRealizedDate,
                    ChRemarks: $scope.Cheque.ChRemarks,
                    ContactNo: $scope.Cheque.ContactNo,
                    Email: $scope.Cheque.Email,
                    ChUpdatedBy: $scope.Cheque.ChUpdatedBy,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount
                }, PaymentModesTypes.Cheque).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Check data saving fails!");
                        toaster.success({ type: 'error', title: 'Error', body: "Check data saving fails!", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        objReturn.ReferenceNo = response.data.Result;
                        objReturn.PaymentModeSubCat = $scope.Cheque.ChBank == '' ? 1 : $scope.Cheque.ChBank;
                        finish(objReturn);
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "Check data saving fails!" + response.data.Message, showCloseButton: true });
                });


            };
            $scope.StarPoints.RefCodeEnabled = true;
            //-> StarPoints Verification Type chnaged
            $scope.StPointVerTypeChanged = function () {
                if (StarPoints.VerificationType == VerificationTypes.Mobile) {
                    StarPoints.NIC.Question = '';
                    StarPoints.NIC.Answer = '';
                }
                else if (StarPoints.VerificationType == VerificationTypes.NIC) {
                    StarPoints.Mobile.RequestPin = false;
                    StarPoints.Mobile.NfcCode = '';
                    StarPoints.Mobile.NfcPin = '';
                }
            };

            //-> StarPoints Show Balance
            $scope.StShowBalance = function () {
                PaymentModeService.StShowBalance({
                    MobileNo: $scope.options.MobileNo,
                    RefCode: StarPoints.RefCode,
                    RefType: StarPoints.ReferenceType,
                    Sbu: $scope.options.ItemSbu,
                    SystemId:2
                }).then(function (response) {
                    if (!response.data) {
                        $scope.StarPoints.RefCodeEnabled = true;
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                        return;
                    }

                    $scope.payAlertMessage = new Message(MessageTypes.Empty);

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;
                        $scope.StarPoints.RefCodeEnabled = false;
                        StarPoints.AvlBalance = Result.AvlBalance;
                        StarPoints.RedemptionStatus = Result.RedemptionStatus;
                    }
                    else {
                        $scope.StarPoints.RefCodeEnabled = true;
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    }

                }, function (response) {
                    $scope.StarPoints.RefCodeEnabled = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> StarPoints Request Pin Changed
            $scope.StRequestPinChanged = function () {
                StarPoints.Mobile.NfcCode = '';
                StarPoints.Mobile.NfcPin = '';
            };

            //-> StarPoints Request PIN
            $scope.StRequestNfcPin = function () {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                StarPoints.Mobile.NfcPin = '';

                PaymentModeService.StRequestNfcPin({
                    MobileNo: $scope.options.MobileNo,
                    NfcAccCode: StarPoints.Mobile.NfcCode,
                    Sbu: $scope.options.ItemSbu,
                    SystemId: 2
                }).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: "Oops something went wrong !", showCloseButton: true });
                        return;
                    }

                    $scope.payAlertMessage = new Message(MessageTypes.Empty);

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;

                        StarPoints.RefCode = Result.RefCode;
                        StarPoints.ReferenceType = Result.ReferenceType;
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    saveBtn = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> StarPoints Request Question
            $scope.StRequestQuestion = function () {
                PaymentModeService.StRequestQuestion({
                    MobileNo: $scope.options.MobileNo,
                    RefCode: StarPoints.RefCode,
                    RefType: StarPoints.ReferenceType,
                    Sbu: $scope.options.ItemSbu,
                    SystemId: 2
                }).then(function (response) {
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: "Oops something went wrong !", showCloseButton: true });
                        return;
                    }

                    $scope.payAlertMessage = new Message(MessageTypes.Empty);

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;

                        StarPoints.Mobile.NfcPin = '';

                        StarPoints.VerificationType = Result.VerificationType;
                        StarPoints.NIC.Question = Result.Question;
                        // $scope.payAlertMessage = new Message(MessageTypes.Success, "Pin Request Successful!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Pin Request Successful!", showCloseButton: true });
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> StarPoints save function
            $scope.SaveStarPoints = function () {
                //$scope.options.Amount = 10; // SIT purpose only
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;

                PaymentModeService.StarPointsRedemption({
                    MobileNo: $scope.options.MobileNo,
                    PaymentMode: $scope.options.PaymentMode,

                    StReferenceCode: StarPoints.RefCode,
                    StVerificationType: StarPoints.VerificationType,
                    StNfcAccountRef: StarPoints.Mobile.NfcCode,
                    StNfcPin: StarPoints.Mobile.NfcPin,
                    StQuestion: StarPoints.NIC.Question,
                    StAnswer: StarPoints.NIC.Answer,
                    CustRefCode: $scope.options.CustomerRef,
                    Amount: $scope.options.Amount,
                    RefCode: StarPoints.RefCode,
                    RefType: StarPoints.ReferenceType,
                    Sbu: $scope.options.ItemSbu,
                    SystemId: 2
                }).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        toaster.error({ type: 'error', title: 'Error', body: "Starpoints submition error !", showCloseButton: true });
                        return;
                    }

                    $scope.payAlertMessage = new Message(MessageTypes.Empty);

                    if (response.data.Code == MessageTypes.Success) {
                        var Result = response.data.Result;

                        StarPoints.Request = Result.Request;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully submited!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Successfully submited!", showCloseButton: true });
                        var objReturn = jQuery.extend(true, {}, StarPoints);
                        finish(objReturn);
                    }
                    else {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    }

                }, function (response) {
                    saveBtn = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> SMS Gift Voucher Init function
            $scope.SmInit = function (arg) {
                $scope.SmDgGrid.Init(arg, true);
                $scope.SmDgGrid.data([]);
            };

            //-> SMS Gift Voucher Add to grid
            $scope.SmAddVoucher = function () {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                var dataItems = $scope.SmDgGrid.data();

                PaymentModeService.SmRequestVoucher({
                    SmsGvVoucherCode: $scope.SmsGiftVoucher.SmsGvVoucherCode,
                    PaymentMode: $scope.options.PaymentMode,
                    SmsGvAmount: 0 //$scope.SmsGiftVoucher.SmsGvAmount
                }).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Sms gift voucher data submition error !");
                        toaster.error({ type: 'error', title: 'Error', body: "Sms gift voucher data submition error !", showCloseButton: true });
                        return;
                    }


                    if (response.data.Code == MessageTypes.Success) {
                        $scope.payAlertMessage = new Message(MessageTypes.Empty);

                        var Result = response.data.Result;

                        dataItems.push({}); var rwIndex = dataItems.length - 1;

                        var dataItem = dataItems[rwIndex];

                        dataItem.SmsGvVoucherCode = Result.SmsGvVoucherCode;
                        dataItem.SmsGvAmount = Result.SmsGvAmount;
                        dataItem.SmsGvStatus = Result.SmsGvStatus;
                        dataItem.SmsGvApprovedDateTime = Result.SmsGvApprovedDateTime;
                        dataItem.SmsGvRemarks = Result.SmsGvRemarks;
                        dataItem.SmsGvApprovalCode = Result.SmsGvApprovalCode;
                        dataItem.ReferenceNo = Result.ReferenceNo;

                        $scope.SmDgGrid.refresh(); _initSmsGiftVoucher();
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    saveBtn = true;
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> SMS Gift Voucher save function
            $scope.SaveSmGfVouchers = function () {
                var dataItems = $scope.SmDgGrid.data();

                var dtTable = [];

                for (var i = 0; i < dataItems.length; i++) {
                    var dataItem = dataItems[i];

                    dtTable.push({
                        SmsGvVoucherCode: dataItem.SmsGvVoucherCode,
                        SmsGvAmount: dataItem.SmsGvAmount,
                        SmsGvApprovalCode: dataItem.SmsGvApprovalCode,
                        SmsGvApprovedDateTime: dataItem.SmsGvApprovedDateTime,
                        SmsGvRemarks: dataItem.SmsGvRemarks,
                        SmsGvStatus: dataItem.SmsGvStatus,
                        ReferenceNo: dataItem.ReferenceNo,
                        CustRefCode: $scope.options.CustomerRef,
                        PaymentMode: $scope.options.PaymentMode
                    });
                } finish(dtTable);
            };

            //-> Gift Voucher Init function
            $scope.GfInit = function (arg) {
                $scope.GfDgGrid.Init(arg, true);
                $scope.GfDgGrid.data([]);
            };

            //-> Gift Voucher Add to grid
            $scope.GfAddVoucher = function () {
                debugger;
                console.log("gift Vo");
                var dataItems = $scope.GfDgGrid.data();

                for (var key in dataItems) {
                    var objTemp = dataItems[key];
                    if (objTemp.GVSerialNo !== null && GiftVoucher.GVSerialNo) {
                        if (objTemp.GVSerialNo == GiftVoucher.GVSerialNo) {
                            //$scope.payAlertMessage = new Message(MessageTypes.Warning, "Serial No '" + objTemp.GVItemCode + "' already added");
                            toaster.error({ type: 'error', title: 'Error', body: "Serial No '" + objTemp.GVItemCode + "' already added", showCloseButton: true });
                            return;
                        }
                    }

                } $scope.payAlertMessage = new Message(MessageTypes.Empty);
                debugger;
                PaymentModeService.GfRequestVoucher({
                    
                    GVSerialNo: GiftVoucher.Code
                }).then(function (response) {
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: "Gift voucher not found !", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        $scope.payAlertMessage = new Message(MessageTypes.Empty);
                        console.log(response.data.Result, "insert");

                        var dataItems = $scope.GfDgGrid.data();

                        for (var i = 0; i < dataItems.length; i++) {

                            //check prefix -- if not has on grid RETURN
                            if (dataItems[i].GVSerialNo == response.data.Result.GVSerialNo) {
                                //$scope.payAlertMessage = new Message(3, "Serial already added.");
                                toaster.error({ type: 'error', title: 'Error', body: "Serial already added.", showCloseButton: true });
                                return;
                            }
                        }
                        var Result = response.data.Result;

                        dataItems.push({}); var rwIndex = dataItems.length - 1;

                        var dataItem = dataItems[rwIndex];

                        dataItem.GVSerialNo = Result.GVSerialNo;
                        dataItem.GVItemCode = Result.GVItemCode;
                        dataItem.GVItemText = Result.GVItemText;
                        dataItem.GVExpireDate = Result.GVExpireDate;
                        dataItem.GVSoldDate = Result.GVSoldDate;
                        dataItem.GVValue = Result.GVValue;
                        dataItem.ReferenceNo = Result.ReferenceNo;
                        $scope.GfDgGrid.refresh(); _initGiftVoucher(); $scope.GfCalculateTotal();
                    }
                    else {
                        toaster.error({
                            type: 'error', title: 'Error', body: "Gift voucher not found ! " + response.data.Message, showCloseButton: true
                        });
                    }

                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: "Gift voucher not found ! " + response.data.Message, showCloseButton: true });
                });
            };

            $scope.ChangeGiftVoucher = function (a) {
                if (a.which === 13) {
                    $scope.GfAddVoucher();
                }
            };
            $scope.disabled = {};
            //-> Gift Voucher save function
            $scope.SaveGfVouchers = function () {
                try {
                    var dataItems = $scope.GfDgGrid.data();

                    var GVTotal = 0;//$scope.options.Amount = 3000
                    var Amount = $scope.options.Amount;
                    var GvSingleValue = 0;

                    var dtTable = [];
                    if (dataItems.length < 1) {
                        $scope.payAlertMessage = new Message(MessageTypes.Error, "Gift voucher data not found !");
                        toaster.error({ type: 'error', title: 'Error', body: "Gift voucher data not found !", showCloseButton: true });
                        return;
                    }

                    for (var i = 0; i < dataItems.length; i++) {

                        var dataItem = dataItems[i];
                        dataItem.GVValue;
                        if (Amount > dataItem.GVValue) {
                            GvSingleValue = dataItem.GVValue;
                        } else if (Amount == dataItem.GVValue) {
                            GvSingleValue = dataItem.GVValue;
                        } else {
                            GvSingleValue = Amount;
                        }
                        dtTable.push({
                            GVSerialNo: dataItem.GVSerialNo,
                            GVItemCode: dataItem.GVItemCode,
                            GVItemText: dataItem.GVItemText,
                            GVExpireDate: dataItem.GVExpireDate,
                            GVSoldDate: dataItem.GVSoldDate,
                            GVValue: GvSingleValue,
                            ReferenceNo: dataItem.ReferenceNo,
                            CustRefCode: $scope.options.CustomerRef,
                            PaymentMode: $scope.options.PaymentMode
                        });
                        Amount = Amount - dataItem.GVValue;
                    }

                    angular.forEach($scope.GfDgGrid.data(), function (row) {
                        row.RemoveBtn = true;
                    });
                    $scope.disabled.gvbutton = true;
                    debugger;
                    PaymentModeService.PostPamentModeReferences(dtTable, PaymentModesTypes.GiftVoucher).then(function (response) {
                        if (!response.data) {
                            //$scope.payAlertMessage = new Message(MessageTypes.Error, "Gift Voucher data error!");
                            toaster.error({ type: 'error', title: 'Error', body: "Gift Voucher data error!", showCloseButton: true });
                            return;
                        }

                        if (response.data.Code == MessageTypes.Success) {
                            //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                            toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                            $scope.GfDgGrid.data([]);
                            $scope.GfDgGrid.refresh();


                            finish(response.data.Result);
                        }

                    });
                } catch (e) {
                    angular.forEach($scope.GfDgGrid.data(), function (row) {
                        row.RemoveBtn = true;
                    });
                    $scope.disabled.gvbutton = true;
                }
            };

            //-> Btr save function
            $scope.SaveBtr = function (form) {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                if (form && form.$valid) { } else { $scope.showErrors(form); return; }
                var objReturn = jQuery.extend(true, {}, Btr);

                PaymentModeService.PostPamentModeReferences({
                    BtrRefCode: $scope.Btr.BtrRefCode,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount
                }, PaymentModesTypes.BTR).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Btr data error!");
                        toaster.error({ type: 'error', title: 'Error', body: "Btr data error!", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        $scope.payAlertMessage = new Message(MessageTypes.Empty);
                        Btr.ReferenceNo = response.data.Result;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        finish(Btr);
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "BTR data saving fails!" + response.data.Message, showCloseButton: true });
                });


            };

            //-> Ibuy save function
            $scope.SaveIbuy = function (form) {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                if (form && form.$valid) { } else {
                    $scope.showErrors(form);
                    saveBtn = true;
                    return;
                }
                var objReturn = jQuery.extend(true, {}, Ibuy);

                PaymentModeService.PostPamentModeReferences({
                    IbuyRefCode: $scope.Ibuy.IbuyRefCode,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount
                }, PaymentModesTypes.IBUY).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Ibuy data error!");
                        toaster.error({ type: 'error', title: 'Error', body: "Ibuy data error!", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Empty);
                        Ibuy.ReferenceNo = response.data.Result;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        finish(Ibuy);
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "IBUY data saving fails!" + response.data.Message, showCloseButton: true });
                });


            };

            //-> DDB save function
            $scope.SaveDdb = function (form) {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                //if (form && form.$valid) { } else { $scope.showErrors(form); return; }
                var objReturn = jQuery.extend(true, {}, DDB);

                PaymentModeService.PostPamentModeReferences({
                    IbuyRefCode: $scope.DDB.DDBCode,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount
                }, PaymentModesTypes.DDB).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Ibuy data error!");
                        toaster.error({ type: 'error', title: 'Error', body: "DDB data saving failed!", showCloseButton: true });
                        return; 
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Empty);
                        DDB.ReferenceNo = response.data.Result;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        finish(DDB);
                        $scope.disabled.btnSaveDdb = true;
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "DDB data saving fails!" + response.data.Message, showCloseButton: true });
                });


            };


            //-> MS2 save function
            $scope.SaveMs2 = function (form) {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                //if (form && form.$valid) { } else { $scope.showErrors(form); return; }
                var objReturn = jQuery.extend(true, {}, MS2);
                if ($scope.MS2.MS2Code == "" || $scope.MS2.MS2Code == null) {
                    toaster.error({ type: 'error', title: 'Error', body: "Miscellaneous 2 Reference Code is !", showCloseButton: true });
                    return;
                }
                PaymentModeService.PostPamentModeReferences({
                    IbuyRefCode: $scope.MS2.MS2Code,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount
                }, PaymentModesTypes.MS2).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {

                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Ibuy data error!");
                        toaster.error({ type: 'error', title: 'Error', body: "Miscellaneous 2 data saving error!", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        $scope.payAlertMessage = new Message(MessageTypes.Empty);
                        MS2.ReferenceNo = response.data.Result;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        $scope.disabled.Mis2button = true;
                        finish(MS2);
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "Miscellaneous 2 data saving fails!" + response.data.Message, showCloseButton: true });
                });


            };

            //-> Miscellaneous save function
            $scope.SaveMiscellaneous = function (form) {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                if (form && form.$valid) { } else {
                    $scope.showErrors(form);
                    saveBtn = true;
                    return;
                }
                var objReturn = jQuery.extend(true, {}, Miscellaneous);

                PaymentModeService.PostPamentModeReferences({
                    MisPayModeCategory: $scope.Miscellaneous.MisPayModeCategory,
                    MisRefCode: $scope.Miscellaneous.MisRefCode,
                    MisRemarks: $scope.Miscellaneous.Remarks,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode,
                    Amount: $scope.options.Amount
                }, PaymentModesTypes.Miscellaneous).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Miscellaneous data error!");
                        toaster.error({ type: 'error', title: 'Error', body: "Miscellaneous data saving error!", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        $scope.payAlertMessage = new Message(MessageTypes.Empty);
                        Miscellaneous.ReferenceNo = response.data.Result;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.success({ type: 'Success', title: 'Success', body: "Payment mode information saved successfully!", showCloseButton: true });
                        $scope.disabled.Misbutton = true;
                        finish(Miscellaneous);
                    }
                }, function (response) {
                    saveBtn = true;
                    toaster.success({ type: 'error', title: 'Error', body: "Miscellaneous data saving fails!" + response.data.Message, showCloseButton: true });
                });

            };

            //-> Voucher - finder call back
            $scope.VoFinderVoucher = function (response) {
                var dtRow = response.selectedItem;

                if (dtRow.VoucherNo) { } else { return; }

                PaymentModeService.VoRetrieveVoucher({
                    Code: dtRow.VoucherNo,
                    Category: dtRow.VoucherCat,
                    SubCategory: dtRow.VoucherCatSub
                }).then(function (response) {
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                        toaster.error({ type: 'error', title: 'Error', body: "Voucher data retrive error !", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code != MessageTypes.Success) {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); return;
                    }
                    var Result = response.data.Result;
                    Voucher = Result.Voucher; $scope.Voucher = Voucher;

                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            };

            //-> Voucher save function
            $scope.SaveVoucher = function (form) {
                if (!saveBtn) {
                    return;
                }
                saveBtn = false;
                if (form && form.$valid) { } else {
                    $scope.showErrors(form);
                    saveBtn = true;
                    return;
                }
                var objReturn = jQuery.extend(true, {}, Voucher);

                PaymentModeService.PostPamentModeReferences({
                    Code: Voucher.Code,
                    Category: Voucher.Category.Code,
                    SubCategory: Voucher.SubCategory.Code,
                    Amount: Voucher.Amount,
                    ExpiringOn: Voucher.ExpiringOn,
                    SalesAgent: Voucher.SalesAgent.Code,
                    CustRefCode: $scope.options.CustomerRef,
                    PaymentMode: $scope.options.PaymentMode
                }, PaymentModesTypes.Voucher).then(function (response) {
                    saveBtn = true;
                    if (!response.data) {
                        //$scope.payAlertMessage = new Message(MessageTypes.Error, "Voucher data error!");
                        toaster.error({ type: 'error', title: 'Error', body: "Voucher data saving error!", showCloseButton: true });
                        return;
                    }

                    if (response.data.Code == MessageTypes.Success) {
                        $scope.payAlertMessage = new Message(MessageTypes.Empty);

                        objReturn.ReferenceNo = response.data.Result;
                        //$scope.payAlertMessage = new Message(MessageTypes.Success, "Successfully saved!");
                        toaster.error({ type: 'Success', title: 'Error', body: "Payment mode information saved successfully!", showCloseButton: true });

                        finish(objReturn);
                    }
                    else { toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); }

                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });

            };

            //-> Final Callback to parent controller.
            var finish = function (data) {
                $scope.options.Callback(data);
            };

            $scope.Validate = function (type) {
                var ss = $scope.Btr.BtrRefCode;
                var regex = /^[0-9a-zA-Z]*$/;
                if (type == 1) {
                    if (!regex.test(ss)) {
                        //$scope.alertMessageBtr = new Message(MessageTypes.Error, "Reference should be alpha numeric!");
                        toaster.error({ type: 'error', title: 'Error', body: "Reference should be alpha numeric!", showCloseButton: true });
                    } else {
                        $scope.alertMessageBtr = new Message(MessageTypes.Empty);
                    }
                } else if (type == 2) {
                    if (!regex.test(ss)) {
                        //$scope.alertMessageIbuy = new Message(MessageTypes.Error, "Reference should be alpha numeric!");
                        toaster.error({ type: 'error', title: 'Error', body: "Reference should be alpha numeric!", showCloseButton: true });
                    } else {
                        $scope.alertMessageIbuy = new Message(MessageTypes.Empty);
                    }
                } else if (type == 3) {
                    if (!regex.test(ss)) {
                        //$scope.alertMessageMis = new Message(MessageTypes.Error, "Reference should be alpha numeric!");
                        toaster.error({ type: 'error', title: 'Error', body: "Reference should be alpha numeric!", showCloseButton: true });
                    } else {
                        $scope.alertMessageMis = new Message(MessageTypes.Empty);
                    }
                }

            }

            $scope.FocusToNextTextBox = function (type, event) {
                var cardType = $scope.CreditNexusCard.CcCardType;

                if (cardType == CardTypes.AMEX) {
                    if (type == 1) {

                        var length = $scope.CreditNexusCard.CcCardNo1.length;

                        if (length == 4) {
                            var myEl = angular.element(document.querySelector('#CcCardNo4'));
                            myEl.focus();
                        }

                    }
                    else if (type == 2) {
                        var length = $scope.CreditNexusCard.CcCardNo2.length;

                        if (length == 6) {
                            var myEl = angular.element(document.querySelector('#CcCardNo3'));
                            myEl.focus();
                        }
                    }
                    else if (type == 4) {
                        var length = $scope.CreditNexusCard.CcCardNo4.length;

                        if (length == 5) {
                            var myEl = angular.element(document.querySelector('#CcApprovalCode'));
                            myEl.focus();
                        }
                    }
                } else {
                    if (type == 1) {

                        var length = $scope.CreditNexusCard.CcCardNo1.length;

                        if (length == 4) {
                            var myEl = angular.element(document.querySelector('#CcCardNo4'));
                            myEl.focus();
                        }

                    }
                    else if (type == 2) {
                        var length = $scope.CreditNexusCard.CcCardNo2.length;

                        if (length == 4) {
                            var myEl = angular.element(document.querySelector('#CcCardNo3'));
                            myEl.focus();
                        }
                    }
                    else if (type == 3) {
                        var length = $scope.CreditNexusCard.CcCardNo3.length;

                        if (length == 4) {
                            var myEl = angular.element(document.querySelector('#CcCardNo4'));
                            myEl.focus();
                        }
                    } else {
                        var length = $scope.CreditNexusCard.CcCardNo4.length;

                        if (length == 4) {
                            var myEl = angular.element(document.querySelector('#CcApprovalCode'));
                            myEl.focus();
                        }
                    }
                }
            }

            $scope.ValidateLength = function (type, event) {
                var cardType = $scope.CreditNexusCard.CcCardType;
                var regex = /^[0-9]*$/;



                if (cardType == CardTypes.AMEX) {
                    if (type == 1) {

                        var length = $scope.CreditNexusCard.CcCardNo1.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo1)) {
                            event.preventDefault();
                        }

                        if (length == 4) {
                            event.preventDefault();
                        }

                    }
                    else if (type == 2) {
                        var length = $scope.CreditNexusCard.CcCardNo2.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo2)) {
                            event.preventDefault();
                        }

                        if (length == 6) {
                            event.preventDefault();
                        }
                    }
                    else if (type == 4) {
                        var length = $scope.CreditNexusCard.CcCardNo4.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo4)) {
                            event.preventDefault();
                        }

                        if (length == 5) {
                            event.preventDefault();
                        }
                    } else {
                        event.preventDefault();
                    }
                } else {
                    if (type == 1) {

                        var length = $scope.CreditNexusCard.CcCardNo1.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo1)) {
                            event.preventDefault();
                        }

                        if (length == 4) {
                            event.preventDefault();
                        }

                    }
                    else if (type == 2) {

                        var length = $scope.CreditNexusCard.CcCardNo2.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo2)) {
                            event.preventDefault();
                        }

                        if (length == 4) {
                            event.preventDefault();
                        }
                    }
                    else if (type == 3) {

                        var length = $scope.CreditNexusCard.CcCardNo3.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo3)) {
                            event.preventDefault();
                        }

                        if (length == 4) {
                            event.preventDefault();
                        }
                    } else {

                        var length = $scope.CreditNexusCard.CcCardNo4.length;

                        if (!regex.test($scope.CreditNexusCard.CcCardNo4)) {
                            event.preventDefault();
                        }

                        if (length == 4) {
                            event.preventDefault();
                        }
                    }
                }
            }

            $scope.ValidateLengthToSave = function () {
                var cardType = $scope.CreditNexusCard.CcCardType;



                if (cardType == CardTypes.AMEX) {
                    if ($scope.CreditNexusCard.CcCardNo1 != undefined) {
                        var length1 = $scope.CreditNexusCard.CcCardNo1.length;
                        if (length1 != 4) {
                            return false;
                        }
                    } else {
                        return true;
                    }

                    //if ($scope.CreditNexusCard.CcCardNo1 != undefined) {
                    //    var length2 = $scope.CreditNexusCard.CcCardNo2.length;
                    //    if (length2 != 6) {
                    //        return false;
                    //    }
                    //} else {
                    //    return true;
                    //}

                    if ($scope.CreditNexusCard.CcCardNo4 != undefined) {
                        var length4 = $scope.CreditNexusCard.CcCardNo4.length;
                        if (length4 != 5) {
                            return false;
                        }
                    } else {
                        return true;
                    }

                    return true;
                } else {
                    if ($scope.CreditNexusCard.CcCardNo1 != undefined) {
                        var length = $scope.CreditNexusCard.CcCardNo1.length;
                        if (length != 4) {
                            return false;
                        }
                    } else {
                        return true;
                    }

                    //if ($scope.CreditNexusCard.CcCardNo2 != undefined) {
                    //    var length = $scope.CreditNexusCard.CcCardNo2.length;
                    //    if (length != 4) {
                    //        return false;
                    //    }
                    //} else {
                    //    return true;
                    //}
                    //if ($scope.CreditNexusCard.CcCardNo3 != undefined) {
                    //    var length = $scope.CreditNexusCard.CcCardNo3.length;
                    //    if (length != 4) {
                    //        return false;
                    //    }
                    //} else {
                    //    return true;
                    //}
                    if ($scope.CreditNexusCard.CcCardNo4 != undefined) {
                        var length = $scope.CreditNexusCard.CcCardNo4.length;
                        if (length != 4) {
                            return false;
                        }
                    } else {
                        return true;
                    }
                    return true;
                }
            }

            $scope.ChangeCardType = function () {
                $scope.CreditNexusCard.CcCardNo1 = '';
                $scope.CreditNexusCard.CcCardNo2 = '1234';
                $scope.CreditNexusCard.CcCardNo3 = '1234';
                $scope.CreditNexusCard.CcCardNo4 = '';
                $scope.CreditNexusCard.CcCardBankCode = 0;
                $scope.CreditNexusCard.CcApprovalCode = '';
            }

            $scope.btnVerifyClickPOVD = function () {
                PaymentModeService.VerifySerialNumbers($scope.POVD.PreOrderVoucherSerialNumber).then(function (response) {
                    if (response.data.Code == MessageTypes.Success) {
                        $scope.POVD.BatchId = response.data.Result.BatchId;
                        $scope.POVD.Status = response.data.Result.Status;
                        $scope.POVD.StatusId = response.data.Result.StatusId;
                        $scope.POVD.Value = response.data.Result.Value;
                        $scope.POVD.DealerName = response.data.Result.DealerName;
                        $scope.POVD.ExpairyDate = response.data.Result.ExpairyDate;
                    }
                    else {
                        $scope.alertMessage = new Message(response.data.Code, "Invalid serial details");
                        toaster.error({ type: 'error', title: 'Error', body: "", showCloseButton: true });
                        return;
                    }
                },
                function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    return;
                });
            }

            $scope.btnUpdateClickPOVD = function () {

                if ($scope.POVD.PreOrderVoucherSerialNumber == "" || $scope.POVD.PreOrderVoucherSerialNumber == undefined) {
                    //$scope.payAlertMessage = new Message(MessageTypes.Error, "Serial number not entered");
                    toaster.error({ type: 'error', title: 'Error', body: "Serial number not entered", showCloseButton: true });
                    return;
                }

                if ($scope.POVD.StatusId != "0") {
                    //$scope.payAlertMessage = new Message(MessageTypes.Error, "Serial number is not valid to redeem");
                    toaster.error({ type: 'error', title: 'Error', body: "Serial number is not valid to redeem", showCloseButton: true });
                    //$scope.alertMessage = new Message(MessageTypes.Error, "Serial number is not valid to redeem");
                    return;
                }

                var detailItem = new PreOrderVoucherSerials();
                detailItem.BatchId = $scope.POVD.BatchId;
                detailItem.SerialNo = $scope.POVD.PreOrderVoucherSerialNumber;
                detailItem.Status = $scope.POVD.StatusId,
                detailItem.VoucherAmount = $scope.POVD.Value,

                detailItem.CustRefCode = $scope.options.CustomerRef;

                PaymentModeService.UpdateSerials(detailItem).then(function (response) {
                    if (response.data.Code == MessageTypes.Success) {
                        var objReturn = jQuery.extend(true, {}, POVD);

                        objReturn.ReferenceNo = response.data.Result.ReferenceNo;
                        objReturn.PaymentMode = response.data.Result.PaymentMode;
                        finish(objReturn);
                    }
                    else {
                        //$scope.alertMessage = new Message(response.data.Code, "Serial number not redeem");
                        toaster.error({ type: 'error', title: 'Error', body: "Serial number not redeem", showCloseButton: true });
                        return;
                    }
                },
                function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    return;
                });
            }
            var objTemp = new Array();
            $scope.VoFinderVoucher = {
                title: "Voucher",
                info: {
                    appId: "ZBC-DCPOS",
                    uiId: "POS-PMT-VOUCHER-01",
                    mapId: "PMT-VOUCHER-01",
                    modalId: "VoFinderVoucher", //This must be match with HTML Finder element ID (<finder id=�invoice-SalesOrder�>)
                    onLoad: true
                },
                params: [],

                callback: function (response) {
                    var dtRow = response.selectedItem;

                    if (dtRow.VoucherNo) { } else { return; }

                    PaymentModeService.VoRetrieveVoucher({
                        Code: dtRow.VoucherNo,
                        Category: dtRow.VoucherCat,
                        SubCategory: dtRow.VoucherCatSub
                    }).then(function (response) {
                        if (!response.data) {
                            //$scope.payAlertMessage = new Message(MessageTypes.Error, "Oops something went wrong !");
                            toaster.error({ type: 'error', title: 'Error', body: "Voucher retrive failer!", showCloseButton: true });
                            return;
                        }

                        if (response.data.Code != MessageTypes.Success) {
                            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true }); return;
                        }
                        var Result = response.data.Result;
                        Voucher = Result.Voucher; $scope.Voucher = Voucher;

                    }, function (response) {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                    });
                },
                open: function () {




                    objTemp = [];
                    $scope.finderDetailsObj = $scope.options.Params.InvoiceNo;

                    objTemp.push($scope.finderDetailsObj);
                    $scope.alertMessage = new Message(MessageTypes.Empty, '');

                    this.params = objTemp;
                    this.info.onLoad = true;
                    $("#" + this.info.modalId).modal('show');
                }
            };


             

             
            /////////////////////////////////////

            //$scope.checkFilled = function (e) {
            //    var inputVal = document.getElementByName("starPointsAns");
            //    if (inputVal.length.length > 4) {
            //        inputVal.style.backgroundColor = "#F5CEDB";
            //    }
            //    else {
            //        inputVal.style.backgroundColor = "yellow";
            //    }
            //}




            ////////////////////////////////

            $scope.ValidateCheqLength = function (type, event) {
                // var cardType = $scope.CreditNexusCard.CcCardType;
                var regex = /^[0-9]*$/;

                if (type == 1) {

                    var length = $scope.Cheque.ChNo3.length;

                    if (!regex.test($scope.Cheque.ChNo3)) {
                        event.preventDefault();
                    }

                    if (length == 6) {
                        event.preventDefault();
                    }

                }
                else if (type == 2) { 

                    var length = $scope.Cheque.ChNo1.length;

                    if (!regex.test($scope.Cheque.ChNo1)) {
                        event.preventDefault();
                    }

                    if (length == 4) {
                        event.preventDefault();
                    }

                }
                else if (type == 3) {

                    var length = $scope.Cheque.ChNo2.length;

                    if (!regex.test($scope.Cheque.ChNo2)) {
                        event.preventDefault();
                    }

                    if (length == 3) {
                        event.preventDefault();
                    }

                }
            }
       
            
                       

            $scope.FocusToNextCheqBox = function (type, event) {
             //   var cardType = $scope.CreditNexusCard.CcCardType;
                var regex = /^[0-9]*$/;

                    if (type == 1) {
                        var length = $scope.Cheque.ChNo3.length;

                        if (length == 6) {
                            var myEl = angular.element(document.querySelector('#ChequeNo1'));
                            myEl.focus();
                        }

                    }
                    else if (type == 2) {
                        var length = $scope.Cheque.ChNo1.length;

                        if (length == 4) {
                            var myEl = angular.element(document.querySelector('#ChequeNo2'));
                            myEl.focus();
                        }

                    }
                    else if (type == 3) {

                        var length = $scope.Cheque.ChNo2.length;

                        if (length == 3) {
                            var myEl = angular.element(document.querySelector('#ChDate'));
                            myEl.focus();
                        }

                    }
               
            }


        }]
    }
}]);
angular.module("DialogBilling").controller('PaymentSourceController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "PaymentSourceService", function ($scope, Page, $routeParams, $filter, toaster, PaymentSourceService) {
    //Set Page Title
    Page.setTitle("Payment Source");
    $scope.PaymentSource = {};

    //####################################      Finder Payment Source Code       ########################################

    $scope.finderPaymentSource = {
        title: "Search by Payment Source Code",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-PAYMENTSOURCE",
            mapId: "BILLING-PAYMENTSOURCE-MAP",
            modalId: "finderPaymentSource",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.PaymentSource.Id = data.selectedItem.Id;
            $scope.GetPaymentSourceById($scope.PaymentSource.Id);
            $scope.MapCode = true;
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.PaymentSource.Id = 0;
        $scope.PaymentSource.PaymentType = 0;
        $scope.PaymentSource.CcbsPaymentSource = null;
        $scope.PaymentSource.Description = null;
        $scope.PaymentSource.InActive = false;
        $scope.MapCode = false;
    }

    $scope.GetPaymentTypes = function () {
        PaymentSourceService.GetPaymentTypes().then(function (response) {
            if (response.data.Code == "0") {
                $scope.PaymentTypeCollection = response.data.Result.PaymentTypeCollection;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };
    $scope.GetPaymentTypes();

    $scope.GetPaymentSourceById = function (data) {
        PaymentSourceService.GetPaymentSourceById(data).then(function (response) {
            if (response.data.Code == "0") {

                $scope.PaymentSource.Id = response.data.Result.Id;
                $scope.PaymentSource.PaymentType = response.data.Result.PaymentType;
                $scope.PaymentSource.CcbsPaymentSource = response.data.Result.CcbsPaymentSource;
                $scope.PaymentSource.Description = response.data.Result.Description;
                $scope.PaymentSource.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostPaymentSources = function () {
        if ($scope.PaymentSource.PaymentType == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Type not selected", showCloseButton: true });
            return;
        }
        if ($scope.PaymentSource.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Source is Mandatory", showCloseButton: true });
            return;
        }
        if ($scope.PaymentSource.CcbsPaymentSource == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Mapping Code is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.PaymentSource.Id,
            PaymentType: $scope.PaymentSource.PaymentType,
            CcbsPaymentSource: $scope.PaymentSource.CcbsPaymentSource,
            Description: $scope.PaymentSource.Description,
            InActive: $scope.PaymentSource.InActive
        };

        PaymentSourceService.PostPaymentSources($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("DialogBilling").controller('PaymentTransferController', ["$scope", "Page", "$routeParams", "$filter", "AuthService", "PaymentInqueryService", "BulkPaymentService", "PaymentTransferService", "$cookieStore", "toaster", function ($scope, Page, $routeParams, $filter, AuthService, PaymentInqueryService, BulkPaymentService, PaymentTransferService, $cookieStore, toaster) {
    //Set Page Title
    Page.setTitle("Payment Transfers");

    //========================
    $scope.PaymentTransfer = [];
    $scope.payTrans = {};
    var s1 = [];
    var Receiptsdata = JSON.parse(localStorage.getItem('CancelReceipts'));
    $scope.IsBackOfficeUser = false;
    //=========================
    $scope.TempAttachmentRef = '';

    var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));

    // Transfer Within dropdown
    $scope.OptionsTransferWithin = [
      { text: "Different product category", value: "1" },
      { text: "Same Product Category", value: "2" }
    ];

    // Mistake Done By dropdown
    $scope.OptionsMistakeDoneBy = [
      { text: "Customer", value: "1" },
      { text: "Cashier", value: "2" },
      { text: "Other", value: "3" }
    ];

    //===================

    var PaymentTransferSample = [];

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //-> Grid Configurations

    var gg1 = [
       {}
    ];

    $scope.GenGuid = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    $scope.GenerateGuid = function () {
        this.length = 16;
        this.timestamp = +new Date;

        var ts = this.timestamp.toString();
        var parts = ts.split("").reverse();
        var id = "";

        for (var i = 0; i < this.length; ++i) {
            var index = $scope.GenGuid(0, parts.length - 1);
            id += parts[index];
        }
        $scope.TempAttachmentRef = id;
        $scope.referenceParams = {
            moduleId: "BACK-OFFICE-PAYMENT-TRANSFER",
            TransactionId: $scope.payTrans.BathId,
            isAttachedDoc: true,
            IsDisabled: true
        };
    }

    //////////====================== Correct Entry Details   ===================

    var configTransCorrectEntryDetails = {};
    var configTransCorrectEntryDetails = {
        columns: [
                     {
                         field: "IsSelected",
                         headerTemplate: '<input type="checkbox" ng-disabled="disableGrid" title="Select all" ng-model="selectAll" ng-click="toggleSelect($event)" />',
                         template: '<input ng-show="dataItem.SBU != undefined" ng-model="dataItem.IsSelected" type="checkbox" ng-disabled="dataItem.disable" ng-model="dataItem.IsSelected" ng-click="selectThis($event)" />',
                         width: "32px"
                     },
                    { field: "SBU", title: "BU", width: "80px" },
                    { field: "PrePost", title: "Pre/Post", width: "80px" },
                    { field: "ProductType", title: "Product Type", width: "80px" },
                    {
                        field: "ConnectionReference",
                        title: 'Connection Reference',
                        template: '<input type ="text" ng-keydown="KK(this,$event)" ng-change="dataItem.ContractNumber = null" ng-model="dataItem.ConnectionReference"  ng-disabled="dataItem.IsDisabled"   class="k-fill conn-ref kk"/>',
                        width: "100px"
                    },
                    {
                        field: "ContractNo", title: "Contract No",
                        template: '<input type ="text" ng-keydown="KK(this,$event)" ng-change="dataItem.ConnectionReference = null" ng-model="dataItem.ContractNumber"  ng-disabled="dataItem.IsDisabled"    class="k-fill contact kk"/>',
                        width: "100px"
                    },
                    {
                        field: "Amount", title: "Amount",
                        template: '<input type ="text" ng-keydown="KK(this,$event)" ng-model="dataItem.Amount"    kendo-numeric-text-box class="k-fill text-right amount kk"       />',
                        width: "100px"
                    }

        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: false,
        scrollable: true,
        dataBound: function () {

            var dGrid = $scope.dgGridTransCorrectEntryDetails.data();

            angular.forEach(dGrid, function (row) {

                if (!row.IsValiedAccount && row.IsValiedAccount != undefined) {
                    $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                }
            });


        }

    };

    configTransCorrectEntryDetails.dataSource = new kendo.data.DataSource({
        data: [gg1],
        schema: {
            model: {
                id: "ID",
                fields: {
                    'IsSelected': { editable: false, type: "boolean" },
                    'IsValiedAccount': { editable: false, type: "boolean" },
                    'SBU': { editable: false, type: "string" },
                    'PrePost': { editable: false, type: "string" },
                    'ProductType': { editable: false, type: "string" },
                    'ContractNumber': { editable: false, type: "number" },
                    'AccountNo': { editable: true, type: "string" },
                    'ConnectionRef': { editable: true, type: "string" },
                    'CustAddress': { editable: true, type: "string" },
                    'CustName': { editable: true, type: "string" },
                    'CustRef': { editable: true, type: "string" },
                    'CustRefType': { editable: true, type: "string" },
                    'SbuCode': { editable: true, type: "string" },
                    'PrePostCode': { editable: true, type: "string" },
                    'ProductTypeCode': { editable: true, type: "string" },
                    'Amount': { editable: false, type: "number" }
                }
            }
        },
        pageSize: 10

    });

    $scope.dgGridTransCorrectEntryDetails = new DataGrid();
    $scope.dgGridTransCorrectEntryDetails.options(configTransCorrectEntryDetails);

    $scope.Init1 = function (arg) {
        $scope.dgGridTransCorrectEntryDetails.Init(arg);
    };

    //#################################### Finder Payment Transfer #################

    $scope.PaymentTransferID = {};

    $scope.GetPaymentSourseByCcbsPaymentSource = function () {
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        //$scope.BulkPayment.PaymentSource =
        if (defaultDataCookieObj == null || defaultDataCookieObj == undefined) {
            return;
        }
        return defaultDataCookieObj.BillingPaymentSource.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentSource, { CcbsPaymentSource: $scope.payTrans.PaymentSourceId })[0].Id : "";
    }

    $scope.selectThis = function (e) {
        console.log('called');
        var sum = 0;

        var dataItems = $scope.dgGridTransCorrectEntryDetails.data();

        for (var i = 0; i < dataItems.length; i++) {

            if (dataItems[i].IsSelected === true) {
                console.log(dataItems[i].Amount, parseInt(dataItems[i].Amount));
                if (dataItems[i].Amount == parseInt(dataItems[i].Amount)) {
                    sum = sum + parseInt(dataItems[i].Amount);
                }

            }


        }

        $scope.payTrans.total = sum;
        //  $scope.payCancel.Canceltotal = $scope.payCancel.Canceltotal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    };

    $scope.CancelTypeDisabled = false;
    var permissionCodes = AuthService.getProfile().permission;
    if (permissionCodes.indexOf("41001") == -1) {
        $scope.CancelTypeDisabled = true;
    }

    $scope.toggleSelect = function (e) {
        var dataItems = $scope.dgGridTransCorrectEntryDetails.data();

        for (var i = 0; i < dataItems.length; i++) {
            dataItems[i].IsSelected = e.target.checked;
        }
        setTimeout(function () {

            var sum = 0;

            var dataItems = $scope.dgGridTransCorrectEntryDetails.data();

            for (var i = 0; i < dataItems.length; i++) {

                if (dataItems[i].IsSelected === false) {
                    console.log(dataItems[i].Amount, parseInt(dataItems[i].Amount));
                    if (dataItems[i].Amount == parseInt(dataItems[i].Amount)) {
                        sum = sum + parseInt(dataItems[i].Amount);
                    }

                }


            }

            $scope.payTrans.total = sum;

        }, 100);

    };


    // Search By ReceiptUser

    $scope.PaymentTransferID =
    {

        title: "Search by Payment Transfer ID",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-TRANSFER-BATCH",
            mapId: "BILLING-TRANSFER-BATCH",
            modalId: "PaymentTransferID", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: true,
            onLoad: false
        },
        params: [],
        callback: function (data) {
            $scope.payTrans.BathId = data.selectedItem.PayTransferBatchId;
            $scope.GetTransferBatchDetails();

        },
        open: function () {
            $scope.validateBtn = true;
            $scope.GenerateGuid();
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');

        }
    };
    //  #########################

    // ------------------ Attachments ------------------------------------

    $scope.receipt = [];
    // $scope.receipt.ReceiptId123 = "";
    $scope.IsAttach = "NO";


    //REFERENCE POPUP
    $scope.referenceParams = {
        moduleId: "BACK-OFFICE-PAYMENT-TRANSFER",
        TransactionId: $scope.payTrans.BathId,
        isAttachedDoc: true,
    };

    $scope.$watch("payTrans.BathId", function (newValue) {
        //$scope.referenceParams.TransactionId = $scope.payTrans.BathId;
        $scope.referenceParams = {
            moduleId: "BACK-OFFICE-PAYMENT-TRANSFER",
            TransactionId: $scope.payTrans.BathId,
            isAttachedDoc: true,
            IsDisabled: true
        };
    });


    //End REFERENCE POPUP
    $scope.TransRef = [];
    $scope.referenceCallback = function (data) {
        console.log(data, 'call back');
        $scope.TransRef = data.TransactionReference;
        $scope.IsAttach = "YES";

    };

    //-------------------- End Attachment ----------------------------



    $scope.LoadReceiptFromStorage = function () {
        $scope.prodCatDrop = false;
        $scope.GenerateGuid();
        if (Receiptsdata != null) {

            //$scope.payTrans.BatchDate = Receiptsdata.BatchDate;
            //$scope.payCancel.Canceltotal = CancelReceiptsdata.TotalAmt;
            //$scope.payTrans.BathId = Receiptsdata.BatchId;

            angular.forEach(Receiptsdata.RecCollection, function (item) {

                console.log(item, 'item');
                ///$scope.payTrans.PayMethod = item.PaymentMethod;
                //$scope.payTrans.PaymentModeNew = item.PaymentMode;
                $scope.payTrans.ReceiptStatus = item.ReceiptStatus;
                $scope.payTrans.PrePost = item.PrePost;
                $scope.payTrans.SBU = item.SBU;
                $scope.payTrans.ReceiptDate = item.ReceiptDate;
                $scope.payTrans.ReceiptNumber = item.ReceiptNumber;
                $scope.payTrans.ReferenceNo = item.ReferenceNo;
                $scope.payTrans.ConnectionReference = item.ConnectionReference;
                $scope.payTrans.ContractNo = item.ContractNo;
                $scope.payTrans.Amount = item.Amount;
                $scope.payTrans.PaymentMode = item.PaymentMode;
                $scope.payTrans.PaymentMethod = item.PaymentMethod;
                $scope.payTrans.PaymentSource = item.PaymentSource;
                $scope.payTrans.user = item.ReceiptGeneratedUser;
                $scope.payTrans.PaymentModeId = item.PaymentModeId;
                $scope.payTrans.PayMethodId = item.PaymentMethodId;
                $scope.payTrans.PaymentSourceId = item.PaymentSourceId;
                $scope.payTrans.SbuCode = item.SbuCode;
                $scope.payTrans.PaymentTypeId = item.PaymentTypeId;
                $scope.payTrans.PaymentType = item.PaymentType;
                $scope.payTrans.ProductTypeId = item.ProductType;
                $scope.payTrans.OldProdCat = item.ProdCat;
                $scope.payTrans.PaymentSeq = item.PaymentSeq;
                try {
                    $scope.payTrans.PaymentMode = defaultDataCookieObj.BillingPaymentMode.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMode,
                { Id: item.PaymentMode })[0].Description : "";

                } catch (e) {

                }
                

            });

            console.log($scope.payTrans.user, '$scope.payTrans.user');

            localStorage.setItem('CancelReceipts', null);

        }

    }


    $scope.PageLoad = function () {
        var permissionCodes = AuthService.getProfile().permission;
        if (permissionCodes.indexOf("41001") == -1) {
            $scope.IsBackOfficeUser = false;
        } else {
            $scope.IsBackOfficeUser = true;
        }

        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        //if (defaultDataCookieObj == null) {
        BulkPaymentService.GetDefaultData($scope.userInfo().outletType, $scope.IsBackOfficeUser).then(function (response) {

                if (response.data.Code == "0") {


                    $scope.ProductCatCollection = response.data.Result.BillingProdCat;
                    $scope.cancellattonCode = response.data.Result.reasonCodes;
                    $scope.CancellationDesc = response.data.Result.reasonDesc;


                    localStorage.setItem("BulkPaymentDefaultData", JSON.stringify(response.data.Result));


                } else {
                    $scope.alertMessage = new Message(response.data.Code, response.data.Message);
                }
            }, function (response) {
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);
            });
        //} else {

        //    $scope.ProductCatCollection = defaultDataCookieObj.BillingProdCat;
        //    $scope.cancellattonCode = defaultDataCookieObj.reasonCodes;
        //    $scope.CancellationDesc = defaultDataCookieObj.reasonDesc;
        //}

        console.log($scope.cancellattonCode, $scope.CancellationDesc, $scope.ProductCatCollection);

        //$scope.cancellattonCode.unshift({ Id: "0", Description: "Select" });
        //$scope.CancellationDesc.unshift({ Id: "0", Description: "Select" });
        //$scope.ProductCatCollection.unshift({ Id: "0", Description: "All" });

        $scope.LoadReceiptFromStorage();
    }

    $scope.PageLoad();

    //$scope.$watch("payTrans.CancelDesc", function () {
    //    $scope.ResonDescChange();
    //});

    //$scope.$watch("payTrans.cancelCode", function () {
    //    $scope.ResonCodeChange();
    //});

    //$scope.ResonCodeChange = function () {
    //    $scope.payTrans.CancelDesc = $scope.payTrans.cancelCode;

    //}

    //$scope.ResonDescChange = function () {
    //    $scope.payTrans.cancelCode = $scope.payTrans.CancelDesc;
    //}

    var rec = function () {
        this.disable = false;
        this.IsSelected = true;
        this.IsValiedAccount = false;
        this.SBU = "";
        this.PrePost = "";
        this.ProductType = "";
        this.ConnectionReference = "";
        this.ContractNumber = "";
        this.Amount = 0;
        this.AccountNo = "";
        this.ConnectionRef = "";
        this.ContractId = "";
        this.CustAddress = "";
        this.CustName = "";
        this.CustRef = "";
        this.CustRefType = "";
        this.PrePostType = "";
        this.SbuCode = "";
        this.PrePostCode = "";
        this.ProductTypeCode = "";
        this.OldProdCat = "";
        this.ConnectionType = 1;
    }


    $scope.KK = function (row, e) {
        var key = e.keyCode ? e.keyCode : e.which;
        if (key === 13) {
            $('#pleaseWaitDialog').modal();

            var objAccountList = [];

            var focusedElement = $(e.target);
            var nextElement = focusedElement.closest('td').next();
           
            var $nonempty = $('.conn-ref').eq(0).filter(function () {
                return this.value != ''
            });


            s1 = $scope.dgGridTransCorrectEntryDetails.data();
           

            var s = row.dataItem;

            ///////////////////////////////////
            if (focusedElement.hasClass("conn-ref")) {

                //if (!s.ConnectionReference) {
                //    return;
                //}



                if ($nonempty.length == 0) {

                    setTimeout(function () {
                        nextElement.find('input').focus();
                    }, 10);
                }

                else {

                    nextElement = focusedElement.closest('td').next().next();
                    nextElement.find('input').focus();


                    objAccountList.push({ 'connRef': s.ConnectionReference.trim(), 'contractNo': '' });
                }



            }

            else if (focusedElement.hasClass("contact")) {

                setTimeout(function () {
                    nextElement.find('input').focus();
                }, 10);

                if (!s.ContractNumber) {
                    return;
                }




                objAccountList.push({ 'connRef': '', 'contractNo': s.ContractNumber.trim() });

            }

            if (focusedElement.hasClass("amount")) {
                if (s.ConnectionReference != null && s.sbu == null) {
                    objAccountList.push({ 'connRef': s.ConnectionReference.trim(), 'contractNo': '' });
                } else if (s.ContractNumber != null) {
                    objAccountList.push({ 'connRef': '', 'contractNo': s.ContractNumber.trim() });
                }

                var obj = {
                    "custRef": '',
                    "OldCustRef": '',
                    "CustRefType": '',
                    "productCategory": $scope.payTrans.ProdCat,
                    "sbu": 0,
                    "billInvoiceNo": '',
                    "reqType": 1,
                    "accounts": objAccountList,
                    "accessToken": $cookieStore.get('accessToken')
                }

                var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                var sbuDesc = "";

                console.log(defaultDataCookieObj, 'defaultDataCookieObj');
                $scope.prodCatDrop = true;
                PaymentTransferService.SearchByConRef(obj).then(function (response) {

                    if (response.data.Code == MessageTypes.Success) {

                        for (var i = 0; i < defaultDataCookieObj.BillingSbu.length; i++) {

                            var a = defaultDataCookieObj.BillingSbu[i];

                            console.log(a, 'a');

                            if (a.Id == response.data.Result.SBU) {
                                sbuDesc = a.Description;
                            }
                        }

                        var gData = [];
                        if (s.ContractNumber != undefined && s.SBU == undefined) {
                            var g = new rec();//s1[i];
                            
                            if (response.data.Result.ContractNumber == s.ContractNumber) {
                                g.IsValiedAccount = true;
                                g.IsSelected = true;
                                g.SBU = sbuDesc;
                                g.PrePost = response.data.Result.PrePost;
                                g.ProductType = response.data.Result.ProductType;
                                g.ContractNumber = response.data.Result.ContractNumber;
                                g.AccountNo = response.data.Result.AccountNo;
                                g.ConnectionReference = response.data.Result.ConnectionReference;
                                g.ContractId = response.data.Result.ContractId;
                                g.CustAddress = response.data.Result.CustAddress;
                                g.CustName = response.data.Result.CustName;
                                g.CustRef = response.data.Result.CustRef;
                                g.CustRefType = response.data.Result.CustRefType;
                                g.PrePostType = response.data.Result.PrePostType;
                                g.SbuCode = response.data.Result.SbuCode;
                                g.Amount = s.Amount;
                                g.PrePostCode = response.data.Result.PrePostCode;
                                g.ProductTypeCode = response.data.Result.ProductTypeCode;
                                g.ConnectionType = response.data.Result.ConnectionType;

                                gData = $scope.dgGridTransCorrectEntryDetails.data();
                                gData.push(g);
                                var totAmt = 0;
                                angular.forEach(gData, function (gRow) {
                                    if (gRow.IsSelected == true) {
                                        totAmt = (Number(totAmt) + Number(gRow.Amount)).toFixed(2); //totAmt + gRow.Amount;
                                    }
                                });
                                $scope.payTrans.total = totAmt;
                            }
                        } else if (s.ConnectionReference != undefined && s.SBU == undefined) {
                            var g = new rec();
                            if (response.data.Result.ConnectionRef == s.ConnectionReference) {
                                g.IsDisabled = true;
                                g.IsValiedAccount = true;
                                g.IsSelected = true;
                                g.SBU = sbuDesc;
                                g.PrePost = response.data.Result.PrePost;
                                g.ProductType = response.data.Result.ProductType;
                                g.ContractNumber = response.data.Result.ContractNumber;
                                g.AccountNo = response.data.Result.AccountNo;
                                g.ConnectionReference = response.data.Result.ConnectionReference;
                                g.ContractId = response.data.Result.ContractId;
                                g.CustAddress = response.data.Result.CustAddress;
                                g.CustName = response.data.Result.CustName;
                                g.CustRef = response.data.Result.CustRef;
                                g.CustRefType = response.data.Result.CustRefType;
                                g.PrePostType = response.data.Result.PrePostType;
                                g.SbuCode = response.data.Result.SbuCode;
                                g.Amount = s.Amount;
                                g.PrePostCode = response.data.Result.PrePostCode;
                                g.ProductTypeCode = response.data.Result.ProductTypeCode;
                                g.ConnectionType = response.data.Result.ConnectionType;

                                 gData = $scope.dgGridTransCorrectEntryDetails.data();
                                gData.push(g);
                                var totAmt = 0;
                                angular.forEach(gData, function (gRow) {
                                    if (gRow.IsSelected == true) {
                                        totAmt = (Number(totAmt) + Number(gRow.Amount)).toFixed(2); //totAmt + gRow.Amount;
                                    }
                                });
                                $scope.payTrans.total = totAmt;

                            }
                        }


                        //Added by Ruwan2017
                        var totAmt = 0.00;
                        angular.forEach(gData, function (row) {
                            if (row.Amount != null) {

                                //var newfloat = parseFloat(row.Amount).toFixed(2);
                                //$scope.TotAmt = (Number(row.Amount) + Number($scope.TotAmt)).toFixed(2);
                                totAmt = (parseFloat(Number(row.Amount)) + parseFloat(totAmt)).toFixed(2);
                            }
                         
                        });
                        $scope.payTrans.total = totAmt;

                      //  nextElement = focusedElement.closest('td').next().next();
                        //  nextElement.find('input').focus();

                        ///////////////////////////////////

                        setTimeout(function () {
                            var index = 0;
                            $('.kk').eq(index).focus();

                        }, 10);


                    } else {
                        toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });

                       

                    }
                }, function (response) {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                });
            }


            if (focusedElement.hasClass("amount")) {
                //$scope.AddToGrid(s);
            }

            $('#pleaseWaitDialog').modal('hide');
            console.log(s.ConnectionReference, s.ContractNumber, s.Amount, s.SBU, s.PrePost, s.ProductType);


        }
    }



    $scope.PageLoad = function () {
        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
        if (defaultDataCookieObj == null) {
            BulkPaymentService.GetDefaultData().then(function (response) {
                if (response.data.Code == "0") {

                    localStorage.setItem("BulkPaymentDefaultData", JSON.stringify(response.data.Result));


                } else {
                    $scope.alertMessage = new Message(response.data.Code, response.data.Message);
                }
            }, function (response) {
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);
            });
        }

    }

    $scope.PageLoad();

     


    $scope.SubmitPaymentTransfer = function () {  

        if ($scope.payTrans.PaymentMode == "Genie") {
            toaster.error({ type: 'Error', title: 'Error', body: 'Cannot cancel Genie receipts.', showCloseButton: true });
            return;
        }

        if (permissionCodes.indexOf("41001") == -1) {
            $scope.CancelTypeDisabled = true;
        }
        if ($scope.payTrans.cancelCode == '-- Select --') {
            toaster.error({ type: 'Error', title: 'Error', body: 'Please select transfer reason.', showCloseButton: true });
            return;
        }

        var grid = $scope.dgGridTransCorrectEntryDetails.data();
        var isPrePaidExists = false;
        if (grid.length < 2) {
            toaster.error({ type: 'Error', title: 'Error', body: 'Please key-in the amount and press enter key to validate the new payment in Correct Entry Details grid.', showCloseButton: true });
            return;
        }
        var newReceipt = [];
        angular.forEach(grid, function (gRow) {
            if ((gRow.IsSelected == undefined && gRow.IsValiedAccount == undefined) || (gRow.ConnectionRef == undefined && gRow.ContractNumber == null)) {

            } else {
                if (gRow.IsSelected && gRow.IsValiedAccount) {
                    if (gRow.PrePostCode == 1) {
                        isPrePaidExists = true;
                    } else {
                        newReceipt.push(gRow);
                    }
                    
                }
            }
        });

        if (isPrePaidExists) {
            toaster.error({ type: 'error', title: 'Error', body: "Prepaid account/s exists! Please uncheck Prepaid account/s data.", showCloseButton: true });
            return;
        }

        if (newReceipt.length < 1) {
            toaster.error({ type: 'Error', title: 'Error', body: 'Receipts not found to transfer!.', showCloseButton: true });
            return;
        }
        $scope.TotalNewRec = 0;
        angular.forEach(newReceipt, function (gRow) {
            if (gRow.IsSelected && gRow.IsValiedAccount) {
                $scope.TotalNewRec = (Number($scope.TotalNewRec) + Number(gRow.Amount)).toFixed(2);
            }
        });
        
        //Comment By Ruwan need to uncomment after CR Done
        //if (Number($scope.TotalNewRec).toFixed(2) != Number($scope.payTrans.Amount).toFixed(2)) {
        //    toaster.error({ type: 'Error', title: 'Error', body: 'Correct entry amount should be equal!.', showCloseButton: true });
        //    return;
        //}

        $scope.formData = {
            
            ProdCat: $scope.payTrans.ProdCat,
            cancelCode: $scope.payTrans.cancelCode,
            MistakeDoneBy: $scope.payTrans.MistakeDoneBy,
            Email:$scope.payTrans.Email,
            custContactDetails: $scope.payTrans.custContactDetails,
            remarks: $scope.payTrans.remarks,
            originalReceipt: $scope.payTrans.originalReceipt,
            PayTransForm: $scope.payTrans.PayTransForm,
            NicCopy: $scope.payTrans.NicCopy,
            ReqLetter: $scope.payTrans.ReqLetter,
            PaymentTypeId: $scope.payTrans.PaymentTypeId,
            PaymentSourceId: $scope.payTrans.PaymentSourceId,//$scope.GetPaymentSourseByCcbsPaymentSource(),
            PayMethodId: $scope.payTrans.PayMethodId,
            TransferTo: $scope.payTrans.TransferTo,
            ReceiptNumber: $scope.payTrans.ReceiptNumber,
            ReferenceNo: $scope.payTrans.ReferenceNo,
            ReceiptDate: $scope.payTrans.ReceiptDate,
            SbuCode: $scope.payTrans.SbuCode,
            ConnectionReference: $scope.payTrans.ConnectionReference,
            ContractNo: $scope.payTrans.ContractNo,
            PrePostCode: $scope.payTrans.PrePostCode,
            ProductTypeId: $scope.payTrans.ProductTypeId,
            PaymentModeId: $scope.payTrans.PaymentModeId,
            PaymentSource:$scope.payTrans.PaymentSource,
            PayMethod: $scope.payTrans.PayMethod,
            OutletType : $scope.userInfo().outletType,

            Amount: $scope.payTrans.Amount,
            user: $scope.payTrans.user,
            total: $scope.payTrans.total,
            needWorkFlow: $scope.CancelTypeDisabled,

            GridData: newReceipt,
            AttachedList: $scope.TransRef,
            TempAttachmentRef: $scope.TempAttachmentRef,
            OldProdCat: $scope.payTrans.OldProdCat,
            PaymentSeq: $scope.payTrans.PaymentSeq

        };
        $scope.validateBtn = true;
        $scope.SaveBtn = true;
        PaymentTransferService.SubmitPaymentTransfer($scope.formData).then(function (response) {

            if (response.data.Code == MessageTypes.Success) {
                var s = response.data.Message;

                $scope.payTrans.BathId = response.data.Result.BathId;
                $scope.payTrans.workflowCodes = response.data.Result.workflowCodes;
                $scope.payTrans.workflow = response.data.Result.workflow;
                $scope.payTrans.BatchDate = response.data.Result.BatchDate;
                //$scope.payTrans.PayMethod = response.data.Result.PaymentMethod;
                $scope.payTrans.PaymentModeNew = response.data.Result.PaymentModeNew;
                $scope.payTrans.TransferTo = response.data.Result.TransferTo;
                $scope.payTrans.PayMethod = response.data.Result.PaymentMethod;
                //    defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods,
                //{ Id: response.data.Result.PaymentMethod })[0].Description : "";
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });

            } else {
                $scope.validateBtn = false;
                $scope.SaveBtn = false;
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }

        }, function (response) {
            $scope.validateBtn = false;
            $scope.SaveBtn = false;
            toaster.error({ type: 'Error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });

    }

    $scope.RequetCRMDetails = function (cRMAccList) {

        $scope.IsLoadingAtFirstTime = false;
        //$cookieStore.put("accessToken", "");

        var obj = {
            "custRef": "",
            "OldCustRef": "",
            "CustRefType": "",
            "productCategory": $scope.payTrans.ProdCat,
            "sbu": 0,
            "billInvoiceNo": "",
            "reqType": 1,
            "accounts": cRMAccList,
            "accessToken": $cookieStore.get('accessToken')
        }


        BulkPaymentService.ValidateRecordsFromCRM(obj).success(function (response) {
            if (response.Result.isNewAccessToken) {
                $cookieStore.put("accessToken", response.Result.accessToken);
            }
            if (response.Code != MessageTypes.Success) {
                toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
                return;
            } else {
                var GData = $scope.dgGridTransCorrectEntryDetails.data();
                angular.forEach(GData, function (gRow) {
                    var isCrmFail = true;
                    angular.forEach(response.Result.profiles, function (resHeader) {

                        if (resHeader.accounts.length < 1) {
                            toaster.error({ type: 'error', title: 'Error', body: "Accounts not found for relevant Id!", showCloseButton: true });
                            return;
                        } else {
                            if (response.Result.length < 1) {
                                toaster.error({ type: 'error', title: 'Error', body: "Accounts not found for relevant Bill Invoice number!", showCloseButton: true });
                                return;
                            }
                        }
                        var defaultDataCookieObj = JSON.parse(localStorage.getItem("BulkPaymentDefaultData"));
                        angular.forEach(resHeader.accounts, function (res) {
                            $scope.IsRetrivedCrmDetailsBulk = false;
                            if ((res.contractNo != null && res.contractNo == gRow.ContractNumber) ||
                                (res.connRef != null && res.connRef == gRow.ConnectionReference)) {

                                //gRow.SBU = res.Sbu;
                                //gRow.PrePost = res.accountType;
                                //gRow.PrePostDesc = res.accountType == 1 ? "Pre Paid" : "Post Paid";
                                //gRow.ProductType = res.productType;
                                //gRow.ProductTypeDesc = res.productType == ProductTypes.Other ? 'Other' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : 'LTE',
                                //gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";
                                //gRow.ConnectionReference = res.connRef;
                                //gRow.ContractNumber = res.contractNo;

                                gRow.ProductType = res.productType == ProductTypes.Other ? 'Other' : res.productType == ProductTypes.Wifi ? 'Wifi' : res.productType == ProductTypes.NFC ? 'NFC' : res.productType == ProductTypes.CDMA ? 'CDMA' : res.productType == ProductTypes.Fixed ? 'Fixed' : res.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE',
                                gRow.IsValiedAccount = true;
                                gRow.IsSelected = true;
                                gRow.SBUDesc = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: res.Sbu })[0].Description : "";
                                gRow.PrePost = res.accountType == 1 ? "Pre" : "Post";;
                                gRow.ProductTypeCode = res.productType;
                                gRow.ContractNumber = res.contractNo;
                                gRow.AccountNo = res.accountNo;//accountNo.AccountNo;
                                gRow.ConnectionRef = res.connRef;
                                gRow.ContractId = res.contractNo;
                                //gRow.CustAddress = response.Result.CustAddress;
                                //gRow.CustName = response.Result.CustName;
                                //gRow.CustRef = response.Result.CustRef;
                                //gRow.CustRefType = response.Result.CustRefType;
                                //gRow.PrePostType = response.Result.PrePostType;
                                gRow.SbuCode = res.Sbu;
                                gRow.PrePostCode = res.accountType;
                                //gRow.ProductTypeCode = response.Result.ProductTypeCode;

                            }

                        });
                    });

                    if (isCrmFail) {
                        gRow.IsRetrivedCrmDetails = true;
                    }

                    gRow.IsSelected = true;
                });

                var GData = $scope.dgGridTransCorrectEntryDetails.data();//$scope.dgGridBulkPayment.data();

                //$scope.TotAmt = 0.00;
                //angular.forEach(GData, function (row) {
                //    //$scope.TotAmt = (Number(row.Amount) + Number($scope.TotAmt)).toFixed(2);
                //    $scope.TotAmt = (parseFloat(row.Amount) + parseFloat($scope.TotAmt)).toFixed(2);
                //});
                //$scope.payTrans.total = Number($scope.TotAmt).toFixed(2);;

                //Added by Ruwan2017
                var totAmt = 0.00;
                angular.forEach(GData, function (row) {
                    if (row.Amount != null) {
                        //var newfloat = parseFloat(row.Amount).toFixed(2);
                        //$scope.TotAmt = (Number(row.Amount) + Number($scope.TotAmt)).toFixed(2);
                        totAmt = (parseFloat(Number(row.Amount)) + parseFloat(totAmt)).toFixed(2);
                    }

                });
                $scope.payTrans.total = totAmt;

                //Add by Ruwan
                //angular.forEach(GData, function (row) {

                //    if (!row.IsValiedAccount && row.IsValiedAccount != undefined) {
                //        $('tr[data-uid="' + row.uid + '"] ').addClass("bg-highlightRed"); //red
                //    }
                //});
            }

            //$scope.CheckRowColor();

        }).error(function (response) {
            if (response.Result.isNewAccessToken) {
                $cookieStore.put("accessToken", response.Result.accessToken);
            } toaster.error({ type: 'error', title: 'Error', body: response.Message, showCloseButton: true });
            return;
        });

    }

    $scope.CreateCRMObjectToValidateBulk = function () {
        var GData = $scope.dgGridTransCorrectEntryDetails.data();
        var objAccountList = [];

        angular.forEach(GData, function (row) {
            if (row.ConnectionReference != "" && !angular.isUndefined(row.ConnectionReference) && row.ConnectionReference != null
                || row.ContractNumber != "" && !angular.isUndefined(row.ContractNumber) && row.ContractNumber != null) {
                objAccountList.push({ 'connRef': row.ConnectionReference, 'contractNo': row.ContractNumber });//, 'accountNo': row.AccountNo 
            }
        });

        if (objAccountList.length > 0) {
            $scope.RequetCRMDetails(objAccountList);
        } else {
            toaster.error({ type: 'error', title: 'Error', body: "One of the fields (MSISDN or ContractNumber) should provide!", showCloseButton: true });
            return;
        }

    }

    $scope.GetTransferBatchDetails = function () {
        $scope.validateBtn = true;
        $scope.SaveBtn = true;
        var batchId = $scope.payTrans.BathId;
        PaymentTransferService.GetTransferBatchDetails(batchId).then(function (response) {

            if (response.data.Code == "0") {
                $scope.payTrans = response.data.Result;
                $scope.dgGridTransCorrectEntryDetails.data(response.data.Result.GData);
                $scope.gdata = $scope.dgGridTransCorrectEntryDetails.data();
                $scope.TotAmt = 0;
                $scope.payTrans.MistakeDoneBy = response.data.Result.MistakeDoneBy;
                var Pmethod = response.data.Result.PayMethod;
                var PNewmethod = response.data.Result.PaymentMethod;

                $scope.payTrans.PaymentMethod = Pmethod;//
                $scope.payTrans.SBU = defaultDataCookieObj.BillingSbu.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingSbu, { Id: response.data.Result.SBU })[0].Description : "";
                $scope.payTrans.PayMethod = defaultDataCookieObj.BillingPaymentMethods.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMethods,
                { Id: PNewmethod })[0].Description : "";

                $scope.payTrans.PaymentModeNew = defaultDataCookieObj.BillingPaymentMode.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMode,
                { Id: response.data.Result.PaymentModeNew })[0].Description : "";
                $scope.payTrans.PaymentMode = defaultDataCookieObj.BillingPaymentMode.length > 0 ? $filter('filter')(defaultDataCookieObj.BillingPaymentMode,
                { Id: response.data.Result.PaymentMode })[0].Description : "";
               
                $scope.PaymentModeCollection = defaultDataCookieObj.BillingPaymentMode;

                angular.forEach($scope.dgGridTransCorrectEntryDetails.data(), function (row) {
                    row.IsDisabled = true;
                    //row.ProductType = row.ProductType == ProductTypes.Other ? 'Other' : row.productType == ProductTypes.Wifi ? 'Wifi' : row.productType == ProductTypes.NFC ? 'NFC' : row.productType == ProductTypes.CDMA ? 'CDMA' : row.productType == ProductTypes.LTE ? 'LTE' : 'VOLTE';
                    $scope.TotAmt = (Number(row.Amount) + Number($scope.TotAmt)).toFixed(2);
                });
                $scope.payTrans.total = $scope.TotAmt;
                $scope.payTrans.cancelCode = response.data.Result.cancelCode;
                $scope.payTrans.CancelDesc = response.data.Result.cancelCode;
                $scope.IsAttach = response.data.Result.IsAttached;
                var ss = $scope.payTrans.cancelCode;
            } else {
                $scope.alertMessage = new Message(response.data.Code, response.data.Message);
            }
        }, function (response) {
            $scope.alertMessage = new Message(response.data.Code, response.data.Message);
        });
    }

    $scope.SetTransferReasonDesc = function () {
        $scope.payTrans.cancelCode = $scope.payTrans.CancelDesc;
    }
    $scope.SetTransferReasonId = function () {
        $scope.payTrans.CancelDesc = $scope.payTrans.cancelCode;
    }

}]);
angular.module("DialogBilling").controller('PaymentTypeController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "PaymentTypeService", function ($scope, Page, $routeParams, $filter, toaster, PaymentTypeService) {
    //Set Page Title
    Page.setTitle("Payment Type");
    $scope.PaymentType = {};

    //####################################      Finder Payment Type Code       ########################################

    $scope.finderPaymentType = {
        title: "Search by Payment Type Code",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-PAYMENTTYPE",
            mapId: "BILLING-PAYMENTTYPE-MAP",
            modalId: "finderPaymentType",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.PaymentType.Id = data.selectedItem.Id;
            $scope.GetPaymentTypeById($scope.PaymentType.Id);
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.PaymentType.Id = 0;
        $scope.PaymentType.PrefixChar = null;
        $scope.PaymentType.Description = null;
        $scope.PaymentType.InActive = false;
    };

    $scope.GetPaymentTypeById = function (id) {

        PaymentTypeService.GetPaymentTypeById(id).then(function (response) {
            if (response.data.Code == "0") {

                $scope.PaymentType.Id = response.data.Result.Id;
                $scope.PaymentType.PrefixChar = response.data.Result.PrefixChar;
                $scope.PaymentType.Description = response.data.Result.Description;
                $scope.PaymentType.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostPaymentTypes = function () {
        if ($scope.PaymentType.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Type is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.PaymentType.Id,
            PrefixChar: $scope.PaymentType.PrefixChar,
            Description: $scope.PaymentType.Description,
            InActive: $scope.PaymentType.InActive
        };

        PaymentTypeService.PostPaymentTypes($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("DialogBilling").controller('ProductCategoryController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "ProductCategoryService", function ($scope, Page, $routeParams, $filter, toaster, ProductCategoryService) {
    //Set Page Title
    Page.setTitle("Product Category");
    $scope.ProductCategory = {};

    //####################################      Finder Product Category Code       ########################################

    $scope.finderProductCategory = {
        title: "Search by Product Category Code",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-PRODUCTCATEGORY",
            mapId: "BILLING-PRODUCTCATEGORY-MAP",
            modalId: "finderProductCategory",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.ProductCategory.Id = data.selectedItem.Id;
            $scope.GetProductCategoryById($scope.ProductCategory.Id);
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.ProductCategory.Id = 0;
        $scope.ProductCategory.Description = null;
        $scope.ProductCategory.InActive = false;
    };

    $scope.GetProductCategoryById = function (id) {

        ProductCategoryService.GetProductCategoryById(id).then(function (response) {
            if (response.data.Code == "0") {

                $scope.ProductCategory.Id = response.data.Result.Id;
                $scope.ProductCategory.Description = response.data.Result.Description;
                $scope.ProductCategory.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostProductCategorys = function () {
        if ($scope.ProductCategory.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Product Category is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.ProductCategory.Id,
            Description: $scope.ProductCategory.Description,
            InActive: $scope.ProductCategory.InActive

        };

        ProductCategoryService.PostProductCategorys($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("DialogBilling").controller('ProductTypeController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "ProductTypeService", function ($scope, Page, $routeParams, $filter, toaster, ProductTypeService) {
    //Set Page Title
    Page.setTitle("Product Type");
    $scope.ProductType = {};

    //####################################      Finder Product Type Code       ########################################

    $scope.finderProductType = {
        title: "Search by Product Type Code",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-PRODUCTTYPE",
            mapId: "BILLING-PRODUCTTYPE-MAP",
            modalId: "finderProductType",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.ProductType.Id = data.selectedItem.Id;
            $scope.GetProductTypeById($scope.ProductType.Id);
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.ProductType.Id = 0;
        $scope.ProductType.Description = null;
        $scope.ProductType.InActive = false;
    };

    $scope.GetProductTypeById = function (id) {
        ProductTypeService.GetProductTypeById(id).then(function (response) {
            if (response.data.Code == "0") {

                $scope.ProductType.Id = response.data.Result.Id;
                $scope.ProductType.Description = response.data.Result.Description;
                $scope.ProductType.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostProductTypes = function () {
        if ($scope.ProductType.Description == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Product Type is Mandatory", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.ProductType.Id,
            Description: $scope.ProductType.Description,
            InActive: $scope.ProductType.InActive
        };

        ProductTypeService.PostProductTypes($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("DialogBilling").controller('SuspenseAccountConfigController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "SuspenseAccountConfigService", function ($scope, Page, $routeParams, $filter, toaster, SuspenseAccountConfigService) {
    //Set Page Title
    Page.setTitle("Suspense Account Config");
    $scope.SuspenseAccConfig = {};
    $scope.configSuspenseAccConfig = {};

    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 10,
        pageSizes: [15, 50, 75, 100]
    };

    //####################################      Finder Suspense Acc Config Code       ########################################

    $scope.finderSuspenseAccConfig = {
        title: "Search by Suspense Account Config",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-SUSPENSEACCOUNTCONFIG",
            mapId: "BILLING-SUSPENSEACCOUNTCONFIG-MAP",
            modalId: "finderSuspenseAccConfig",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.SuspenseAccConfig.Sbu = data.selectedItem.Sbu;
            $scope.SuspenseAccConfig.PayType = data.selectedItem.PayType;
            $scope.SuspenseAccConfig.PaySource = data.selectedItem.PaySource;
            $scope.GetSuspenseAccConfigById();
            $scope.GetSuspenseAccConfigData();
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################


    //####################################      Suspense Acc Config Grid       ########################################

    var configSuspenseAccConfig = {
        columns: [
                    //{ field: "Sbu", title: "SbuCode", width: "100px" },
                    { field: "SBUSCODE", title: "BU", width: "100px" },
                    {
                        field: "AccountNo",
                        headerTemplate: 'Connection Reference',
                        headerAttributes: { "class": "table-header-CRM" },
                        template: '<input type ="text" ng-model="dataItem.AccountNo" class="k-fill text-right conn-ref2 kk" maxlength="50" ng-disabled="isDisable"/>',
                        width: "100px"
                    },
                    {
                        field: "Description",
                        headerTemplate: 'Contract ID',
                        headerAttributes: { "class": "table-header-CRM" },
                        template: '<input type ="text" ng-model="dataItem.Description" class="k-fill text-right conn-ref2 kk" maxlength="50" ng-disabled="isDisable"/>',
                        width: "100px"
                    }
        ],

        pageable: commonGridConfig,
        navigatable: true,
        editable: "inline",
        scrollable: true
    };

    configSuspenseAccConfig.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                fields: {
                    'Sbu': { editable: false, type: "number" },
                    'SBUSCODE': { editable: false, type: "string" },
                    'AccountNo': { editable: false, type: "string" },
                    'Description': { editable: false, type: "string" }
                }
            }
        },
        pageSize: 10
    });

    $scope.dgGridSuspenseAccountConfig = new DataGrid();

    $scope.dgGridSuspenseAccountConfig.options(configSuspenseAccConfig);

    $scope.InitA = function (arg) {
        $scope.dgGridSuspenseAccountConfig.Init(arg);
    };

    //  #########################################################


    $scope.changePageState = function (status) {
        $scope.SuspenseAccConfig.Sbu = 0;
        $scope.SuspenseAccConfig.PayType = 0;
        $scope.SuspenseAccConfig.PaySource = 0;
        $scope.SuspenseAccConfig.InActive = false;
        $scope.GetSbuCodes();
    }

    $scope.GetSbuCodes = function () {
        SuspenseAccountConfigService.GetSbuCodes().then(function (response) {
            if (response.data.Code == "0") {
                $scope.dgGridSuspenseAccountConfig.data(response.data.Result.dtGrid);
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };
    $scope.GetSbuCodes();

    $scope.GetPaymentTypes = function () {
        SuspenseAccountConfigService.GetPaymentTypes().then(function (response) {
            if (response.data.Code == "0") {
                $scope.PaymentTypeCollection = response.data.Result.PaymentTypeCollection;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };
    $scope.GetPaymentTypes();

    $scope.GetPaymentSourceByPaymentTypeId = function () {
        if ($scope.SuspenseAccConfig.PayType > 0) {
            SuspenseAccountConfigService.GetPaymentSourceByPaymentTypeId($scope.SuspenseAccConfig.PayType).then(function (response) {
                if (response.data.Code == "0") {
                    $scope.PaymentSourceCollection = response.data.Result.PaymentSourceCollection;
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        }
    };

    $scope.GetSuspenseAccConfigData = function () {
        if ($scope.SuspenseAccConfig.PaySource != null) {
            SuspenseAccountConfigService.GetSuspenseAccConfigData($scope.SuspenseAccConfig.PayType, $scope.SuspenseAccConfig.PaySource).then(function (response) {
                if (response.data.Code == "0") {
                    $scope.dgGridSuspenseAccountConfig.data(response.data.Result.dtGrid);
                    $scope.isDisable = true;
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }, function (response) {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            });
        }
    };

    $scope.GetSuspenseAccConfigById = function () {
        SuspenseAccountConfigService.GetSuspenseAccConfigById($scope.SuspenseAccConfig.Sbu, $scope.SuspenseAccConfig.PayType, $scope.SuspenseAccConfig.PaySource).then(function (response) {
            if (response.data.Code == "0") {

                $scope.SuspenseAccConfig.Sbu = response.data.Result.Sbu;
                $scope.SuspenseAccConfig.PayType = response.data.Result.PayType;
                $scope.GetPaymentSourceByPaymentTypeId();
                $scope.SuspenseAccConfig.PaySource = response.data.Result.PaySource;
                $scope.SuspenseAccConfig.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.EditSuspenseAccConfig = function () {
        //$scope.configSuspenseAccConfig.AccountNo.editable = true;
        $scope.isDisable = false;
    };

    $scope.PostSuspenseAccConfig = function () {
        debugger;
        if ($scope.SuspenseAccConfig.PayType == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Type not selected", showCloseButton: true });
            return;
        }
        if ($scope.SuspenseAccConfig.PaySource == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Payment Source not selected", showCloseButton: true });
            return;
        }

        var dataItems = $scope.dgGridSuspenseAccountConfig.data();
        var suspenseAcc = [];
        for (var i = 0; i < dataItems.length; i++) {
            $scope.obj = {
                Sbu: dataItems[i].Sbu,
                PayType: $scope.SuspenseAccConfig.PayType,
                PaySource: $scope.SuspenseAccConfig.PaySource,
                AccountNo: dataItems[i].AccountNo,
                Description: dataItems[i].Description,
                InActive: $scope.SuspenseAccConfig.InActive
            };
            suspenseAcc.push($scope.obj);
        }

        SuspenseAccountConfigService.PostSuspenseAccConfig(suspenseAcc).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);


angular.module("DialogBilling").directive("abcd", "$interval", function ($interval) {
    return {
                scope: true, // isolate
                transclude: true, // bring in any text or elements
                template: "<span class='clock'><span class='clock-text' ng-transclude></span><span class='clock-time'>{{date.now() | date: timeFormat}}</span></span>",
                /**
                 * $s scopee
                 * $e element
                 * $a attributes
                 */
                link: function ($s, $e, $a) {
                    console.log($s, $e, $a);
                    $s.timeFormat = ($a.format === '12') ? 'hh:mm:ss a' : 'HH:mm:ss';
                    $s.date = Date;
                   $interval(null, 1000);
                }
            };
});
angular.module("DialogBilling").controller('TransferLogicController', ["$scope", "Page", "$routeParams", "$filter","toaster", "TransferLogicService", function ($scope, Page, $routeParams, $filter,toaster, TransferLogicService) {
    //Set Page Title
    Page.setTitle("Transfer Logic");


    ///////////////Transfer Logic Finder Modal//////////////

    $scope.OpenTransferLogicFinder = function () {

        //open popup
        window._focuse();
        $("#TransferLogicFinder").modal('show');


    };

    /////////////////////////////////////////

    //-> Grid Sample data for demo purposes

    var TransferLogicSample = [];
    $scope.TransferLogic = {};

    //@@@@@@@@@@@@@@@@@@@@@@@@@@


    //-> Grid Start
    var commonGridConfig = {
        input: true,
        numeric: false,
        pageSize: 15,
        pageSizes: [50, 75, 100]
    };

    var configTransferLogic = {};
    var configTransferLogic = {                                                     
        columns: [

              {
                  field: "FromTransferProduct",
                  title: "From Transfer Product",
                  width: "200px"

              },
              {
                  field: "ToTransferProduct",
                  title: 'To Transfer Product',
                  width: "200px"

              },
                {
                    field: "NewReceiptPaymentMethod",
                    title: 'New Receipt Payment Method',
                    width: "200px"

                },
                {
                    field: "NewReceiptPaymentMode",
                    title: 'New Receipt Payment Mode',
                    width: "200px"

                }


        ],

        pageable: true,
        navigatable: true,
        editable: "incell",
        scrollable: true



    };

    configTransferLogic.dataSource = new kendo.data.DataSource({
        data: [],
        schema: {
            model: {
                id: "ID",
                fields: {

                    'FromTransferProduct': { editable: false, type: "text" },
                    'ToTransferProduct': { editable: true, type: "text" },
                    'NewReceiptPaymentMethod': { editable: true, type: "text" },
                    'NewReceiptPaymentMode': { editable: true, type: "text" }

                }
            }
        },
        pageSize: 15
    });

    ///////
    $scope.dgGridTransferLogic = new DataGrid();
    $scope.dgGridTransferLogic.options(configTransferLogic);

    //################      Finder      ###################
    $scope.finderTransferLogicId = {
        title: "Batch Finder",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-TRANSFERLOGIC",
            mapId: "BILLING-TRANSFERLOGIC-001",
            modalId: "finderTransferLogicId", //This must be match with HTML Finder element ID (<finder id=”invoice-SalesOrder”>)
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.TransferLogic.Id = data.selectedItem.Id;
            $scope.GetTransferDetails(data.selectedItem.Id);
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    $scope.changePageState = function (status) {
        $scope.TransferLogic.Id = 0;
        $scope.TransferLogic.IsActive = false;
        $scope.TransferLogic.PaymentType = 0;
        $scope.TransferLogic.FromTransferProduct = 0;
        $scope.TransferLogic.ToTransferProduct = 0;
        $scope.TransferLogic.NewPaymentMethod = 0;
        $scope.TransferLogic.NewPaymentMode = 0;
    }

    $scope.PostTransferDetails = function () {
       if ($scope.TransferLogic.PaymentType == 0) {
           toaster.error({ type: 'error', title: 'Error', body: "Payment Type not selected", showCloseButton: true });
            return;
        }
        if ($scope.TransferLogic.FromTransferProduct == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "From Transfer Product not selected", showCloseButton: true });
            return;
        }
        if ($scope.TransferLogic.ToTransferProduct == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "To Transfer Product not selected", showCloseButton: true });
            return;
        }
        if ($scope.TransferLogic.NewPaymentMethod == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "New Payment Method not selected", showCloseButton: true });
            return;
        }
        if ($scope.TransferLogic.NewPaymentMode == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "New Payment Mode not selected", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.TransferLogic.Id,
            IsActive: $scope.TransferLogic.IsActive,
            PaymentType: $scope.TransferLogic.PaymentType,
            FromTypeMapping: $scope.TransferLogic.FromTransferProduct,
            ToTypeMapping: $scope.TransferLogic.ToTransferProduct,
            PaymentMethod: $scope.TransferLogic.NewPaymentMethod,
            PaymentMode: $scope.TransferLogic.NewPaymentMode
        };
        
        TransferLogicService.PostTransferDetails($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    }

    $scope.GetTransferDetails = function (data) {
        
        TransferLogicService.GetTransferDetails(data).then(function (response) {
            if (response.data.Code == "0") {

                $scope.TransferLogic.Id = response.data.Result.Id;
                $scope.TransferLogic.IsActive = response.data.Result.IsActive;
                $scope.TransferLogic.PaymentType = response.data.Result.PaymentType;
                $scope.TransferLogic.FromTransferProduct = response.data.Result.FromTransferProduct;
                $scope.TransferLogic.ToTransferProduct = response.data.Result.ToTransferProduct;
                $scope.TransferLogic.NewPaymentMethod = response.data.Result.NewPaymentMethod;
                $scope.TransferLogic.NewPaymentMode = response.data.Result.NewPaymentMode;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    }

    $scope.LoadDefaultTransferLogicData = function () {
        TransferLogicService.LoadDefaultTransferLogicData().then(function (response) {
            if (response.data.Code == "0") {
                $scope.PaymentTypeCollection = response.data.Result.PaymentTypeCollection;
                $scope.FromTransferProductCollection = response.data.Result.FromTransferProductCollection;
                $scope.ToTransferProductCollection = response.data.Result.ToTransferProductCollection;
                $scope.NewPaymentMethodCollection = response.data.Result.NewPaymentMethodCollection;
                $scope.NewPaymentModeCollection = response.data.Result.NewPaymentModeCollection;
                $scope.TransferLogic.IsActive = false;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    }
    $scope.LoadDefaultTransferLogicData();

}]);
angular.module("DialogBilling").controller('TransferProductController', ["$scope", "Page", "$routeParams", "$filter", "toaster", "TransferProductService", function ($scope, Page, $routeParams, $filter, toaster, TransferProductService) {
    //Set Page Title
    Page.setTitle("Transfer Product");
    $scope.TransferProduct = {};

    //####################################      Finder Transfer Product Code       ########################################

    $scope.finderTransferProduct = {
        title: "Search by Transfer Product",
        info: {
            appId: "ZBC-DCPOS-BILLING",
            uiId: "BILLING-TRANSFERPRODUCT",
            mapId: "BILLING-TRANSFERPRODUCT-MAP",
            modalId: "finderTransferProduct",
            dataLoad: false,
            onLoad: false
        },
        params: [],

        callback: function (data) {
            $scope.TransferProduct.Id = data.selectedItem.Id;
            $scope.GetTransferProductById($scope.TransferProduct.Id);
        },
        open: function () {
            objTemp = [];
            this.info.onLoad = true;
            this.params = objTemp;
            $("#" + this.info.modalId).modal('show');
        }
    };

    //  #########################################################

    $scope.changePageState = function (status) {
        $scope.TransferProduct.Id = 0;
        $scope.TransferProduct.SbuCode = 0;
        $scope.TransferProduct.ProductType = 0;
        $scope.TransferProduct.TypeMapping = null;
        $scope.TransferProduct.InActive = false;
        $scope.SbuCodesCollection = null;
    }

    $scope.GetSbuCodes = function () {
        TransferProductService.GetSbuCodes().then(function (response) {
            if ($scope.TransferProduct.ProductType > 0) {
                if (response.data.Code == "0") {
                    $scope.SbuCodesCollection = response.data.Result.dtGrid;
                } else {
                    toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
                }
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.GetProductTypes = function () {
        TransferProductService.GetProductTypes().then(function (response) {
            if (response.data.Code == "0") {
                $scope.ProductTypeCollection = response.data.Result.ProductTypeCollection;
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };
    $scope.GetProductTypes();

    $scope.GetTransferProductById = function (Id) {
        TransferProductService.GetTransferProductById(Id).then(function (response) {
            if (response.data.Code == "0") {

                $scope.TransferProduct.Id = response.data.Result.Id;
                $scope.TransferProduct.ProductType = response.data.Result.ProductType;
                $scope.GetSbuCodes();
                $scope.TransferProduct.SbuCode = response.data.Result.SbuCode;
                $scope.TransferProduct.TypeMapping = response.data.Result.TypeMapping;
                $scope.TransferProduct.InActive = response.data.Result.InActive;

            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

    $scope.PostTransferProduct = function () {
        if ($scope.TransferProduct.TypeMapping == null) {
            toaster.error({ type: 'error', title: 'Error', body: "Transfer Product is Mandatory", showCloseButton: true });
            return;
        }
        if ($scope.TransferProduct.ProductType == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "Product Type not selected", showCloseButton: true });
            return;
        }
        if ($scope.TransferProduct.SbuCode == 0) {
            toaster.error({ type: 'error', title: 'Error', body: "BU not selected", showCloseButton: true });
            return;
        }

        $scope.obj = {
            Id: $scope.TransferProduct.Id,
            SbuCode: $scope.TransferProduct.SbuCode,
            ProductType: $scope.TransferProduct.ProductType,
            TypeMapping: $scope.TransferProduct.TypeMapping,
            InActive: $scope.TransferProduct.InActive
        };

        TransferProductService.PostTransferProduct($scope.obj).then(function (response) {
            if (response.data.Code == "0") {
                toaster.success({ type: 'success', title: 'Success', body: response.data.Message, showCloseButton: true });
            } else {
                toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
            }
        }, function (response) {
            toaster.error({ type: 'error', title: 'Error', body: response.data.Message, showCloseButton: true });
        });
    };

}]);
angular.module("DialogBilling").service("AllowedPaymentModesService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetAllowedPayModesByDapOutletData: function (payType) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetAllowedPayModesByDapOutletData/" + payType);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetAllowedPayModesByDapOutletData/" + payType);
            }
        },
        PostAllowedPaymentModes: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostAllowedPaymentModes", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostAllowedPaymentModes", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("BatchProcessPaymentsService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetBatchProcessData: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBatchProcessData");
            }
            else {
                return $http.get(appConfig.Billing_URL + "BatchProcessController/GetBatchProcessData");
            }
        },
        PostUploadAndVerify: function (request) {  
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostUploadAndVerify", request);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BatchProcessController/PostUploadAndVerify", request);
            }
        },
        GetBatchProcessDetails: function (BatchId) { 
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBatchProcessDetails/" + BatchId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BatchProcessController/GetBatchProcessDetails/" + BatchId);
            }
        },
        CheckConnectionReference: function (req) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/CheckConnectionReference", req);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BatchProcessController/CheckConnectionReference", req);
            }
        },
        PostChangeToSuspence: function (request) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostChangeToSuspence", request);
            }
            else
            {
                return $http.post(appConfig.Billing_URL + "BatchProcessController/PostChangeToSuspence", request);
            }
        },
        saveBatchProcess: function (request) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/saveBatchProcess", request);
            }
            else
            {
                return $http.post(appConfig.Billing_URL + "BatchProcessController/saveBatchProcess", request);
            }
        },
        ReVerify: function (BatchId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/ReVerify/" + BatchId);
            }
            else
            {
                return $http.get(appConfig.Billing_URL + "BatchProcessController/ReVerify/" + BatchId);
            }
        },
        GetVerifiedCount: function (BatchId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetVerifiedCount/" + BatchId);
            }
            else
            {
                return $http.get(appConfig.Billing_URL + "BatchProcessController/GetVerifiedCount/" + BatchId);
            }
        },
        GetSuspenseDetails: function (BatchId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetSuspenseDetails/" + BatchId);
            }
            else
            {
                return $http.get(appConfig.Billing_URL + "BatchProcessController/GetSuspenseDetails/" + BatchId);
            }
        }
    }
}]);
angular.module("DialogBilling").service("BillInvoiceCancellationService", ["$http", "appConfig", function ($http, appConfig) {
    return {


    }

}]);
angular.module("DialogBilling").service("BillInvoicePaymentService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetBIPaymentModes: function () {
            return $http.get(appConfig.Billing_URL + "BillingController/BIPaymentModes");
        },
        PostForGetCxInvoiceDetails: function (CxInvoice) {
            return $http.post(appConfig.Billing_URL + "BillInvoicePayment/GetCxInvoiceDetails", CxInvoice);
        },
        PostBatchDetails: function (batchDetails) {
            return $http.post(appConfig.Billing_URL + "BillInvoicePayment/PostBatchDetails", batchDetails);
        },
        GetBatchDetailsById: function (batchId) {
            return $http.get(appConfig.Billing_URL + "BillInvoicePayment/GetBatchDetails/"+batchId);
        }
    }
}]);
angular.module("DialogBilling").service("BulkPaymentService", ["$http", "appConfig", function ($http, appConfig) {
    
    return {
        GetDefaultData: function (payType, isBacKOffice) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetMasterDetails/" + payType + "/" + isBacKOffice);
            }
            else {
            return $http.get(appConfig.Billing_URL + "BillingController/GetMasterDetails/" + payType + "/" + isBacKOffice);
            }
        },
        GetPaymentSource: function (payType) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentSource/" + payType);
            } else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentSource/" + payType);
            }
        },
        FindCustomerByNIC: function (NicType) {
            return $http.get(appConfig.Billing_URL + "BillingController/FindCustomerByNIC/" + NicType);
        },
        LoadPaymentSourseByPaymentType: function (paymentTypeId) {
            return $http.get(appConfig.Billing_URL + "BillingController/LoadPaymentSourseByPaymentType/" + paymentTypeId);
        },
        ValidateRecordsFromCRM: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetCcbsCustDetails", paymentTypeId);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/GetCcbsCustDetails", paymentTypeId);
            }
        },
        ValidateRecordsFromPE: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetPeCustDetails", paymentTypeId);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/GetPeCustDetails", paymentTypeId);
            }
        },
        ValidateRecordsFromRBM: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetRbmCustDetails", paymentTypeId);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/GetRbmCustDetails", paymentTypeId);
            }
        },
        ValidateRecordsFromOCS: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetOcsCustDetails", paymentTypeId);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/GetOcsCustDetails", paymentTypeId); 
            }
        }, 
        ValidateRecordsFromADF: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetADFCustDetails", paymentTypeId);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/GetADFCustDetails", paymentTypeId);
            }
        },
        PostBatchDetails: function (values) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostBatchDetails", values);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/PostBatchDetails", values);
            }
        },
        GetBatchDetails: function (batchId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBatchDetails/" + batchId);
            }
            else {
            return $http.get(appConfig.Billing_URL + "BillingController/GetBatchDetails/" + batchId);
            }
        },
        PrintReceipts: function (batchId) {
            return $http.get(appConfig.Billing_URL + "BillingController/PrintReceipts/" + batchId);
        },
        GetSendEmail: function (id, type, user) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetSendEmail/" + id + "/" + type + "/" + user);
            }
            else {
            return $http.get(appConfig.Billing_URL + "BillingController/GetSendEmail/" + id + "/" + type + "/" + user);
            }
        },
        GetBIPaymentModes: function () {
            return $http.get(appConfig.Billing_URL + "BillingController/BIPaymentModes");
        },
        PostForGetCxInvoiceDetails: function (CxInvoice) {
            return $http.post(appConfig.Billing_URL + "BillingController/GetCxInvoiceDetails", CxInvoice);
        },
        Get3GConnectionDetails: function (msisdn) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/Get3GConnectionDetails", msisdn);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/Get3GConnectionDetails", msisdn);
            }
        },
        Get3GConnectionDetailbyBatchID: function (BatchId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/Get3GConnectionDetailbyBatchID/" + BatchId);
            }
            else {
            return $http.get(appConfig.Billing_URL + "BillingController/Get3GConnectionDetailbyBatchID/" + BatchId);
            }
        },
        Update3GSIMDetails: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/Update3GSIMDetails", objReqest);
            }
            else {
            return $http.post(appConfig.Billing_URL + "BillingController/Update3GSIMDetails", objReqest);
    }
        }

    }
}]);
angular.module("DialogBilling").service("BulkReceiptPrintingService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        PostReceiptPrintingDetails: function (receiptPrintingDetails) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetReceiptInfomation", receiptPrintingDetails);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BulkReceiptPrintingController/GetReceiptInfomation", receiptPrintingDetails);
            }
        },
        SaveReceiptPrintingDetails: function (receiptPrintingDetails) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/BulkReceiptPrintingSave", receiptPrintingDetails);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BulkReceiptPrintingController/Save", receiptPrintingDetails);
            }
        },
        PrintReceiptPrintingDetails: function (receiptPrintingDetails) {
            return $http.post(appConfig.Billing_URL + "BulkReceiptPrintingController/Print", receiptPrintingDetails);
        },
        GetBulkRecePrintingByBatchNo: function (BatchNo) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBulkRecePrintingByBatchNo/" + BatchNo);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BulkReceiptPrintingController/GetBulkRecePrintingByBatchNo/" + BatchNo);
            }
        }
    }
}]);
angular.module("DialogBilling").service("CancellationTransferReasonsService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetCanTransReasonsByReasonCode: function (id) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetCanTransReasonsByReasonCode/" + id);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetCanTransReasonsByReasonCode/" + id);
            }
        },
        PostCanTransReasons: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostCanTransReasons", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostCanTransReasons", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("ChequeReturnReasonsService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetMasterDetails: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetChequeReturnMasterDetails");
            }
            else {
                return $http.get(appConfig.Billing_URL + "ChequeReturnController/GetMasterDetails");
            }
        },
        GetChequeDetails: function (chNo, chBank, chBranch) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetChequeDetails/" + chNo + "/" + chBank + "/" + chBranch);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ChequeReturnController/GetChequeDetails/" + chNo + "/" + chBank + "/" + chBranch);
            }
        },
        ValidateChequeDetails: function (chNo, chBank, chBranch) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/ValidateCheque/" + chNo + "/" + chBank + "/" + chBranch);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ChequeReturnController/ValidateCheque/" + chNo + "/" + chBank + "/" + chBranch);
            }
        },
        PostChequeReturn: function (values) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostChequeReturn", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "ChequeReturnController/PostChequeReturn", objReqest);
            }
        },

        PostChequeReturnReasons: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostChequeReturnReasons", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostChequeReturnReasons", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("ChequeReturnService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetMasterDetails: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetChequeReturnMasterDetails");
            }
            else {
                return $http.get(appConfig.Billing_URL + "ChequeReturnController/GetMasterDetails");
            }           
        },
        GetChequeDetails: function (chNo, chBank, chBranch) { 

            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetChequeDetails/" + chNo + "/" + chBank + "/" + chBranch);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ChequeReturnController/GetChequeDetails/" + chNo + "/" + chBank + "/" + chBranch);
            }            
        },
        ValidateChequeDetails: function (chNo, chBank, chBranch) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/ValidateCheque/" + chNo + "/" + chBank + "/" + chBranch);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ChequeReturnController/ValidateCheque/" + chNo + "/" + chBank + "/" + chBranch);
            }

            
        },
        PostChequeReturn: function (values) {

            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostChequeReturn", values);
            }
            else {
                return $http.post(appConfig.Billing_URL + "ChequeReturnController/PostChequeReturn", values);
            }
            
        }

    }

}]);
angular.module("DialogBilling").service("ForcefulRealizationOfChequeService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        getData: function () {
            return $http.get(appConfig.Billing_URL + 'EEEE/-----/');
        },
        PageLoad: function () {
            return $http.get(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/PageLoad");
        },

        GetReceiptDetailsByChequeNo: function (chequeNo, bankcode, branchCode) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetReceiptDetailsByChequeNo_BankNo_BranchCodeFillGridData/" + chequeNo + "/" + bankcode + "/" + branchCode);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/GetReceiptDetailsByChequeNo_BankNo_BranchCodeFillGridData/" + chequeNo + "/" + bankcode + "/" + branchCode);
            }
        },

        GetBankName: function (bankcode) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBankName/" + bankcode);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/GetBankName/" + bankcode);
            }
        },

        getBranchNameAndValidateCheckNo: function (chequeNo, bankcode, branchCode) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/getBranchNameAndValidateCheckNo/" + chequeNo + "/" + bankcode + "/" + branchCode);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/getBranchNameAndValidateCheckNo/" + chequeNo + "/" + bankcode + "/" + branchCode);
            }
        },

        getBranchNameFromBranchcode: function (branchCode) {
        return $http.get(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/getBranchNameFromBranchcode/" + branchCode);
        },

        PostForcefulRealizationOfCheque: function (formdata) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostForcefulRealizationOfCheque", formdata);
            }
            else {
                return $http.post(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/PostForcefulRealizationOfCheque", formdata);
            }
        },

        GetFindbytransationId: function (transationId, finderReciptNo) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetFindbytransationId/" + transationId + "/" + finderReciptNo);
            }
            else {
                return $http.get(appConfig.Billing_URL + "ForcefulRealizationOfChequeController/GetFindbytransationId/" + transationId + "/" + finderReciptNo);
            }
        }

    }
}]);
angular.module("DialogBilling").service("PaymentCancellationService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        pageLoad: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/pageLoadPayCancellation");
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/pageLoadPayCancellation");
            }
        },
        GetPrePaidReceipts: function (val) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPrePaidReceipt/" + val);
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetPrePaidReceipt/" + val);
            }
        },
        GetPostPaidReceipts: function (val) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPostPaidReceipt/" + val); 
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetPostPaidReceipt/" + val);
            }
        },
        GetReceiptsByBatch: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") { 
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetReciptsViaBatch/" + objReqest);
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetReciptsViaBatch/" + objReqest);
            }
        },
        SubmitCancellation: function (objReqest) { 
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/CancelReceipts", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "PaymentInqueryController/CancelReceipts", objReqest);
            }
        },
        GetByBatchId: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBatchById/" + objReqest);
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetBatchById/" + objReqest);
            }
        },
        SendWFPin: function (objreq) {
            if (appConfig.IsWFCloud == "1") {
                return $http.post(appConfig.WF_MODULE_URL + "/SendWFPin", objreq);
            }
            else {
            return $http.post(appConfig.API_URL + "WorkFlowApproval/SendWFPin", objreq);
            }
        },
        VerifyWFPin: function (objreq) {
            if (appConfig.IsWFCloud == "1") {
                return $http.post(appConfig.WF_MODULE_URL + "/VerifyWFPIN", objreq);
            }
            else {
            return $http.post(appConfig.API_URL + "WorkFlowApproval/VerifyWFPIN", objreq);
            }
        },
        DiscardPinRequest: function (UserId, OutletId, objreq) {
            if (appConfig.IsWFCloud == "1") {
                return $http.post(appConfig.WF_MODULE_URL + "/DiscardPinRequest/" + UserId + "/" + OutletId, objreq);
            }
            else {
            return $http.post(appConfig.API_URL + "WorkFlowApproval/DiscardPinRequest/" + UserId + "/" + OutletId, objreq);
        }
    }
    }
}]);
angular.module("DialogBilling").service("PaymentInqueryService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        SearchInBillingSys: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/SearchInBillingSys/", objReqest);
            } else {
                return $http.post(appConfig.Billing_URL + "PaymentInqueryController/SearchInBillingSys", objReqest);
            }
        },
        SearchInPE: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/SearchInPE/", objReqest);
            } else {
                return $http.post(appConfig.Billing_URL + "PaymentInqueryController/SearchInPE", objReqest);
            }
        },
        SearchInCpos: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/SearchInCpos", objReqest);
            } else {
                return $http.post(appConfig.Billing_URL + "PaymentInqueryController/SearchInCpos", objReqest);
            }
        },
        GetDefaultData: function (payType) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetMasterDetails/" + payType);
            } else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetMasterDetails/" + payType);
            }
        }
        
    }
}]);
angular.module("DialogBilling").service("PaymentMethodService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetPaymentMethodById: function (paymentMethodId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentMethodById/" + paymentMethodId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentMethodById/" + paymentMethodId);
            }
        }, 
        GetPaymentMethodBySapCode: function (sapCode) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentMethodBySapCode/" + sapCode);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentMethodBySapCode/" + sapCode);
            }
        },
        PostPaymentMethods: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostPaymentMethod", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostPaymentMethod", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("PaymentSourceService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetPaymentTypes: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentTypes");
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentTypes");
            }
        },
        GetPaymentSourceById: function (paymentId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentSourceById/" + paymentId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentSourceById/" + paymentId);
            }
        },
        PostPaymentSources: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostPaymentSource", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostPaymentSource", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("PaymentTransferService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        SearchByConRef: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                debugger;
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/GetByConRef", objReqest);
            } else {
            return $http.post(appConfig.Billing_URL + "PaymentInqueryController/GetByConRef", objReqest);
            }
        },
        SearchByContactNo: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetByContactNo/" + objReqest);
            } else {
            return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetByContactNo/" + objReqest);
            }

        },
        SubmitPaymentTransfer: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/SubmitPaymentTransfer", objReqest);
            } else {
            return $http.post(appConfig.Billing_URL + "PaymentInqueryController/SubmitPaymentTransfer", objReqest);
            }
        },
        GetTransferBatchDetails: function (batchId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetTransferBatchDetails/" + batchId);
            } else {
            return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetTransferBatchDetails/" + batchId);
        }
        }
       
    }
}]);
angular.module("DialogBilling").service("PaymentTypeService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetPaymentTypeById: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentTypeById/" + paymentTypeId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentTypeById/" + paymentTypeId);
            }
        },
        PostPaymentTypes: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostPaymentType", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostPaymentType", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("ProductCategoryService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetProductCategoryById: function (productCategoryId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetProductCategoryById/" + productCategoryId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetProductCategoryById/" + productCategoryId);
            }
        },
        PostProductCategorys: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostProductCategory", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostProductCategory", objReqest);
            }
        } 
         
    }
}]);
angular.module("DialogBilling").service("ProductTypeService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        GetProductTypeById: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetProductTypeById/" + paymentTypeId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetProductTypeById/" + paymentTypeId);
            }
        },
        PostProductTypes: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostProductType", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostProductType", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("ReceiptPrintingService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetBulkReceiptPrintingDetails: function (batchId, printUserId) {
            return $http.get(appConfig.Billing_URL + "ReportPrintingController/BulkReceiptPrinting/" + batchId + "/" + printUserId);
        },
        GetBulkPaymentPrintingByBatchNo: function (batchId, printUserId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetBulkPaymentPrintingByBatchNo/" + batchId + "/" + printUserId);
            }
            else {
            return $http.get(appConfig.Billing_URL + "ReportPrintingController/BulkPaymentPrinting/" + batchId + "/" + printUserId);
        }
    }
    }
}]);
angular.module("DialogBilling").service("SuspenseAccountConfigService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetSbuCodes: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetSbuCodes");
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetSbuCodes");
            }
        },
        GetPaymentTypes: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentTypes");
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentTypes");
            }
        },
        GetPaymentSourceByPaymentTypeId: function (paymentTypeId) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetPaymentSourceByPaymentTypeId/" + paymentTypeId);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetPaymentSourceByPaymentTypeId/" + paymentTypeId);
            }
        },
        GetSuspenseAccConfigById: function (sbu, payType, paySource) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetSuspenseAccConfigById/" + sbu + "/" + payType + "/" + paySource);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetSuspenseAccConfigById/" + sbu + "/" + payType + "/" + paySource);
            }
        },
        GetSuspenseAccConfigData: function (payType, paySource) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetSuspenseAccConfigData/" + payType + "/" + paySource);
            } else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetSuspenseAccConfigData/" + payType + "/" + paySource);
            }
        },
        PostSuspenseAccConfig: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostSuspenseAccConfig", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostSuspenseAccConfig", objReqest);
            }
        }

    }
}]);
angular.module("DialogBilling").service("TransferLogicService", ["$http", "appConfig", function ($http, appConfig) {
    return {

        PostTransferDetails: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostTransferDetails", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "PaymentInqueryController/PostTransferDetails", objReqest);
            }
        },
        GetTransferDetails: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetTransferLogicDetails/" + objReqest);
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/GetTransferLogicDetails/" + objReqest);
            }
        },
        LoadDefaultTransferLogicData: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/LoadDefaultTransferLogicData");
            }
            else {
                return $http.get(appConfig.Billing_URL + "PaymentInqueryController/LoadDefaultTransferLogicData");
            }
        }
    }
}]);
angular.module("DialogBilling").service("TransferProductService", ["$http", "appConfig", function ($http, appConfig) {
    return {
        GetSbuCodes: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetSbuCodes");
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetSbuCodes");
            }
        },
        GetProductTypes: function () {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetProductTypes");
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetProductTypes");
            }
        },
        GetTransferProductBySbuAndProdType: function (sbuCode, productType) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetTransferProductBySbuAndProdType/" + sbuCode + "/" + productType);
            }
            else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetTransferProductBySbuAndProdType/" + sbuCode + "/" + productType);
            }
        },
        GetTransferProductById: function (id) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.get(appConfig.POSTPAID_MODULE_URL + "/GetTransferProductById/" + id);
            } else {
                return $http.get(appConfig.Billing_URL + "BillingController/GetTransferProductById/" + id);
            }
        },
        PostTransferProduct: function (objReqest) {
            if (appConfig.IsPostpaidCloud == "1") {
                return $http.post(appConfig.POSTPAID_MODULE_URL + "/PostTransferProduct", objReqest);
            }
            else {
                return $http.post(appConfig.Billing_URL + "BillingController/PostTransferProduct", objReqest);
            }
        }

    }
}]);